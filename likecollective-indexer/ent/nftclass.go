// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/schema/typeutil"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NFTClass is the model entity for the NFTClass schema.
type NFTClass struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// StakedAmount holds the value of the "staked_amount" field.
	StakedAmount typeutil.Uint256 `json:"staked_amount,omitempty"`
	// LastStakedAt holds the value of the "last_staked_at" field.
	LastStakedAt time.Time `json:"last_staked_at,omitempty"`
	// NumberOfStakers holds the value of the "number_of_stakers" field.
	NumberOfStakers uint64 `json:"number_of_stakers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NFTClassQuery when eager-loading is set.
	Edges        NFTClassEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NFTClassEdges holds the relations/edges for other nodes in the graph.
type NFTClassEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// Stakings holds the value of the stakings edge.
	Stakings []*Staking `json:"stakings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e NFTClassEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// StakingsOrErr returns the Stakings value or an error if the edge
// was not loaded in eager-loading.
func (e NFTClassEdges) StakingsOrErr() ([]*Staking, error) {
	if e.loadedTypes[1] {
		return e.Stakings, nil
	}
	return nil, &NotLoadedError{edge: "stakings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NFTClass) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nftclass.FieldID, nftclass.FieldNumberOfStakers:
			values[i] = new(sql.NullInt64)
		case nftclass.FieldAddress:
			values[i] = new(sql.NullString)
		case nftclass.FieldLastStakedAt:
			values[i] = new(sql.NullTime)
		case nftclass.FieldStakedAmount:
			values[i] = nftclass.ValueScanner.StakedAmount.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NFTClass fields.
func (_m *NFTClass) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nftclass.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case nftclass.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				_m.Address = value.String
			}
		case nftclass.FieldStakedAmount:
			if value, err := nftclass.ValueScanner.StakedAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.StakedAmount = value
			}
		case nftclass.FieldLastStakedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_staked_at", values[i])
			} else if value.Valid {
				_m.LastStakedAt = value.Time
			}
		case nftclass.FieldNumberOfStakers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_stakers", values[i])
			} else if value.Valid {
				_m.NumberOfStakers = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NFTClass.
// This includes values selected through modifiers, order, etc.
func (_m *NFTClass) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAccounts queries the "accounts" edge of the NFTClass entity.
func (_m *NFTClass) QueryAccounts() *AccountQuery {
	return NewNFTClassClient(_m.config).QueryAccounts(_m)
}

// QueryStakings queries the "stakings" edge of the NFTClass entity.
func (_m *NFTClass) QueryStakings() *StakingQuery {
	return NewNFTClassClient(_m.config).QueryStakings(_m)
}

// Update returns a builder for updating this NFTClass.
// Note that you need to call NFTClass.Unwrap() before calling this method if this NFTClass
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NFTClass) Update() *NFTClassUpdateOne {
	return NewNFTClassClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NFTClass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NFTClass) Unwrap() *NFTClass {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: NFTClass is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NFTClass) String() string {
	var builder strings.Builder
	builder.WriteString("NFTClass(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("address=")
	builder.WriteString(_m.Address)
	builder.WriteString(", ")
	builder.WriteString("staked_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.StakedAmount))
	builder.WriteString(", ")
	builder.WriteString("last_staked_at=")
	builder.WriteString(_m.LastStakedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("number_of_stakers=")
	builder.WriteString(fmt.Sprintf("%v", _m.NumberOfStakers))
	builder.WriteByte(')')
	return builder.String()
}

// NFTClasses is a parsable slice of NFTClass.
type NFTClasses []*NFTClass
