// Code generated by ent, DO NOT EDIT.

package stakingevent

import (
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the stakingevent type in the database.
	Label = "staking_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldNftClassID holds the string denoting the nft_class_id field in the database.
	FieldNftClassID = "nft_class_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldStakedAmountAdded holds the string denoting the staked_amount_added field in the database.
	FieldStakedAmountAdded = "staked_amount_added"
	// FieldStakedAmountRemoved holds the string denoting the staked_amount_removed field in the database.
	FieldStakedAmountRemoved = "staked_amount_removed"
	// FieldRewardAmountAdded holds the string denoting the reward_amount_added field in the database.
	FieldRewardAmountAdded = "reward_amount_added"
	// FieldRewardAmountRemoved holds the string denoting the reward_amount_removed field in the database.
	FieldRewardAmountRemoved = "reward_amount_removed"
	// FieldDatetime holds the string denoting the datetime field in the database.
	FieldDatetime = "datetime"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeNftClass holds the string denoting the nft_class edge name in mutations.
	EdgeNftClass = "nft_class"
	// Table holds the table name of the stakingevent in the database.
	Table = "staking_events"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "staking_events"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_id"
	// NftClassTable is the table that holds the nft_class relation/edge.
	NftClassTable = "staking_events"
	// NftClassInverseTable is the table name for the NFTClass entity.
	// It exists in this package in order to avoid circular dependency with the "nftclass" package.
	NftClassInverseTable = "nft_classes"
	// NftClassColumn is the table column denoting the nft_class relation/edge.
	NftClassColumn = "nft_class_id"
)

// Columns holds all SQL columns for stakingevent fields.
var Columns = []string{
	FieldID,
	FieldEventType,
	FieldNftClassID,
	FieldAccountID,
	FieldStakedAmountAdded,
	FieldStakedAmountRemoved,
	FieldRewardAmountAdded,
	FieldRewardAmountRemoved,
	FieldDatetime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDatetime holds the default value on creation for the "datetime" field.
	DefaultDatetime time.Time
	// ValueScanner of all StakingEvent fields.
	ValueScanner struct {
		StakedAmountAdded   field.TypeValueScanner[typeutil.Uint256]
		StakedAmountRemoved field.TypeValueScanner[typeutil.Uint256]
		RewardAmountAdded   field.TypeValueScanner[typeutil.Uint256]
		RewardAmountRemoved field.TypeValueScanner[typeutil.Uint256]
	}
)

// EventType defines the type for the "event_type" enum field.
type EventType string

// EventTypeStaked is the default value of the EventType enum.
const DefaultEventType = EventTypeStaked

// EventType values.
const (
	EventTypeStaked            EventType = "staked"
	EventTypeUnstaked          EventType = "unstaked"
	EventTypeRewardAdded       EventType = "reward_added"
	EventTypeRewardClaimed     EventType = "reward_claimed"
	EventTypeRewardDeposited   EventType = "reward_deposited"
	EventTypeAllRewardsClaimed EventType = "all_rewards_claimed"
)

func (et EventType) String() string {
	return string(et)
}

// EventTypeValidator is a validator for the "event_type" field enum values. It is called by the builders before save.
func EventTypeValidator(et EventType) error {
	switch et {
	case EventTypeStaked, EventTypeUnstaked, EventTypeRewardAdded, EventTypeRewardClaimed, EventTypeRewardDeposited, EventTypeAllRewardsClaimed:
		return nil
	default:
		return fmt.Errorf("stakingevent: invalid enum value for event_type field: %q", et)
	}
}

// OrderOption defines the ordering options for the StakingEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByNftClassID orders the results by the nft_class_id field.
func ByNftClassID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNftClassID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByStakedAmountAdded orders the results by the staked_amount_added field.
func ByStakedAmountAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmountAdded, opts...).ToFunc()
}

// ByStakedAmountRemoved orders the results by the staked_amount_removed field.
func ByStakedAmountRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmountRemoved, opts...).ToFunc()
}

// ByRewardAmountAdded orders the results by the reward_amount_added field.
func ByRewardAmountAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardAmountAdded, opts...).ToFunc()
}

// ByRewardAmountRemoved orders the results by the reward_amount_removed field.
func ByRewardAmountRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardAmountRemoved, opts...).ToFunc()
}

// ByDatetime orders the results by the datetime field.
func ByDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatetime, opts...).ToFunc()
}

// ByAccountField orders the results by account field.
func ByAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByNftClassField orders the results by nft_class field.
func ByNftClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNftClassStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AccountTable, AccountColumn),
	)
}
func newNftClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NftClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NftClassTable, NftClassColumn),
	)
}
