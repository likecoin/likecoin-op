// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/staking"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetEvmAddress sets the "evm_address" field.
func (_c *AccountCreate) SetEvmAddress(v string) *AccountCreate {
	_c.mutation.SetEvmAddress(v)
	return _c
}

// SetStakedAmount sets the "staked_amount" field.
func (_c *AccountCreate) SetStakedAmount(v typeutil.Uint256) *AccountCreate {
	_c.mutation.SetStakedAmount(v)
	return _c
}

// SetPendingRewardAmount sets the "pending_reward_amount" field.
func (_c *AccountCreate) SetPendingRewardAmount(v typeutil.Uint256) *AccountCreate {
	_c.mutation.SetPendingRewardAmount(v)
	return _c
}

// SetClaimedRewardAmount sets the "claimed_reward_amount" field.
func (_c *AccountCreate) SetClaimedRewardAmount(v typeutil.Uint256) *AccountCreate {
	_c.mutation.SetClaimedRewardAmount(v)
	return _c
}

// AddNftClassIDs adds the "nft_classes" edge to the NFTClass entity by IDs.
func (_c *AccountCreate) AddNftClassIDs(ids ...int) *AccountCreate {
	_c.mutation.AddNftClassIDs(ids...)
	return _c
}

// AddNftClasses adds the "nft_classes" edges to the NFTClass entity.
func (_c *AccountCreate) AddNftClasses(v ...*NFTClass) *AccountCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNftClassIDs(ids...)
}

// AddStakingIDs adds the "stakings" edge to the Staking entity by IDs.
func (_c *AccountCreate) AddStakingIDs(ids ...int) *AccountCreate {
	_c.mutation.AddStakingIDs(ids...)
	return _c
}

// AddStakings adds the "stakings" edges to the Staking entity.
func (_c *AccountCreate) AddStakings(v ...*Staking) *AccountCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStakingIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (_c *AccountCreate) Mutation() *AccountMutation {
	return _c.mutation
}

// Save creates the Account in the database.
func (_c *AccountCreate) Save(ctx context.Context) (*Account, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AccountCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AccountCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AccountCreate) check() error {
	if _, ok := _c.mutation.EvmAddress(); !ok {
		return &ValidationError{Name: "evm_address", err: errors.New(`ent: missing required field "Account.evm_address"`)}
	}
	if v, ok := _c.mutation.EvmAddress(); ok {
		if err := account.EvmAddressValidator(v); err != nil {
			return &ValidationError{Name: "evm_address", err: fmt.Errorf(`ent: validator failed for field "Account.evm_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StakedAmount(); !ok {
		return &ValidationError{Name: "staked_amount", err: errors.New(`ent: missing required field "Account.staked_amount"`)}
	}
	if _, ok := _c.mutation.PendingRewardAmount(); !ok {
		return &ValidationError{Name: "pending_reward_amount", err: errors.New(`ent: missing required field "Account.pending_reward_amount"`)}
	}
	if _, ok := _c.mutation.ClaimedRewardAmount(); !ok {
		return &ValidationError{Name: "claimed_reward_amount", err: errors.New(`ent: missing required field "Account.claimed_reward_amount"`)}
	}
	return nil
}

func (_c *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Account{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.EvmAddress(); ok {
		_spec.SetField(account.FieldEvmAddress, field.TypeString, value)
		_node.EvmAddress = value
	}
	if value, ok := _c.mutation.StakedAmount(); ok {
		vv, err := account.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(account.FieldStakedAmount, field.TypeUint64, vv)
		_node.StakedAmount = value
	}
	if value, ok := _c.mutation.PendingRewardAmount(); ok {
		vv, err := account.ValueScanner.PendingRewardAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(account.FieldPendingRewardAmount, field.TypeUint64, vv)
		_node.PendingRewardAmount = value
	}
	if value, ok := _c.mutation.ClaimedRewardAmount(); ok {
		vv, err := account.ValueScanner.ClaimedRewardAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(account.FieldClaimedRewardAmount, field.TypeUint64, vv)
		_node.ClaimedRewardAmount = value
	}
	if nodes := _c.mutation.NftClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: account.NftClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StakingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   account.StakingsTable,
			Columns: []string{account.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (_c *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Account, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
