// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/predicate"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/staking"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StakingUpdate is the builder for updating Staking entities.
type StakingUpdate struct {
	config
	hooks    []Hook
	mutation *StakingMutation
}

// Where appends a list predicates to the StakingUpdate builder.
func (_u *StakingUpdate) Where(ps ...predicate.Staking) *StakingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPoolShare sets the "pool_share" field.
func (_u *StakingUpdate) SetPoolShare(v string) *StakingUpdate {
	_u.mutation.SetPoolShare(v)
	return _u
}

// SetNillablePoolShare sets the "pool_share" field if the given value is not nil.
func (_u *StakingUpdate) SetNillablePoolShare(v *string) *StakingUpdate {
	if v != nil {
		_u.SetPoolShare(*v)
	}
	return _u
}

// SetStakedAmount sets the "staked_amount" field.
func (_u *StakingUpdate) SetStakedAmount(v typeutil.Uint256) *StakingUpdate {
	_u.mutation.SetStakedAmount(v)
	return _u
}

// SetPendingRewardAmount sets the "pending_reward_amount" field.
func (_u *StakingUpdate) SetPendingRewardAmount(v typeutil.Uint256) *StakingUpdate {
	_u.mutation.SetPendingRewardAmount(v)
	return _u
}

// SetClaimedRewardAmount sets the "claimed_reward_amount" field.
func (_u *StakingUpdate) SetClaimedRewardAmount(v typeutil.Uint256) *StakingUpdate {
	_u.mutation.SetClaimedRewardAmount(v)
	return _u
}

// Mutation returns the StakingMutation object of the builder.
func (_u *StakingUpdate) Mutation() *StakingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StakingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StakingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StakingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StakingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StakingUpdate) check() error {
	if v, ok := _u.mutation.PoolShare(); ok {
		if err := staking.PoolShareValidator(v); err != nil {
			return &ValidationError{Name: "pool_share", err: fmt.Errorf(`ent: validator failed for field "Staking.pool_share": %w`, err)}
		}
	}
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Staking.account"`)
	}
	if _u.mutation.NftClassCleared() && len(_u.mutation.NftClassIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Staking.nft_class"`)
	}
	return nil
}

func (_u *StakingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staking.Table, staking.Columns, sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PoolShare(); ok {
		_spec.SetField(staking.FieldPoolShare, field.TypeString, value)
	}
	if value, ok := _u.mutation.StakedAmount(); ok {
		vv, err := staking.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(staking.FieldStakedAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.PendingRewardAmount(); ok {
		vv, err := staking.ValueScanner.PendingRewardAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(staking.FieldPendingRewardAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.ClaimedRewardAmount(); ok {
		vv, err := staking.ValueScanner.ClaimedRewardAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(staking.FieldClaimedRewardAmount, field.TypeUint64, vv)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StakingUpdateOne is the builder for updating a single Staking entity.
type StakingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StakingMutation
}

// SetPoolShare sets the "pool_share" field.
func (_u *StakingUpdateOne) SetPoolShare(v string) *StakingUpdateOne {
	_u.mutation.SetPoolShare(v)
	return _u
}

// SetNillablePoolShare sets the "pool_share" field if the given value is not nil.
func (_u *StakingUpdateOne) SetNillablePoolShare(v *string) *StakingUpdateOne {
	if v != nil {
		_u.SetPoolShare(*v)
	}
	return _u
}

// SetStakedAmount sets the "staked_amount" field.
func (_u *StakingUpdateOne) SetStakedAmount(v typeutil.Uint256) *StakingUpdateOne {
	_u.mutation.SetStakedAmount(v)
	return _u
}

// SetPendingRewardAmount sets the "pending_reward_amount" field.
func (_u *StakingUpdateOne) SetPendingRewardAmount(v typeutil.Uint256) *StakingUpdateOne {
	_u.mutation.SetPendingRewardAmount(v)
	return _u
}

// SetClaimedRewardAmount sets the "claimed_reward_amount" field.
func (_u *StakingUpdateOne) SetClaimedRewardAmount(v typeutil.Uint256) *StakingUpdateOne {
	_u.mutation.SetClaimedRewardAmount(v)
	return _u
}

// Mutation returns the StakingMutation object of the builder.
func (_u *StakingUpdateOne) Mutation() *StakingMutation {
	return _u.mutation
}

// Where appends a list predicates to the StakingUpdate builder.
func (_u *StakingUpdateOne) Where(ps ...predicate.Staking) *StakingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StakingUpdateOne) Select(field string, fields ...string) *StakingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Staking entity.
func (_u *StakingUpdateOne) Save(ctx context.Context) (*Staking, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StakingUpdateOne) SaveX(ctx context.Context) *Staking {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StakingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StakingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StakingUpdateOne) check() error {
	if v, ok := _u.mutation.PoolShare(); ok {
		if err := staking.PoolShareValidator(v); err != nil {
			return &ValidationError{Name: "pool_share", err: fmt.Errorf(`ent: validator failed for field "Staking.pool_share": %w`, err)}
		}
	}
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Staking.account"`)
	}
	if _u.mutation.NftClassCleared() && len(_u.mutation.NftClassIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Staking.nft_class"`)
	}
	return nil
}

func (_u *StakingUpdateOne) sqlSave(ctx context.Context) (_node *Staking, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staking.Table, staking.Columns, sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staking.FieldID)
		for _, f := range fields {
			if !staking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PoolShare(); ok {
		_spec.SetField(staking.FieldPoolShare, field.TypeString, value)
	}
	if value, ok := _u.mutation.StakedAmount(); ok {
		vv, err := staking.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(staking.FieldStakedAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.PendingRewardAmount(); ok {
		vv, err := staking.ValueScanner.PendingRewardAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(staking.FieldPendingRewardAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.ClaimedRewardAmount(); ok {
		vv, err := staking.ValueScanner.ClaimedRewardAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(staking.FieldClaimedRewardAmount, field.TypeUint64, vv)
	}
	_node = &Staking{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
