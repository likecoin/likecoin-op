// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/schema/typeutil"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EvmAddress holds the value of the "evm_address" field.
	EvmAddress string `json:"evm_address,omitempty"`
	// StakedAmount holds the value of the "staked_amount" field.
	StakedAmount typeutil.Uint256 `json:"staked_amount,omitempty"`
	// PendingRewardAmount holds the value of the "pending_reward_amount" field.
	PendingRewardAmount typeutil.Uint256 `json:"pending_reward_amount,omitempty"`
	// ClaimedRewardAmount holds the value of the "claimed_reward_amount" field.
	ClaimedRewardAmount typeutil.Uint256 `json:"claimed_reward_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges        AccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// NftClasses holds the value of the nft_classes edge.
	NftClasses []*NFTClass `json:"nft_classes,omitempty"`
	// Stakings holds the value of the stakings edge.
	Stakings []*Staking `json:"stakings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NftClassesOrErr returns the NftClasses value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) NftClassesOrErr() ([]*NFTClass, error) {
	if e.loadedTypes[0] {
		return e.NftClasses, nil
	}
	return nil, &NotLoadedError{edge: "nft_classes"}
}

// StakingsOrErr returns the Stakings value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) StakingsOrErr() ([]*Staking, error) {
	if e.loadedTypes[1] {
		return e.Stakings, nil
	}
	return nil, &NotLoadedError{edge: "stakings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			values[i] = new(sql.NullInt64)
		case account.FieldEvmAddress:
			values[i] = new(sql.NullString)
		case account.FieldStakedAmount:
			values[i] = account.ValueScanner.StakedAmount.ScanValue()
		case account.FieldPendingRewardAmount:
			values[i] = account.ValueScanner.PendingRewardAmount.ScanValue()
		case account.FieldClaimedRewardAmount:
			values[i] = account.ValueScanner.ClaimedRewardAmount.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (_m *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case account.FieldEvmAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evm_address", values[i])
			} else if value.Valid {
				_m.EvmAddress = value.String
			}
		case account.FieldStakedAmount:
			if value, err := account.ValueScanner.StakedAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.StakedAmount = value
			}
		case account.FieldPendingRewardAmount:
			if value, err := account.ValueScanner.PendingRewardAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.PendingRewardAmount = value
			}
		case account.FieldClaimedRewardAmount:
			if value, err := account.ValueScanner.ClaimedRewardAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.ClaimedRewardAmount = value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Account.
// This includes values selected through modifiers, order, etc.
func (_m *Account) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryNftClasses queries the "nft_classes" edge of the Account entity.
func (_m *Account) QueryNftClasses() *NFTClassQuery {
	return NewAccountClient(_m.config).QueryNftClasses(_m)
}

// QueryStakings queries the "stakings" edge of the Account entity.
func (_m *Account) QueryStakings() *StakingQuery {
	return NewAccountClient(_m.config).QueryStakings(_m)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Account) Update() *AccountUpdateOne {
	return NewAccountClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Account) Unwrap() *Account {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("evm_address=")
	builder.WriteString(_m.EvmAddress)
	builder.WriteString(", ")
	builder.WriteString("staked_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.StakedAmount))
	builder.WriteString(", ")
	builder.WriteString("pending_reward_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.PendingRewardAmount))
	builder.WriteString(", ")
	builder.WriteString("claimed_reward_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.ClaimedRewardAmount))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
