// Code generated by ent, DO NOT EDIT.

package ent

import (
	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/evmevent"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/schema"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/staking"
	"likecollective-indexer/ent/stakingevent"
	"time"

	"entgo.io/ent/schema/field"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescEvmAddress is the schema descriptor for evm_address field.
	accountDescEvmAddress := accountFields[0].Descriptor()
	// account.EvmAddressValidator is a validator for the "evm_address" field. It is called by the builders before save.
	account.EvmAddressValidator = accountDescEvmAddress.Validators[0].(func(string) error)
	// accountDescStakedAmount is the schema descriptor for staked_amount field.
	accountDescStakedAmount := accountFields[1].Descriptor()
	account.ValueScanner.StakedAmount = accountDescStakedAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// accountDescPendingRewardAmount is the schema descriptor for pending_reward_amount field.
	accountDescPendingRewardAmount := accountFields[2].Descriptor()
	account.ValueScanner.PendingRewardAmount = accountDescPendingRewardAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// accountDescClaimedRewardAmount is the schema descriptor for claimed_reward_amount field.
	accountDescClaimedRewardAmount := accountFields[3].Descriptor()
	account.ValueScanner.ClaimedRewardAmount = accountDescClaimedRewardAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	evmeventFields := schema.EVMEvent{}.Fields()
	_ = evmeventFields
	// evmeventDescTransactionHash is the schema descriptor for transaction_hash field.
	evmeventDescTransactionHash := evmeventFields[0].Descriptor()
	// evmevent.TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	evmevent.TransactionHashValidator = evmeventDescTransactionHash.Validators[0].(func(string) error)
	// evmeventDescChainID is the schema descriptor for chain_id field.
	evmeventDescChainID := evmeventFields[2].Descriptor()
	evmevent.ValueScanner.ChainID = evmeventDescChainID.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// evmeventDescBlockHash is the schema descriptor for block_hash field.
	evmeventDescBlockHash := evmeventFields[3].Descriptor()
	// evmevent.BlockHashValidator is a validator for the "block_hash" field. It is called by the builders before save.
	evmevent.BlockHashValidator = evmeventDescBlockHash.Validators[0].(func(string) error)
	// evmeventDescBlockNumber is the schema descriptor for block_number field.
	evmeventDescBlockNumber := evmeventFields[4].Descriptor()
	evmevent.ValueScanner.BlockNumber = evmeventDescBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// evmeventDescAddress is the schema descriptor for address field.
	evmeventDescAddress := evmeventFields[6].Descriptor()
	// evmevent.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	evmevent.AddressValidator = evmeventDescAddress.Validators[0].(func(string) error)
	// evmeventDescTopic0 is the schema descriptor for topic0 field.
	evmeventDescTopic0 := evmeventFields[7].Descriptor()
	// evmevent.Topic0Validator is a validator for the "topic0" field. It is called by the builders before save.
	evmevent.Topic0Validator = evmeventDescTopic0.Validators[0].(func(string) error)
	// evmeventDescTopic0Hex is the schema descriptor for topic0_hex field.
	evmeventDescTopic0Hex := evmeventFields[8].Descriptor()
	// evmevent.Topic0HexValidator is a validator for the "topic0_hex" field. It is called by the builders before save.
	evmevent.Topic0HexValidator = evmeventDescTopic0Hex.Validators[0].(func(string) error)
	nftclassFields := schema.NFTClass{}.Fields()
	_ = nftclassFields
	// nftclassDescAddress is the schema descriptor for address field.
	nftclassDescAddress := nftclassFields[0].Descriptor()
	// nftclass.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	nftclass.AddressValidator = nftclassDescAddress.Validators[0].(func(string) error)
	// nftclassDescStakedAmount is the schema descriptor for staked_amount field.
	nftclassDescStakedAmount := nftclassFields[1].Descriptor()
	nftclass.ValueScanner.StakedAmount = nftclassDescStakedAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// nftclassDescLastStakedAt is the schema descriptor for last_staked_at field.
	nftclassDescLastStakedAt := nftclassFields[2].Descriptor()
	// nftclass.DefaultLastStakedAt holds the default value on creation for the last_staked_at field.
	nftclass.DefaultLastStakedAt = nftclassDescLastStakedAt.Default.(time.Time)
	// nftclassDescNumberOfStakers is the schema descriptor for number_of_stakers field.
	nftclassDescNumberOfStakers := nftclassFields[3].Descriptor()
	// nftclass.DefaultNumberOfStakers holds the default value on creation for the number_of_stakers field.
	nftclass.DefaultNumberOfStakers = nftclassDescNumberOfStakers.Default.(uint64)
	stakingFields := schema.Staking{}.Fields()
	_ = stakingFields
	// stakingDescStakedAmount is the schema descriptor for staked_amount field.
	stakingDescStakedAmount := stakingFields[3].Descriptor()
	staking.ValueScanner.StakedAmount = stakingDescStakedAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingDescPendingRewardAmount is the schema descriptor for pending_reward_amount field.
	stakingDescPendingRewardAmount := stakingFields[4].Descriptor()
	staking.ValueScanner.PendingRewardAmount = stakingDescPendingRewardAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingDescClaimedRewardAmount is the schema descriptor for claimed_reward_amount field.
	stakingDescClaimedRewardAmount := stakingFields[5].Descriptor()
	staking.ValueScanner.ClaimedRewardAmount = stakingDescClaimedRewardAmount.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	stakingeventFields := schema.StakingEvent{}.Fields()
	_ = stakingeventFields
	// stakingeventDescTransactionHash is the schema descriptor for transaction_hash field.
	stakingeventDescTransactionHash := stakingeventFields[0].Descriptor()
	// stakingevent.TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	stakingevent.TransactionHashValidator = stakingeventDescTransactionHash.Validators[0].(func(string) error)
	// stakingeventDescBlockNumber is the schema descriptor for block_number field.
	stakingeventDescBlockNumber := stakingeventFields[2].Descriptor()
	stakingevent.ValueScanner.BlockNumber = stakingeventDescBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// stakingeventDescNftClassAddress is the schema descriptor for nft_class_address field.
	stakingeventDescNftClassAddress := stakingeventFields[5].Descriptor()
	// stakingevent.NftClassAddressValidator is a validator for the "nft_class_address" field. It is called by the builders before save.
	stakingevent.NftClassAddressValidator = stakingeventDescNftClassAddress.Validators[0].(func(string) error)
	// stakingeventDescAccountEvmAddress is the schema descriptor for account_evm_address field.
	stakingeventDescAccountEvmAddress := stakingeventFields[6].Descriptor()
	// stakingevent.AccountEvmAddressValidator is a validator for the "account_evm_address" field. It is called by the builders before save.
	stakingevent.AccountEvmAddressValidator = stakingeventDescAccountEvmAddress.Validators[0].(func(string) error)
	// stakingeventDescStakedAmountAdded is the schema descriptor for staked_amount_added field.
	stakingeventDescStakedAmountAdded := stakingeventFields[7].Descriptor()
	stakingevent.ValueScanner.StakedAmountAdded = stakingeventDescStakedAmountAdded.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescStakedAmountRemoved is the schema descriptor for staked_amount_removed field.
	stakingeventDescStakedAmountRemoved := stakingeventFields[8].Descriptor()
	stakingevent.ValueScanner.StakedAmountRemoved = stakingeventDescStakedAmountRemoved.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescPendingRewardAmountAdded is the schema descriptor for pending_reward_amount_added field.
	stakingeventDescPendingRewardAmountAdded := stakingeventFields[9].Descriptor()
	stakingevent.ValueScanner.PendingRewardAmountAdded = stakingeventDescPendingRewardAmountAdded.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescPendingRewardAmountRemoved is the schema descriptor for pending_reward_amount_removed field.
	stakingeventDescPendingRewardAmountRemoved := stakingeventFields[10].Descriptor()
	stakingevent.ValueScanner.PendingRewardAmountRemoved = stakingeventDescPendingRewardAmountRemoved.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescClaimedRewardAmountAdded is the schema descriptor for claimed_reward_amount_added field.
	stakingeventDescClaimedRewardAmountAdded := stakingeventFields[11].Descriptor()
	stakingevent.ValueScanner.ClaimedRewardAmountAdded = stakingeventDescClaimedRewardAmountAdded.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescClaimedRewardAmountRemoved is the schema descriptor for claimed_reward_amount_removed field.
	stakingeventDescClaimedRewardAmountRemoved := stakingeventFields[12].Descriptor()
	stakingevent.ValueScanner.ClaimedRewardAmountRemoved = stakingeventDescClaimedRewardAmountRemoved.ValueScanner.(field.TypeValueScanner[typeutil.Uint256])
	// stakingeventDescDatetime is the schema descriptor for datetime field.
	stakingeventDescDatetime := stakingeventFields[13].Descriptor()
	// stakingevent.DefaultDatetime holds the default value on creation for the datetime field.
	stakingevent.DefaultDatetime = stakingeventDescDatetime.Default.(time.Time)
}
