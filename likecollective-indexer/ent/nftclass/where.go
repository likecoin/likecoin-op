// Code generated by ent, DO NOT EDIT.

package nftclass

import (
	"likecollective-indexer/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldAddress, v))
}

// LastStakedAt applies equality check predicate on the "last_staked_at" field. It's identical to LastStakedAtEQ.
func LastStakedAt(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldLastStakedAt, v))
}

// NumberOfStakers applies equality check predicate on the "number_of_stakers" field. It's identical to NumberOfStakersEQ.
func NumberOfStakers(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldNumberOfStakers, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldAddress, v))
}

// LastStakedAtEQ applies the EQ predicate on the "last_staked_at" field.
func LastStakedAtEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldLastStakedAt, v))
}

// LastStakedAtNEQ applies the NEQ predicate on the "last_staked_at" field.
func LastStakedAtNEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldLastStakedAt, v))
}

// LastStakedAtIn applies the In predicate on the "last_staked_at" field.
func LastStakedAtIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldLastStakedAt, vs...))
}

// LastStakedAtNotIn applies the NotIn predicate on the "last_staked_at" field.
func LastStakedAtNotIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldLastStakedAt, vs...))
}

// LastStakedAtGT applies the GT predicate on the "last_staked_at" field.
func LastStakedAtGT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldLastStakedAt, v))
}

// LastStakedAtGTE applies the GTE predicate on the "last_staked_at" field.
func LastStakedAtGTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldLastStakedAt, v))
}

// LastStakedAtLT applies the LT predicate on the "last_staked_at" field.
func LastStakedAtLT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldLastStakedAt, v))
}

// LastStakedAtLTE applies the LTE predicate on the "last_staked_at" field.
func LastStakedAtLTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldLastStakedAt, v))
}

// NumberOfStakersEQ applies the EQ predicate on the "number_of_stakers" field.
func NumberOfStakersEQ(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldNumberOfStakers, v))
}

// NumberOfStakersNEQ applies the NEQ predicate on the "number_of_stakers" field.
func NumberOfStakersNEQ(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldNumberOfStakers, v))
}

// NumberOfStakersIn applies the In predicate on the "number_of_stakers" field.
func NumberOfStakersIn(vs ...uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldNumberOfStakers, vs...))
}

// NumberOfStakersNotIn applies the NotIn predicate on the "number_of_stakers" field.
func NumberOfStakersNotIn(vs ...uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldNumberOfStakers, vs...))
}

// NumberOfStakersGT applies the GT predicate on the "number_of_stakers" field.
func NumberOfStakersGT(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldNumberOfStakers, v))
}

// NumberOfStakersGTE applies the GTE predicate on the "number_of_stakers" field.
func NumberOfStakersGTE(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldNumberOfStakers, v))
}

// NumberOfStakersLT applies the LT predicate on the "number_of_stakers" field.
func NumberOfStakersLT(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldNumberOfStakers, v))
}

// NumberOfStakersLTE applies the LTE predicate on the "number_of_stakers" field.
func NumberOfStakersLTE(v uint64) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldNumberOfStakers, v))
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AccountsTable, AccountsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Account) predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStakingEvents applies the HasEdge predicate on the "staking_events" edge.
func HasStakingEvents() predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StakingEventsTable, StakingEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStakingEventsWith applies the HasEdge predicate on the "staking_events" edge with a given conditions (other predicates).
func HasStakingEventsWith(preds ...predicate.StakingEvent) predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := newStakingEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStakings applies the HasEdge predicate on the "stakings" edge.
func HasStakings() predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StakingsTable, StakingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStakingsWith applies the HasEdge predicate on the "stakings" edge with a given conditions (other predicates).
func HasStakingsWith(preds ...predicate.Staking) predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := newStakingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.NotPredicates(p))
}
