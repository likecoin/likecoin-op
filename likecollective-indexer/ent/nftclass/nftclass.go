// Code generated by ent, DO NOT EDIT.

package nftclass

import (
	"likecollective-indexer/ent/schema/typeutil"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the nftclass type in the database.
	Label = "nft_class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldStakedAmount holds the string denoting the staked_amount field in the database.
	FieldStakedAmount = "staked_amount"
	// FieldLastStakedAt holds the string denoting the last_staked_at field in the database.
	FieldLastStakedAt = "last_staked_at"
	// FieldNumberOfStakers holds the string denoting the number_of_stakers field in the database.
	FieldNumberOfStakers = "number_of_stakers"
	// EdgeAccounts holds the string denoting the accounts edge name in mutations.
	EdgeAccounts = "accounts"
	// EdgeStakings holds the string denoting the stakings edge name in mutations.
	EdgeStakings = "stakings"
	// Table holds the table name of the nftclass in the database.
	Table = "nft_classes"
	// AccountsTable is the table that holds the accounts relation/edge. The primary key declared below.
	AccountsTable = "stakings"
	// AccountsInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountsInverseTable = "accounts"
	// StakingsTable is the table that holds the stakings relation/edge.
	StakingsTable = "stakings"
	// StakingsInverseTable is the table name for the Staking entity.
	// It exists in this package in order to avoid circular dependency with the "staking" package.
	StakingsInverseTable = "stakings"
	// StakingsColumn is the table column denoting the stakings relation/edge.
	StakingsColumn = "nft_class_id"
)

// Columns holds all SQL columns for nftclass fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldStakedAmount,
	FieldLastStakedAt,
	FieldNumberOfStakers,
}

var (
	// AccountsPrimaryKey and AccountsColumn2 are the table columns denoting the
	// primary key for the accounts relation (M2M).
	AccountsPrimaryKey = []string{"account_id", "nft_class_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// DefaultLastStakedAt holds the default value on creation for the "last_staked_at" field.
	DefaultLastStakedAt time.Time
	// DefaultNumberOfStakers holds the default value on creation for the "number_of_stakers" field.
	DefaultNumberOfStakers uint64
	// ValueScanner of all NFTClass fields.
	ValueScanner struct {
		StakedAmount field.TypeValueScanner[typeutil.Uint256]
	}
)

// OrderOption defines the ordering options for the NFTClass queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByStakedAmount orders the results by the staked_amount field.
func ByStakedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmount, opts...).ToFunc()
}

// ByLastStakedAt orders the results by the last_staked_at field.
func ByLastStakedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastStakedAt, opts...).ToFunc()
}

// ByNumberOfStakers orders the results by the number_of_stakers field.
func ByNumberOfStakers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberOfStakers, opts...).ToFunc()
}

// ByAccountsCount orders the results by accounts count.
func ByAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountsStep(), opts...)
	}
}

// ByAccounts orders the results by accounts terms.
func ByAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStakingsCount orders the results by stakings count.
func ByStakingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStakingsStep(), opts...)
	}
}

// ByStakings orders the results by stakings terms.
func ByStakings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStakingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AccountsTable, AccountsPrimaryKey...),
	)
}
func newStakingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StakingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, StakingsTable, StakingsColumn),
	)
}
