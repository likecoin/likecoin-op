// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/predicate"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/staking"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NFTClassUpdate is the builder for updating NFTClass entities.
type NFTClassUpdate struct {
	config
	hooks    []Hook
	mutation *NFTClassMutation
}

// Where appends a list predicates to the NFTClassUpdate builder.
func (_u *NFTClassUpdate) Where(ps ...predicate.NFTClass) *NFTClassUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStakedAmount sets the "staked_amount" field.
func (_u *NFTClassUpdate) SetStakedAmount(v typeutil.Uint256) *NFTClassUpdate {
	_u.mutation.SetStakedAmount(v)
	return _u
}

// SetLastStakedAt sets the "last_staked_at" field.
func (_u *NFTClassUpdate) SetLastStakedAt(v time.Time) *NFTClassUpdate {
	_u.mutation.SetLastStakedAt(v)
	return _u
}

// SetNillableLastStakedAt sets the "last_staked_at" field if the given value is not nil.
func (_u *NFTClassUpdate) SetNillableLastStakedAt(v *time.Time) *NFTClassUpdate {
	if v != nil {
		_u.SetLastStakedAt(*v)
	}
	return _u
}

// SetNumberOfStakers sets the "number_of_stakers" field.
func (_u *NFTClassUpdate) SetNumberOfStakers(v uint64) *NFTClassUpdate {
	_u.mutation.ResetNumberOfStakers()
	_u.mutation.SetNumberOfStakers(v)
	return _u
}

// SetNillableNumberOfStakers sets the "number_of_stakers" field if the given value is not nil.
func (_u *NFTClassUpdate) SetNillableNumberOfStakers(v *uint64) *NFTClassUpdate {
	if v != nil {
		_u.SetNumberOfStakers(*v)
	}
	return _u
}

// AddNumberOfStakers adds value to the "number_of_stakers" field.
func (_u *NFTClassUpdate) AddNumberOfStakers(v int64) *NFTClassUpdate {
	_u.mutation.AddNumberOfStakers(v)
	return _u
}

// AddStakingIDs adds the "stakings" edge to the Staking entity by IDs.
func (_u *NFTClassUpdate) AddStakingIDs(ids ...int) *NFTClassUpdate {
	_u.mutation.AddStakingIDs(ids...)
	return _u
}

// AddStakings adds the "stakings" edges to the Staking entity.
func (_u *NFTClassUpdate) AddStakings(v ...*Staking) *NFTClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStakingIDs(ids...)
}

// Mutation returns the NFTClassMutation object of the builder.
func (_u *NFTClassUpdate) Mutation() *NFTClassMutation {
	return _u.mutation
}

// ClearStakings clears all "stakings" edges to the Staking entity.
func (_u *NFTClassUpdate) ClearStakings() *NFTClassUpdate {
	_u.mutation.ClearStakings()
	return _u
}

// RemoveStakingIDs removes the "stakings" edge to Staking entities by IDs.
func (_u *NFTClassUpdate) RemoveStakingIDs(ids ...int) *NFTClassUpdate {
	_u.mutation.RemoveStakingIDs(ids...)
	return _u
}

// RemoveStakings removes "stakings" edges to Staking entities.
func (_u *NFTClassUpdate) RemoveStakings(v ...*Staking) *NFTClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStakingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NFTClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NFTClassUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NFTClassUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NFTClassUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *NFTClassUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nftclass.Table, nftclass.Columns, sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StakedAmount(); ok {
		vv, err := nftclass.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(nftclass.FieldStakedAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.LastStakedAt(); ok {
		_spec.SetField(nftclass.FieldLastStakedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NumberOfStakers(); ok {
		_spec.SetField(nftclass.FieldNumberOfStakers, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNumberOfStakers(); ok {
		_spec.AddField(nftclass.FieldNumberOfStakers, field.TypeUint64, value)
	}
	if _u.mutation.StakingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStakingsIDs(); len(nodes) > 0 && !_u.mutation.StakingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StakingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nftclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NFTClassUpdateOne is the builder for updating a single NFTClass entity.
type NFTClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NFTClassMutation
}

// SetStakedAmount sets the "staked_amount" field.
func (_u *NFTClassUpdateOne) SetStakedAmount(v typeutil.Uint256) *NFTClassUpdateOne {
	_u.mutation.SetStakedAmount(v)
	return _u
}

// SetLastStakedAt sets the "last_staked_at" field.
func (_u *NFTClassUpdateOne) SetLastStakedAt(v time.Time) *NFTClassUpdateOne {
	_u.mutation.SetLastStakedAt(v)
	return _u
}

// SetNillableLastStakedAt sets the "last_staked_at" field if the given value is not nil.
func (_u *NFTClassUpdateOne) SetNillableLastStakedAt(v *time.Time) *NFTClassUpdateOne {
	if v != nil {
		_u.SetLastStakedAt(*v)
	}
	return _u
}

// SetNumberOfStakers sets the "number_of_stakers" field.
func (_u *NFTClassUpdateOne) SetNumberOfStakers(v uint64) *NFTClassUpdateOne {
	_u.mutation.ResetNumberOfStakers()
	_u.mutation.SetNumberOfStakers(v)
	return _u
}

// SetNillableNumberOfStakers sets the "number_of_stakers" field if the given value is not nil.
func (_u *NFTClassUpdateOne) SetNillableNumberOfStakers(v *uint64) *NFTClassUpdateOne {
	if v != nil {
		_u.SetNumberOfStakers(*v)
	}
	return _u
}

// AddNumberOfStakers adds value to the "number_of_stakers" field.
func (_u *NFTClassUpdateOne) AddNumberOfStakers(v int64) *NFTClassUpdateOne {
	_u.mutation.AddNumberOfStakers(v)
	return _u
}

// AddStakingIDs adds the "stakings" edge to the Staking entity by IDs.
func (_u *NFTClassUpdateOne) AddStakingIDs(ids ...int) *NFTClassUpdateOne {
	_u.mutation.AddStakingIDs(ids...)
	return _u
}

// AddStakings adds the "stakings" edges to the Staking entity.
func (_u *NFTClassUpdateOne) AddStakings(v ...*Staking) *NFTClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStakingIDs(ids...)
}

// Mutation returns the NFTClassMutation object of the builder.
func (_u *NFTClassUpdateOne) Mutation() *NFTClassMutation {
	return _u.mutation
}

// ClearStakings clears all "stakings" edges to the Staking entity.
func (_u *NFTClassUpdateOne) ClearStakings() *NFTClassUpdateOne {
	_u.mutation.ClearStakings()
	return _u
}

// RemoveStakingIDs removes the "stakings" edge to Staking entities by IDs.
func (_u *NFTClassUpdateOne) RemoveStakingIDs(ids ...int) *NFTClassUpdateOne {
	_u.mutation.RemoveStakingIDs(ids...)
	return _u
}

// RemoveStakings removes "stakings" edges to Staking entities.
func (_u *NFTClassUpdateOne) RemoveStakings(v ...*Staking) *NFTClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStakingIDs(ids...)
}

// Where appends a list predicates to the NFTClassUpdate builder.
func (_u *NFTClassUpdateOne) Where(ps ...predicate.NFTClass) *NFTClassUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NFTClassUpdateOne) Select(field string, fields ...string) *NFTClassUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NFTClass entity.
func (_u *NFTClassUpdateOne) Save(ctx context.Context) (*NFTClass, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NFTClassUpdateOne) SaveX(ctx context.Context) *NFTClass {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NFTClassUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NFTClassUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *NFTClassUpdateOne) sqlSave(ctx context.Context) (_node *NFTClass, err error) {
	_spec := sqlgraph.NewUpdateSpec(nftclass.Table, nftclass.Columns, sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NFTClass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nftclass.FieldID)
		for _, f := range fields {
			if !nftclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nftclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StakedAmount(); ok {
		vv, err := nftclass.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(nftclass.FieldStakedAmount, field.TypeUint64, vv)
	}
	if value, ok := _u.mutation.LastStakedAt(); ok {
		_spec.SetField(nftclass.FieldLastStakedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NumberOfStakers(); ok {
		_spec.SetField(nftclass.FieldNumberOfStakers, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNumberOfStakers(); ok {
		_spec.AddField(nftclass.FieldNumberOfStakers, field.TypeUint64, value)
	}
	if _u.mutation.StakingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStakingsIDs(); len(nodes) > 0 && !_u.mutation.StakingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StakingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nftclass.StakingsTable,
			Columns: []string{nftclass.StakingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NFTClass{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nftclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
