// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/stakingevent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StakingEventCreate is the builder for creating a StakingEvent entity.
type StakingEventCreate struct {
	config
	mutation *StakingEventMutation
	hooks    []Hook
}

// SetEventType sets the "event_type" field.
func (_c *StakingEventCreate) SetEventType(v stakingevent.EventType) *StakingEventCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_c *StakingEventCreate) SetNillableEventType(v *stakingevent.EventType) *StakingEventCreate {
	if v != nil {
		_c.SetEventType(*v)
	}
	return _c
}

// SetNftClassID sets the "nft_class_id" field.
func (_c *StakingEventCreate) SetNftClassID(v int) *StakingEventCreate {
	_c.mutation.SetNftClassID(v)
	return _c
}

// SetAccountID sets the "account_id" field.
func (_c *StakingEventCreate) SetAccountID(v int) *StakingEventCreate {
	_c.mutation.SetAccountID(v)
	return _c
}

// SetStakedAmountAdded sets the "staked_amount_added" field.
func (_c *StakingEventCreate) SetStakedAmountAdded(v typeutil.Uint256) *StakingEventCreate {
	_c.mutation.SetStakedAmountAdded(v)
	return _c
}

// SetStakedAmountRemoved sets the "staked_amount_removed" field.
func (_c *StakingEventCreate) SetStakedAmountRemoved(v typeutil.Uint256) *StakingEventCreate {
	_c.mutation.SetStakedAmountRemoved(v)
	return _c
}

// SetRewardAmountAdded sets the "reward_amount_added" field.
func (_c *StakingEventCreate) SetRewardAmountAdded(v typeutil.Uint256) *StakingEventCreate {
	_c.mutation.SetRewardAmountAdded(v)
	return _c
}

// SetRewardAmountRemoved sets the "reward_amount_removed" field.
func (_c *StakingEventCreate) SetRewardAmountRemoved(v typeutil.Uint256) *StakingEventCreate {
	_c.mutation.SetRewardAmountRemoved(v)
	return _c
}

// SetDatetime sets the "datetime" field.
func (_c *StakingEventCreate) SetDatetime(v time.Time) *StakingEventCreate {
	_c.mutation.SetDatetime(v)
	return _c
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (_c *StakingEventCreate) SetNillableDatetime(v *time.Time) *StakingEventCreate {
	if v != nil {
		_c.SetDatetime(*v)
	}
	return _c
}

// SetAccount sets the "account" edge to the Account entity.
func (_c *StakingEventCreate) SetAccount(v *Account) *StakingEventCreate {
	return _c.SetAccountID(v.ID)
}

// SetNftClass sets the "nft_class" edge to the NFTClass entity.
func (_c *StakingEventCreate) SetNftClass(v *NFTClass) *StakingEventCreate {
	return _c.SetNftClassID(v.ID)
}

// Mutation returns the StakingEventMutation object of the builder.
func (_c *StakingEventCreate) Mutation() *StakingEventMutation {
	return _c.mutation
}

// Save creates the StakingEvent in the database.
func (_c *StakingEventCreate) Save(ctx context.Context) (*StakingEvent, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StakingEventCreate) SaveX(ctx context.Context) *StakingEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StakingEventCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StakingEventCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StakingEventCreate) defaults() {
	if _, ok := _c.mutation.EventType(); !ok {
		v := stakingevent.DefaultEventType
		_c.mutation.SetEventType(v)
	}
	if _, ok := _c.mutation.Datetime(); !ok {
		v := stakingevent.DefaultDatetime
		_c.mutation.SetDatetime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StakingEventCreate) check() error {
	if _, ok := _c.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "StakingEvent.event_type"`)}
	}
	if v, ok := _c.mutation.EventType(); ok {
		if err := stakingevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "StakingEvent.event_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.NftClassID(); !ok {
		return &ValidationError{Name: "nft_class_id", err: errors.New(`ent: missing required field "StakingEvent.nft_class_id"`)}
	}
	if _, ok := _c.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "StakingEvent.account_id"`)}
	}
	if _, ok := _c.mutation.StakedAmountAdded(); !ok {
		return &ValidationError{Name: "staked_amount_added", err: errors.New(`ent: missing required field "StakingEvent.staked_amount_added"`)}
	}
	if _, ok := _c.mutation.StakedAmountRemoved(); !ok {
		return &ValidationError{Name: "staked_amount_removed", err: errors.New(`ent: missing required field "StakingEvent.staked_amount_removed"`)}
	}
	if _, ok := _c.mutation.RewardAmountAdded(); !ok {
		return &ValidationError{Name: "reward_amount_added", err: errors.New(`ent: missing required field "StakingEvent.reward_amount_added"`)}
	}
	if _, ok := _c.mutation.RewardAmountRemoved(); !ok {
		return &ValidationError{Name: "reward_amount_removed", err: errors.New(`ent: missing required field "StakingEvent.reward_amount_removed"`)}
	}
	if _, ok := _c.mutation.Datetime(); !ok {
		return &ValidationError{Name: "datetime", err: errors.New(`ent: missing required field "StakingEvent.datetime"`)}
	}
	if len(_c.mutation.AccountIDs()) == 0 {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "StakingEvent.account"`)}
	}
	if len(_c.mutation.NftClassIDs()) == 0 {
		return &ValidationError{Name: "nft_class", err: errors.New(`ent: missing required edge "StakingEvent.nft_class"`)}
	}
	return nil
}

func (_c *StakingEventCreate) sqlSave(ctx context.Context) (*StakingEvent, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StakingEventCreate) createSpec() (*StakingEvent, *sqlgraph.CreateSpec, error) {
	var (
		_node = &StakingEvent{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(stakingevent.Table, sqlgraph.NewFieldSpec(stakingevent.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(stakingevent.FieldEventType, field.TypeEnum, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.StakedAmountAdded(); ok {
		vv, err := stakingevent.ValueScanner.StakedAmountAdded.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingevent.FieldStakedAmountAdded, field.TypeUint64, vv)
		_node.StakedAmountAdded = value
	}
	if value, ok := _c.mutation.StakedAmountRemoved(); ok {
		vv, err := stakingevent.ValueScanner.StakedAmountRemoved.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingevent.FieldStakedAmountRemoved, field.TypeUint64, vv)
		_node.StakedAmountRemoved = value
	}
	if value, ok := _c.mutation.RewardAmountAdded(); ok {
		vv, err := stakingevent.ValueScanner.RewardAmountAdded.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingevent.FieldRewardAmountAdded, field.TypeUint64, vv)
		_node.RewardAmountAdded = value
	}
	if value, ok := _c.mutation.RewardAmountRemoved(); ok {
		vv, err := stakingevent.ValueScanner.RewardAmountRemoved.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingevent.FieldRewardAmountRemoved, field.TypeUint64, vv)
		_node.RewardAmountRemoved = value
	}
	if value, ok := _c.mutation.Datetime(); ok {
		_spec.SetField(stakingevent.FieldDatetime, field.TypeTime, value)
		_node.Datetime = value
	}
	if nodes := _c.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stakingevent.AccountTable,
			Columns: []string{stakingevent.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NftClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stakingevent.NftClassTable,
			Columns: []string{stakingevent.NftClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NftClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// StakingEventCreateBulk is the builder for creating many StakingEvent entities in bulk.
type StakingEventCreateBulk struct {
	config
	err      error
	builders []*StakingEventCreate
}

// Save creates the StakingEvent entities in the database.
func (_c *StakingEventCreateBulk) Save(ctx context.Context) ([]*StakingEvent, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StakingEvent, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StakingEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StakingEventCreateBulk) SaveX(ctx context.Context) []*StakingEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StakingEventCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StakingEventCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
