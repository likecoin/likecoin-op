// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent/stakingevent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StakingEvent is the model entity for the StakingEvent schema.
type StakingEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType stakingevent.EventType `json:"event_type,omitempty"`
	// NftClassID holds the value of the "nft_class_id" field.
	NftClassID int `json:"nft_class_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// StakedAmountAdded holds the value of the "staked_amount_added" field.
	StakedAmountAdded typeutil.Uint256 `json:"staked_amount_added,omitempty"`
	// StakedAmountRemoved holds the value of the "staked_amount_removed" field.
	StakedAmountRemoved typeutil.Uint256 `json:"staked_amount_removed,omitempty"`
	// RewardAmountAdded holds the value of the "reward_amount_added" field.
	RewardAmountAdded typeutil.Uint256 `json:"reward_amount_added,omitempty"`
	// RewardAmountRemoved holds the value of the "reward_amount_removed" field.
	RewardAmountRemoved typeutil.Uint256 `json:"reward_amount_removed,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StakingEventQuery when eager-loading is set.
	Edges        StakingEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StakingEventEdges holds the relations/edges for other nodes in the graph.
type StakingEventEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// NftClass holds the value of the nft_class edge.
	NftClass *NFTClass `json:"nft_class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StakingEventEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// NftClassOrErr returns the NftClass value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StakingEventEdges) NftClassOrErr() (*NFTClass, error) {
	if e.NftClass != nil {
		return e.NftClass, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: nftclass.Label}
	}
	return nil, &NotLoadedError{edge: "nft_class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StakingEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stakingevent.FieldID, stakingevent.FieldNftClassID, stakingevent.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case stakingevent.FieldEventType:
			values[i] = new(sql.NullString)
		case stakingevent.FieldDatetime:
			values[i] = new(sql.NullTime)
		case stakingevent.FieldStakedAmountAdded:
			values[i] = stakingevent.ValueScanner.StakedAmountAdded.ScanValue()
		case stakingevent.FieldStakedAmountRemoved:
			values[i] = stakingevent.ValueScanner.StakedAmountRemoved.ScanValue()
		case stakingevent.FieldRewardAmountAdded:
			values[i] = stakingevent.ValueScanner.RewardAmountAdded.ScanValue()
		case stakingevent.FieldRewardAmountRemoved:
			values[i] = stakingevent.ValueScanner.RewardAmountRemoved.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StakingEvent fields.
func (_m *StakingEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stakingevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case stakingevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = stakingevent.EventType(value.String)
			}
		case stakingevent.FieldNftClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nft_class_id", values[i])
			} else if value.Valid {
				_m.NftClassID = int(value.Int64)
			}
		case stakingevent.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				_m.AccountID = int(value.Int64)
			}
		case stakingevent.FieldStakedAmountAdded:
			if value, err := stakingevent.ValueScanner.StakedAmountAdded.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.StakedAmountAdded = value
			}
		case stakingevent.FieldStakedAmountRemoved:
			if value, err := stakingevent.ValueScanner.StakedAmountRemoved.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.StakedAmountRemoved = value
			}
		case stakingevent.FieldRewardAmountAdded:
			if value, err := stakingevent.ValueScanner.RewardAmountAdded.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.RewardAmountAdded = value
			}
		case stakingevent.FieldRewardAmountRemoved:
			if value, err := stakingevent.ValueScanner.RewardAmountRemoved.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.RewardAmountRemoved = value
			}
		case stakingevent.FieldDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datetime", values[i])
			} else if value.Valid {
				_m.Datetime = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StakingEvent.
// This includes values selected through modifiers, order, etc.
func (_m *StakingEvent) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the StakingEvent entity.
func (_m *StakingEvent) QueryAccount() *AccountQuery {
	return NewStakingEventClient(_m.config).QueryAccount(_m)
}

// QueryNftClass queries the "nft_class" edge of the StakingEvent entity.
func (_m *StakingEvent) QueryNftClass() *NFTClassQuery {
	return NewStakingEventClient(_m.config).QueryNftClass(_m)
}

// Update returns a builder for updating this StakingEvent.
// Note that you need to call StakingEvent.Unwrap() before calling this method if this StakingEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StakingEvent) Update() *StakingEventUpdateOne {
	return NewStakingEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StakingEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StakingEvent) Unwrap() *StakingEvent {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StakingEvent is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StakingEvent) String() string {
	var builder strings.Builder
	builder.WriteString("StakingEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.EventType))
	builder.WriteString(", ")
	builder.WriteString("nft_class_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NftClassID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccountID))
	builder.WriteString(", ")
	builder.WriteString("staked_amount_added=")
	builder.WriteString(fmt.Sprintf("%v", _m.StakedAmountAdded))
	builder.WriteString(", ")
	builder.WriteString("staked_amount_removed=")
	builder.WriteString(fmt.Sprintf("%v", _m.StakedAmountRemoved))
	builder.WriteString(", ")
	builder.WriteString("reward_amount_added=")
	builder.WriteString(fmt.Sprintf("%v", _m.RewardAmountAdded))
	builder.WriteString(", ")
	builder.WriteString("reward_amount_removed=")
	builder.WriteString(fmt.Sprintf("%v", _m.RewardAmountRemoved))
	builder.WriteString(", ")
	builder.WriteString("datetime=")
	builder.WriteString(_m.Datetime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StakingEvents is a parsable slice of StakingEvent.
type StakingEvents []*StakingEvent
