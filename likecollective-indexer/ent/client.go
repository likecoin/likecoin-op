// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"likecollective-indexer/ent/migrate"

	"likecollective-indexer/ent/account"
	"likecollective-indexer/ent/evmevent"
	"likecollective-indexer/ent/nftclass"
	"likecollective-indexer/ent/staking"
	"likecollective-indexer/ent/stakingevent"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// EVMEvent is the client for interacting with the EVMEvent builders.
	EVMEvent *EVMEventClient
	// NFTClass is the client for interacting with the NFTClass builders.
	NFTClass *NFTClassClient
	// Staking is the client for interacting with the Staking builders.
	Staking *StakingClient
	// StakingEvent is the client for interacting with the StakingEvent builders.
	StakingEvent *StakingEventClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.EVMEvent = NewEVMEventClient(c.config)
	c.NFTClass = NewNFTClassClient(c.config)
	c.Staking = NewStakingClient(c.config)
	c.StakingEvent = NewStakingEventClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Account:      NewAccountClient(cfg),
		EVMEvent:     NewEVMEventClient(cfg),
		NFTClass:     NewNFTClassClient(cfg),
		Staking:      NewStakingClient(cfg),
		StakingEvent: NewStakingEventClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Account:      NewAccountClient(cfg),
		EVMEvent:     NewEVMEventClient(cfg),
		NFTClass:     NewNFTClassClient(cfg),
		Staking:      NewStakingClient(cfg),
		StakingEvent: NewStakingEventClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Account.Use(hooks...)
	c.EVMEvent.Use(hooks...)
	c.NFTClass.Use(hooks...)
	c.Staking.Use(hooks...)
	c.StakingEvent.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Account.Intercept(interceptors...)
	c.EVMEvent.Intercept(interceptors...)
	c.NFTClass.Intercept(interceptors...)
	c.Staking.Intercept(interceptors...)
	c.StakingEvent.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *EVMEventMutation:
		return c.EVMEvent.mutate(ctx, m)
	case *NFTClassMutation:
		return c.NFTClass.mutate(ctx, m)
	case *StakingMutation:
		return c.Staking.mutate(ctx, m)
	case *StakingEventMutation:
		return c.StakingEvent.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountClient) MapCreateBulk(slice any, setFunc func(*AccountCreate, int)) *AccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountCreateBulk{err: fmt.Errorf("calling to AccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(_m *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(_m))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id int) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(_m *Account) *AccountDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id int) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id int) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id int) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNftClasses queries the nft_classes edge of a Account.
func (c *AccountClient) QueryNftClasses(_m *Account) *NFTClassQuery {
	query := (&NFTClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(nftclass.Table, nftclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, account.NftClassesTable, account.NftClassesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStakings queries the stakings edge of a Account.
func (c *AccountClient) QueryStakings(_m *Account) *StakingQuery {
	query := (&StakingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(staking.Table, staking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, account.StakingsTable, account.StakingsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// EVMEventClient is a client for the EVMEvent schema.
type EVMEventClient struct {
	config
}

// NewEVMEventClient returns a client for the EVMEvent from the given config.
func NewEVMEventClient(c config) *EVMEventClient {
	return &EVMEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `evmevent.Hooks(f(g(h())))`.
func (c *EVMEventClient) Use(hooks ...Hook) {
	c.hooks.EVMEvent = append(c.hooks.EVMEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `evmevent.Intercept(f(g(h())))`.
func (c *EVMEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.EVMEvent = append(c.inters.EVMEvent, interceptors...)
}

// Create returns a builder for creating a EVMEvent entity.
func (c *EVMEventClient) Create() *EVMEventCreate {
	mutation := newEVMEventMutation(c.config, OpCreate)
	return &EVMEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EVMEvent entities.
func (c *EVMEventClient) CreateBulk(builders ...*EVMEventCreate) *EVMEventCreateBulk {
	return &EVMEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EVMEventClient) MapCreateBulk(slice any, setFunc func(*EVMEventCreate, int)) *EVMEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EVMEventCreateBulk{err: fmt.Errorf("calling to EVMEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EVMEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EVMEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EVMEvent.
func (c *EVMEventClient) Update() *EVMEventUpdate {
	mutation := newEVMEventMutation(c.config, OpUpdate)
	return &EVMEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EVMEventClient) UpdateOne(_m *EVMEvent) *EVMEventUpdateOne {
	mutation := newEVMEventMutation(c.config, OpUpdateOne, withEVMEvent(_m))
	return &EVMEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EVMEventClient) UpdateOneID(id int) *EVMEventUpdateOne {
	mutation := newEVMEventMutation(c.config, OpUpdateOne, withEVMEventID(id))
	return &EVMEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EVMEvent.
func (c *EVMEventClient) Delete() *EVMEventDelete {
	mutation := newEVMEventMutation(c.config, OpDelete)
	return &EVMEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EVMEventClient) DeleteOne(_m *EVMEvent) *EVMEventDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EVMEventClient) DeleteOneID(id int) *EVMEventDeleteOne {
	builder := c.Delete().Where(evmevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EVMEventDeleteOne{builder}
}

// Query returns a query builder for EVMEvent.
func (c *EVMEventClient) Query() *EVMEventQuery {
	return &EVMEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEVMEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a EVMEvent entity by its id.
func (c *EVMEventClient) Get(ctx context.Context, id int) (*EVMEvent, error) {
	return c.Query().Where(evmevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EVMEventClient) GetX(ctx context.Context, id int) *EVMEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EVMEventClient) Hooks() []Hook {
	return c.hooks.EVMEvent
}

// Interceptors returns the client interceptors.
func (c *EVMEventClient) Interceptors() []Interceptor {
	return c.inters.EVMEvent
}

func (c *EVMEventClient) mutate(ctx context.Context, m *EVMEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EVMEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EVMEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EVMEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EVMEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EVMEvent mutation op: %q", m.Op())
	}
}

// NFTClassClient is a client for the NFTClass schema.
type NFTClassClient struct {
	config
}

// NewNFTClassClient returns a client for the NFTClass from the given config.
func NewNFTClassClient(c config) *NFTClassClient {
	return &NFTClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nftclass.Hooks(f(g(h())))`.
func (c *NFTClassClient) Use(hooks ...Hook) {
	c.hooks.NFTClass = append(c.hooks.NFTClass, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `nftclass.Intercept(f(g(h())))`.
func (c *NFTClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.NFTClass = append(c.inters.NFTClass, interceptors...)
}

// Create returns a builder for creating a NFTClass entity.
func (c *NFTClassClient) Create() *NFTClassCreate {
	mutation := newNFTClassMutation(c.config, OpCreate)
	return &NFTClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NFTClass entities.
func (c *NFTClassClient) CreateBulk(builders ...*NFTClassCreate) *NFTClassCreateBulk {
	return &NFTClassCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NFTClassClient) MapCreateBulk(slice any, setFunc func(*NFTClassCreate, int)) *NFTClassCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NFTClassCreateBulk{err: fmt.Errorf("calling to NFTClassClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NFTClassCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NFTClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NFTClass.
func (c *NFTClassClient) Update() *NFTClassUpdate {
	mutation := newNFTClassMutation(c.config, OpUpdate)
	return &NFTClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NFTClassClient) UpdateOne(_m *NFTClass) *NFTClassUpdateOne {
	mutation := newNFTClassMutation(c.config, OpUpdateOne, withNFTClass(_m))
	return &NFTClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NFTClassClient) UpdateOneID(id int) *NFTClassUpdateOne {
	mutation := newNFTClassMutation(c.config, OpUpdateOne, withNFTClassID(id))
	return &NFTClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NFTClass.
func (c *NFTClassClient) Delete() *NFTClassDelete {
	mutation := newNFTClassMutation(c.config, OpDelete)
	return &NFTClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NFTClassClient) DeleteOne(_m *NFTClass) *NFTClassDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NFTClassClient) DeleteOneID(id int) *NFTClassDeleteOne {
	builder := c.Delete().Where(nftclass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NFTClassDeleteOne{builder}
}

// Query returns a query builder for NFTClass.
func (c *NFTClassClient) Query() *NFTClassQuery {
	return &NFTClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNFTClass},
		inters: c.Interceptors(),
	}
}

// Get returns a NFTClass entity by its id.
func (c *NFTClassClient) Get(ctx context.Context, id int) (*NFTClass, error) {
	return c.Query().Where(nftclass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NFTClassClient) GetX(ctx context.Context, id int) *NFTClass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a NFTClass.
func (c *NFTClassClient) QueryAccounts(_m *NFTClass) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nftclass.Table, nftclass.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, nftclass.AccountsTable, nftclass.AccountsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStakings queries the stakings edge of a NFTClass.
func (c *NFTClassClient) QueryStakings(_m *NFTClass) *StakingQuery {
	query := (&StakingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nftclass.Table, nftclass.FieldID, id),
			sqlgraph.To(staking.Table, staking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, nftclass.StakingsTable, nftclass.StakingsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NFTClassClient) Hooks() []Hook {
	return c.hooks.NFTClass
}

// Interceptors returns the client interceptors.
func (c *NFTClassClient) Interceptors() []Interceptor {
	return c.inters.NFTClass
}

func (c *NFTClassClient) mutate(ctx context.Context, m *NFTClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NFTClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NFTClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NFTClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NFTClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NFTClass mutation op: %q", m.Op())
	}
}

// StakingClient is a client for the Staking schema.
type StakingClient struct {
	config
}

// NewStakingClient returns a client for the Staking from the given config.
func NewStakingClient(c config) *StakingClient {
	return &StakingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `staking.Hooks(f(g(h())))`.
func (c *StakingClient) Use(hooks ...Hook) {
	c.hooks.Staking = append(c.hooks.Staking, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `staking.Intercept(f(g(h())))`.
func (c *StakingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Staking = append(c.inters.Staking, interceptors...)
}

// Create returns a builder for creating a Staking entity.
func (c *StakingClient) Create() *StakingCreate {
	mutation := newStakingMutation(c.config, OpCreate)
	return &StakingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Staking entities.
func (c *StakingClient) CreateBulk(builders ...*StakingCreate) *StakingCreateBulk {
	return &StakingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StakingClient) MapCreateBulk(slice any, setFunc func(*StakingCreate, int)) *StakingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StakingCreateBulk{err: fmt.Errorf("calling to StakingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StakingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StakingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Staking.
func (c *StakingClient) Update() *StakingUpdate {
	mutation := newStakingMutation(c.config, OpUpdate)
	return &StakingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StakingClient) UpdateOne(_m *Staking) *StakingUpdateOne {
	mutation := newStakingMutation(c.config, OpUpdateOne, withStaking(_m))
	return &StakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StakingClient) UpdateOneID(id int) *StakingUpdateOne {
	mutation := newStakingMutation(c.config, OpUpdateOne, withStakingID(id))
	return &StakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Staking.
func (c *StakingClient) Delete() *StakingDelete {
	mutation := newStakingMutation(c.config, OpDelete)
	return &StakingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StakingClient) DeleteOne(_m *Staking) *StakingDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StakingClient) DeleteOneID(id int) *StakingDeleteOne {
	builder := c.Delete().Where(staking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StakingDeleteOne{builder}
}

// Query returns a query builder for Staking.
func (c *StakingClient) Query() *StakingQuery {
	return &StakingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStaking},
		inters: c.Interceptors(),
	}
}

// Get returns a Staking entity by its id.
func (c *StakingClient) Get(ctx context.Context, id int) (*Staking, error) {
	return c.Query().Where(staking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StakingClient) GetX(ctx context.Context, id int) *Staking {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccount queries the account edge of a Staking.
func (c *StakingClient) QueryAccount(_m *Staking) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(staking.Table, staking.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, staking.AccountTable, staking.AccountColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNftClass queries the nft_class edge of a Staking.
func (c *StakingClient) QueryNftClass(_m *Staking) *NFTClassQuery {
	query := (&NFTClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(staking.Table, staking.FieldID, id),
			sqlgraph.To(nftclass.Table, nftclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, staking.NftClassTable, staking.NftClassColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StakingClient) Hooks() []Hook {
	return c.hooks.Staking
}

// Interceptors returns the client interceptors.
func (c *StakingClient) Interceptors() []Interceptor {
	return c.inters.Staking
}

func (c *StakingClient) mutate(ctx context.Context, m *StakingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StakingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StakingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StakingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Staking mutation op: %q", m.Op())
	}
}

// StakingEventClient is a client for the StakingEvent schema.
type StakingEventClient struct {
	config
}

// NewStakingEventClient returns a client for the StakingEvent from the given config.
func NewStakingEventClient(c config) *StakingEventClient {
	return &StakingEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stakingevent.Hooks(f(g(h())))`.
func (c *StakingEventClient) Use(hooks ...Hook) {
	c.hooks.StakingEvent = append(c.hooks.StakingEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stakingevent.Intercept(f(g(h())))`.
func (c *StakingEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.StakingEvent = append(c.inters.StakingEvent, interceptors...)
}

// Create returns a builder for creating a StakingEvent entity.
func (c *StakingEventClient) Create() *StakingEventCreate {
	mutation := newStakingEventMutation(c.config, OpCreate)
	return &StakingEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StakingEvent entities.
func (c *StakingEventClient) CreateBulk(builders ...*StakingEventCreate) *StakingEventCreateBulk {
	return &StakingEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StakingEventClient) MapCreateBulk(slice any, setFunc func(*StakingEventCreate, int)) *StakingEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StakingEventCreateBulk{err: fmt.Errorf("calling to StakingEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StakingEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StakingEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StakingEvent.
func (c *StakingEventClient) Update() *StakingEventUpdate {
	mutation := newStakingEventMutation(c.config, OpUpdate)
	return &StakingEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StakingEventClient) UpdateOne(_m *StakingEvent) *StakingEventUpdateOne {
	mutation := newStakingEventMutation(c.config, OpUpdateOne, withStakingEvent(_m))
	return &StakingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StakingEventClient) UpdateOneID(id int) *StakingEventUpdateOne {
	mutation := newStakingEventMutation(c.config, OpUpdateOne, withStakingEventID(id))
	return &StakingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StakingEvent.
func (c *StakingEventClient) Delete() *StakingEventDelete {
	mutation := newStakingEventMutation(c.config, OpDelete)
	return &StakingEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StakingEventClient) DeleteOne(_m *StakingEvent) *StakingEventDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StakingEventClient) DeleteOneID(id int) *StakingEventDeleteOne {
	builder := c.Delete().Where(stakingevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StakingEventDeleteOne{builder}
}

// Query returns a query builder for StakingEvent.
func (c *StakingEventClient) Query() *StakingEventQuery {
	return &StakingEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStakingEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a StakingEvent entity by its id.
func (c *StakingEventClient) Get(ctx context.Context, id int) (*StakingEvent, error) {
	return c.Query().Where(stakingevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StakingEventClient) GetX(ctx context.Context, id int) *StakingEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StakingEventClient) Hooks() []Hook {
	return c.hooks.StakingEvent
}

// Interceptors returns the client interceptors.
func (c *StakingEventClient) Interceptors() []Interceptor {
	return c.inters.StakingEvent
}

func (c *StakingEventClient) mutate(ctx context.Context, m *StakingEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StakingEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StakingEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StakingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StakingEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StakingEvent mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, EVMEvent, NFTClass, Staking, StakingEvent []ent.Hook
	}
	inters struct {
		Account, EVMEvent, NFTClass, Staking, StakingEvent []ent.Interceptor
	}
)
