// Code generated by ent, DO NOT EDIT.

package evmevent

import (
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the evmevent type in the database.
	Label = "evm_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionHash holds the string denoting the transaction_hash field in the database.
	FieldTransactionHash = "transaction_hash"
	// FieldTransactionIndex holds the string denoting the transaction_index field in the database.
	FieldTransactionIndex = "transaction_index"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldBlockHash holds the string denoting the block_hash field in the database.
	FieldBlockHash = "block_hash"
	// FieldBlockNumber holds the string denoting the block_number field in the database.
	FieldBlockNumber = "block_number"
	// FieldLogIndex holds the string denoting the log_index field in the database.
	FieldLogIndex = "log_index"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldTopic0 holds the string denoting the topic0 field in the database.
	FieldTopic0 = "topic0"
	// FieldTopic0Hex holds the string denoting the topic0_hex field in the database.
	FieldTopic0Hex = "topic0_hex"
	// FieldTopic1 holds the string denoting the topic1 field in the database.
	FieldTopic1 = "topic1"
	// FieldTopic1Hex holds the string denoting the topic1_hex field in the database.
	FieldTopic1Hex = "topic1_hex"
	// FieldTopic2 holds the string denoting the topic2 field in the database.
	FieldTopic2 = "topic2"
	// FieldTopic2Hex holds the string denoting the topic2_hex field in the database.
	FieldTopic2Hex = "topic2_hex"
	// FieldTopic3 holds the string denoting the topic3 field in the database.
	FieldTopic3 = "topic3"
	// FieldTopic3Hex holds the string denoting the topic3_hex field in the database.
	FieldTopic3Hex = "topic3_hex"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldDataHex holds the string denoting the data_hex field in the database.
	FieldDataHex = "data_hex"
	// FieldRemoved holds the string denoting the removed field in the database.
	FieldRemoved = "removed"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldIndexedParams holds the string denoting the indexed_params field in the database.
	FieldIndexedParams = "indexed_params"
	// FieldNonIndexedParams holds the string denoting the non_indexed_params field in the database.
	FieldNonIndexedParams = "non_indexed_params"
	// FieldFailedReason holds the string denoting the failed_reason field in the database.
	FieldFailedReason = "failed_reason"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the evmevent in the database.
	Table = "evm_events"
)

// Columns holds all SQL columns for evmevent fields.
var Columns = []string{
	FieldID,
	FieldTransactionHash,
	FieldTransactionIndex,
	FieldChainID,
	FieldBlockHash,
	FieldBlockNumber,
	FieldLogIndex,
	FieldAddress,
	FieldTopic0,
	FieldTopic0Hex,
	FieldTopic1,
	FieldTopic1Hex,
	FieldTopic2,
	FieldTopic2Hex,
	FieldTopic3,
	FieldTopic3Hex,
	FieldData,
	FieldDataHex,
	FieldRemoved,
	FieldStatus,
	FieldName,
	FieldSignature,
	FieldIndexedParams,
	FieldNonIndexedParams,
	FieldFailedReason,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	TransactionHashValidator func(string) error
	// BlockHashValidator is a validator for the "block_hash" field. It is called by the builders before save.
	BlockHashValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// Topic0Validator is a validator for the "topic0" field. It is called by the builders before save.
	Topic0Validator func(string) error
	// Topic0HexValidator is a validator for the "topic0_hex" field. It is called by the builders before save.
	Topic0HexValidator func(string) error
	// ValueScanner of all EVMEvent fields.
	ValueScanner struct {
		ChainID     field.TypeValueScanner[typeutil.Uint64]
		BlockNumber field.TypeValueScanner[typeutil.Uint64]
	}
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusReceived   Status = "received"
	StatusSkipped    Status = "skipped"
	StatusEnqueued   Status = "enqueued"
	StatusProcessing Status = "processing"
	StatusProcessed  Status = "processed"
	StatusFailed     Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusReceived, StatusSkipped, StatusEnqueued, StatusProcessing, StatusProcessed, StatusFailed:
		return nil
	default:
		return fmt.Errorf("evmevent: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the EVMEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTransactionHash orders the results by the transaction_hash field.
func ByTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionHash, opts...).ToFunc()
}

// ByTransactionIndex orders the results by the transaction_index field.
func ByTransactionIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionIndex, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByBlockHash orders the results by the block_hash field.
func ByBlockHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHash, opts...).ToFunc()
}

// ByBlockNumber orders the results by the block_number field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByLogIndex orders the results by the log_index field.
func ByLogIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogIndex, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByTopic0 orders the results by the topic0 field.
func ByTopic0(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic0, opts...).ToFunc()
}

// ByTopic0Hex orders the results by the topic0_hex field.
func ByTopic0Hex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic0Hex, opts...).ToFunc()
}

// ByTopic1 orders the results by the topic1 field.
func ByTopic1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic1, opts...).ToFunc()
}

// ByTopic1Hex orders the results by the topic1_hex field.
func ByTopic1Hex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic1Hex, opts...).ToFunc()
}

// ByTopic2 orders the results by the topic2 field.
func ByTopic2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic2, opts...).ToFunc()
}

// ByTopic2Hex orders the results by the topic2_hex field.
func ByTopic2Hex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic2Hex, opts...).ToFunc()
}

// ByTopic3 orders the results by the topic3 field.
func ByTopic3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic3, opts...).ToFunc()
}

// ByTopic3Hex orders the results by the topic3_hex field.
func ByTopic3Hex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic3Hex, opts...).ToFunc()
}

// ByData orders the results by the data field.
func ByData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldData, opts...).ToFunc()
}

// ByDataHex orders the results by the data_hex field.
func ByDataHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataHex, opts...).ToFunc()
}

// ByRemoved orders the results by the removed field.
func ByRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemoved, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySignature orders the results by the signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByFailedReason orders the results by the failed_reason field.
func ByFailedReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedReason, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
