// Code generated by ent, DO NOT EDIT.

package account

import (
	"likecollective-indexer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// EvmAddress applies equality check predicate on the "evm_address" field. It's identical to EvmAddressEQ.
func EvmAddress(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEvmAddress, v))
}

// EvmAddressEQ applies the EQ predicate on the "evm_address" field.
func EvmAddressEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEvmAddress, v))
}

// EvmAddressNEQ applies the NEQ predicate on the "evm_address" field.
func EvmAddressNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldEvmAddress, v))
}

// EvmAddressIn applies the In predicate on the "evm_address" field.
func EvmAddressIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldEvmAddress, vs...))
}

// EvmAddressNotIn applies the NotIn predicate on the "evm_address" field.
func EvmAddressNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldEvmAddress, vs...))
}

// EvmAddressGT applies the GT predicate on the "evm_address" field.
func EvmAddressGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldEvmAddress, v))
}

// EvmAddressGTE applies the GTE predicate on the "evm_address" field.
func EvmAddressGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldEvmAddress, v))
}

// EvmAddressLT applies the LT predicate on the "evm_address" field.
func EvmAddressLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldEvmAddress, v))
}

// EvmAddressLTE applies the LTE predicate on the "evm_address" field.
func EvmAddressLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldEvmAddress, v))
}

// EvmAddressContains applies the Contains predicate on the "evm_address" field.
func EvmAddressContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldEvmAddress, v))
}

// EvmAddressHasPrefix applies the HasPrefix predicate on the "evm_address" field.
func EvmAddressHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldEvmAddress, v))
}

// EvmAddressHasSuffix applies the HasSuffix predicate on the "evm_address" field.
func EvmAddressHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldEvmAddress, v))
}

// EvmAddressEqualFold applies the EqualFold predicate on the "evm_address" field.
func EvmAddressEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldEvmAddress, v))
}

// EvmAddressContainsFold applies the ContainsFold predicate on the "evm_address" field.
func EvmAddressContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldEvmAddress, v))
}

// HasNftClasses applies the HasEdge predicate on the "nft_classes" edge.
func HasNftClasses() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NftClassesTable, NftClassesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNftClassesWith applies the HasEdge predicate on the "nft_classes" edge with a given conditions (other predicates).
func HasNftClassesWith(preds ...predicate.NFTClass) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newNftClassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStakingEvents applies the HasEdge predicate on the "staking_events" edge.
func HasStakingEvents() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StakingEventsTable, StakingEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStakingEventsWith applies the HasEdge predicate on the "staking_events" edge with a given conditions (other predicates).
func HasStakingEventsWith(preds ...predicate.StakingEvent) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newStakingEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStakings applies the HasEdge predicate on the "stakings" edge.
func HasStakings() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StakingsTable, StakingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStakingsWith applies the HasEdge predicate on the "stakings" edge with a given conditions (other predicates).
func HasStakingsWith(preds ...predicate.Staking) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newStakingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
