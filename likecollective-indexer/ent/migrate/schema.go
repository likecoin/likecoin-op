// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "evm_address", Type: field.TypeString},
		{Name: "staked_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "pending_reward_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "claimed_reward_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "account_evm_address",
				Unique:  true,
				Columns: []*schema.Column{AccountsColumns[1]},
			},
		},
	}
	// EvmEventsColumns holds the columns for the "evm_events" table.
	EvmEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "transaction_index", Type: field.TypeUint},
		{Name: "chain_id", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "block_hash", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "log_index", Type: field.TypeUint},
		{Name: "address", Type: field.TypeString},
		{Name: "topic0", Type: field.TypeString},
		{Name: "topic0_hex", Type: field.TypeString},
		{Name: "topic1", Type: field.TypeString, Nullable: true},
		{Name: "topic1_hex", Type: field.TypeString, Nullable: true},
		{Name: "topic2", Type: field.TypeString, Nullable: true},
		{Name: "topic2_hex", Type: field.TypeString, Nullable: true},
		{Name: "topic3", Type: field.TypeString, Nullable: true},
		{Name: "topic3_hex", Type: field.TypeString, Nullable: true},
		{Name: "data", Type: field.TypeString, Nullable: true},
		{Name: "data_hex", Type: field.TypeString, Nullable: true},
		{Name: "removed", Type: field.TypeBool},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"received", "skipped", "enqueued", "processing", "processed", "failed"}},
		{Name: "name", Type: field.TypeString},
		{Name: "signature", Type: field.TypeString},
		{Name: "indexed_params", Type: field.TypeJSON},
		{Name: "non_indexed_params", Type: field.TypeJSON},
		{Name: "failed_reason", Type: field.TypeString, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// EvmEventsTable holds the schema information for the "evm_events" table.
	EvmEventsTable = &schema.Table{
		Name:       "evm_events",
		Columns:    EvmEventsColumns,
		PrimaryKey: []*schema.Column{EvmEventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "evmevent_transaction_hash_transaction_index_block_number_log_index",
				Unique:  true,
				Columns: []*schema.Column{EvmEventsColumns[1], EvmEventsColumns[2], EvmEventsColumns[5], EvmEventsColumns[6]},
			},
			{
				Name:    "evmevent_block_number",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[5]},
			},
			{
				Name:    "evmevent_log_index",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[6]},
			},
			{
				Name:    "evmevent_address",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[7]},
			},
			{
				Name:    "evmevent_signature",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[21]},
			},
		},
	}
	// NftClassesColumns holds the columns for the "nft_classes" table.
	NftClassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString},
		{Name: "staked_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "last_staked_at", Type: field.TypeTime},
		{Name: "number_of_stakers", Type: field.TypeUint64, Default: 0},
	}
	// NftClassesTable holds the schema information for the "nft_classes" table.
	NftClassesTable = &schema.Table{
		Name:       "nft_classes",
		Columns:    NftClassesColumns,
		PrimaryKey: []*schema.Column{NftClassesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "nftclass_address",
				Unique:  true,
				Columns: []*schema.Column{NftClassesColumns[1]},
			},
		},
	}
	// StakingsColumns holds the columns for the "stakings" table.
	StakingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "pool_share", Type: field.TypeString, Nullable: true, Default: "0"},
		{Name: "staked_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "pending_reward_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "claimed_reward_amount", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "account_id", Type: field.TypeInt},
		{Name: "nft_class_id", Type: field.TypeInt},
	}
	// StakingsTable holds the schema information for the "stakings" table.
	StakingsTable = &schema.Table{
		Name:       "stakings",
		Columns:    StakingsColumns,
		PrimaryKey: []*schema.Column{StakingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "stakings_accounts_account",
				Columns:    []*schema.Column{StakingsColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "stakings_nft_classes_nft_class",
				Columns:    []*schema.Column{StakingsColumns[6]},
				RefColumns: []*schema.Column{NftClassesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "staking_nft_class_id_account_id",
				Unique:  true,
				Columns: []*schema.Column{StakingsColumns[6], StakingsColumns[5]},
			},
		},
	}
	// StakingEventsColumns holds the columns for the "staking_events" table.
	StakingEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "transaction_index", Type: field.TypeUint},
		{Name: "block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "log_index", Type: field.TypeUint},
		{Name: "event_type", Type: field.TypeEnum, Enums: []string{"staked", "unstaked", "reward_claimed", "reward_deposited", "reward_deposit_distributed", "all_rewards_claimed"}, Default: "staked"},
		{Name: "nft_class_address", Type: field.TypeString},
		{Name: "account_evm_address", Type: field.TypeString},
		{Name: "staked_amount_added", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "staked_amount_removed", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "pending_reward_amount_added", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "pending_reward_amount_removed", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "claimed_reward_amount_added", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "claimed_reward_amount_removed", Type: field.TypeUint64, Default: "0", SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "datetime", Type: field.TypeTime},
	}
	// StakingEventsTable holds the schema information for the "staking_events" table.
	StakingEventsTable = &schema.Table{
		Name:       "staking_events",
		Columns:    StakingEventsColumns,
		PrimaryKey: []*schema.Column{StakingEventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "stakingevent_event_type",
				Unique:  false,
				Columns: []*schema.Column{StakingEventsColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		EvmEventsTable,
		NftClassesTable,
		StakingsTable,
		StakingEventsTable,
	}
)

func init() {
	StakingsTable.ForeignKeys[0].RefTable = AccountsTable
	StakingsTable.ForeignKeys[1].RefTable = NftClassesTable
}
