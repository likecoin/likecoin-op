// Code generated by ent, DO NOT EDIT.

package staking

import (
	"likecollective-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the staking type in the database.
	Label = "staking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNftClassID holds the string denoting the nft_class_id field in the database.
	FieldNftClassID = "nft_class_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldPoolShare holds the string denoting the pool_share field in the database.
	FieldPoolShare = "pool_share"
	// FieldStakedAmount holds the string denoting the staked_amount field in the database.
	FieldStakedAmount = "staked_amount"
	// FieldPendingRewardAmount holds the string denoting the pending_reward_amount field in the database.
	FieldPendingRewardAmount = "pending_reward_amount"
	// FieldClaimedRewardAmount holds the string denoting the claimed_reward_amount field in the database.
	FieldClaimedRewardAmount = "claimed_reward_amount"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeNftClass holds the string denoting the nft_class edge name in mutations.
	EdgeNftClass = "nft_class"
	// Table holds the table name of the staking in the database.
	Table = "stakings"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "stakings"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_id"
	// NftClassTable is the table that holds the nft_class relation/edge.
	NftClassTable = "stakings"
	// NftClassInverseTable is the table name for the NFTClass entity.
	// It exists in this package in order to avoid circular dependency with the "nftclass" package.
	NftClassInverseTable = "nft_classes"
	// NftClassColumn is the table column denoting the nft_class relation/edge.
	NftClassColumn = "nft_class_id"
)

// Columns holds all SQL columns for staking fields.
var Columns = []string{
	FieldID,
	FieldNftClassID,
	FieldAccountID,
	FieldPoolShare,
	FieldStakedAmount,
	FieldPendingRewardAmount,
	FieldClaimedRewardAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PoolShareValidator is a validator for the "pool_share" field. It is called by the builders before save.
	PoolShareValidator func(string) error
	// ValueScanner of all Staking fields.
	ValueScanner struct {
		StakedAmount        field.TypeValueScanner[typeutil.Uint256]
		PendingRewardAmount field.TypeValueScanner[typeutil.Uint256]
		ClaimedRewardAmount field.TypeValueScanner[typeutil.Uint256]
	}
)

// OrderOption defines the ordering options for the Staking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNftClassID orders the results by the nft_class_id field.
func ByNftClassID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNftClassID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByPoolShare orders the results by the pool_share field.
func ByPoolShare(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolShare, opts...).ToFunc()
}

// ByStakedAmount orders the results by the staked_amount field.
func ByStakedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmount, opts...).ToFunc()
}

// ByPendingRewardAmount orders the results by the pending_reward_amount field.
func ByPendingRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPendingRewardAmount, opts...).ToFunc()
}

// ByClaimedRewardAmount orders the results by the claimed_reward_amount field.
func ByClaimedRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimedRewardAmount, opts...).ToFunc()
}

// ByAccountField orders the results by account field.
func ByAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByNftClassField orders the results by nft_class field.
func ByNftClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNftClassStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AccountTable, AccountColumn),
	)
}
func newNftClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NftClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NftClassTable, NftClassColumn),
	)
}
