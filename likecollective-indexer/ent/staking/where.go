// Code generated by ent, DO NOT EDIT.

package staking

import (
	"likecollective-indexer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Staking {
	return predicate.Staking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Staking {
	return predicate.Staking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Staking {
	return predicate.Staking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Staking {
	return predicate.Staking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Staking {
	return predicate.Staking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Staking {
	return predicate.Staking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Staking {
	return predicate.Staking(sql.FieldLTE(FieldID, id))
}

// NftClassID applies equality check predicate on the "nft_class_id" field. It's identical to NftClassIDEQ.
func NftClassID(v int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldNftClassID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldAccountID, v))
}

// PoolShare applies equality check predicate on the "pool_share" field. It's identical to PoolShareEQ.
func PoolShare(v string) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldPoolShare, v))
}

// NftClassIDEQ applies the EQ predicate on the "nft_class_id" field.
func NftClassIDEQ(v int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldNftClassID, v))
}

// NftClassIDNEQ applies the NEQ predicate on the "nft_class_id" field.
func NftClassIDNEQ(v int) predicate.Staking {
	return predicate.Staking(sql.FieldNEQ(FieldNftClassID, v))
}

// NftClassIDIn applies the In predicate on the "nft_class_id" field.
func NftClassIDIn(vs ...int) predicate.Staking {
	return predicate.Staking(sql.FieldIn(FieldNftClassID, vs...))
}

// NftClassIDNotIn applies the NotIn predicate on the "nft_class_id" field.
func NftClassIDNotIn(vs ...int) predicate.Staking {
	return predicate.Staking(sql.FieldNotIn(FieldNftClassID, vs...))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.Staking {
	return predicate.Staking(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.Staking {
	return predicate.Staking(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.Staking {
	return predicate.Staking(sql.FieldNotIn(FieldAccountID, vs...))
}

// PoolShareEQ applies the EQ predicate on the "pool_share" field.
func PoolShareEQ(v string) predicate.Staking {
	return predicate.Staking(sql.FieldEQ(FieldPoolShare, v))
}

// PoolShareNEQ applies the NEQ predicate on the "pool_share" field.
func PoolShareNEQ(v string) predicate.Staking {
	return predicate.Staking(sql.FieldNEQ(FieldPoolShare, v))
}

// PoolShareIn applies the In predicate on the "pool_share" field.
func PoolShareIn(vs ...string) predicate.Staking {
	return predicate.Staking(sql.FieldIn(FieldPoolShare, vs...))
}

// PoolShareNotIn applies the NotIn predicate on the "pool_share" field.
func PoolShareNotIn(vs ...string) predicate.Staking {
	return predicate.Staking(sql.FieldNotIn(FieldPoolShare, vs...))
}

// PoolShareGT applies the GT predicate on the "pool_share" field.
func PoolShareGT(v string) predicate.Staking {
	return predicate.Staking(sql.FieldGT(FieldPoolShare, v))
}

// PoolShareGTE applies the GTE predicate on the "pool_share" field.
func PoolShareGTE(v string) predicate.Staking {
	return predicate.Staking(sql.FieldGTE(FieldPoolShare, v))
}

// PoolShareLT applies the LT predicate on the "pool_share" field.
func PoolShareLT(v string) predicate.Staking {
	return predicate.Staking(sql.FieldLT(FieldPoolShare, v))
}

// PoolShareLTE applies the LTE predicate on the "pool_share" field.
func PoolShareLTE(v string) predicate.Staking {
	return predicate.Staking(sql.FieldLTE(FieldPoolShare, v))
}

// PoolShareContains applies the Contains predicate on the "pool_share" field.
func PoolShareContains(v string) predicate.Staking {
	return predicate.Staking(sql.FieldContains(FieldPoolShare, v))
}

// PoolShareHasPrefix applies the HasPrefix predicate on the "pool_share" field.
func PoolShareHasPrefix(v string) predicate.Staking {
	return predicate.Staking(sql.FieldHasPrefix(FieldPoolShare, v))
}

// PoolShareHasSuffix applies the HasSuffix predicate on the "pool_share" field.
func PoolShareHasSuffix(v string) predicate.Staking {
	return predicate.Staking(sql.FieldHasSuffix(FieldPoolShare, v))
}

// PoolShareEqualFold applies the EqualFold predicate on the "pool_share" field.
func PoolShareEqualFold(v string) predicate.Staking {
	return predicate.Staking(sql.FieldEqualFold(FieldPoolShare, v))
}

// PoolShareContainsFold applies the ContainsFold predicate on the "pool_share" field.
func PoolShareContainsFold(v string) predicate.Staking {
	return predicate.Staking(sql.FieldContainsFold(FieldPoolShare, v))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.Staking {
	return predicate.Staking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.Staking {
	return predicate.Staking(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNftClass applies the HasEdge predicate on the "nft_class" edge.
func HasNftClass() predicate.Staking {
	return predicate.Staking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NftClassTable, NftClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNftClassWith applies the HasEdge predicate on the "nft_class" edge with a given conditions (other predicates).
func HasNftClassWith(preds ...predicate.NFTClass) predicate.Staking {
	return predicate.Staking(func(s *sql.Selector) {
		step := newNftClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Staking) predicate.Staking {
	return predicate.Staking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Staking) predicate.Staking {
	return predicate.Staking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Staking) predicate.Staking {
	return predicate.Staking(sql.NotPredicates(p))
}
