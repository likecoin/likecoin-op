// Code generated by ent, DO NOT EDIT.

package predicate

import (
	"entgo.io/ent/dialect/sql"
)

// Account is the predicate function for account builders.
type Account func(*sql.Selector)

// AccountOrErr calls the predicate only if the error is not nit.
func AccountOrErr(p Account, err error) Account {
	return func(s *sql.Selector) {
		if err != nil {
			s.AddError(err)
			return
		}
		p(s)
	}
}

// EVMEvent is the predicate function for evmevent builders.
type EVMEvent func(*sql.Selector)

// EVMEventOrErr calls the predicate only if the error is not nit.
func EVMEventOrErr(p EVMEvent, err error) EVMEvent {
	return func(s *sql.Selector) {
		if err != nil {
			s.AddError(err)
			return
		}
		p(s)
	}
}

// NFTClass is the predicate function for nftclass builders.
type NFTClass func(*sql.Selector)

// NFTClassOrErr calls the predicate only if the error is not nit.
func NFTClassOrErr(p NFTClass, err error) NFTClass {
	return func(s *sql.Selector) {
		if err != nil {
			s.AddError(err)
			return
		}
		p(s)
	}
}

// Staking is the predicate function for staking builders.
type Staking func(*sql.Selector)

// StakingOrErr calls the predicate only if the error is not nit.
func StakingOrErr(p Staking, err error) Staking {
	return func(s *sql.Selector) {
		if err != nil {
			s.AddError(err)
			return
		}
		p(s)
	}
}

// StakingEvent is the predicate function for stakingevent builders.
type StakingEvent func(*sql.Selector)

// StakingEventOrErr calls the predicate only if the error is not nit.
func StakingEventOrErr(p StakingEvent, err error) StakingEvent {
	return func(s *sql.Selector) {
		if err != nil {
			s.AddError(err)
			return
		}
		p(s)
	}
}
