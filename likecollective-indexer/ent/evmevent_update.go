// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/evmevent"
	"likecollective-indexer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EVMEventUpdate is the builder for updating EVMEvent entities.
type EVMEventUpdate struct {
	config
	hooks    []Hook
	mutation *EVMEventMutation
}

// Where appends a list predicates to the EVMEventUpdate builder.
func (_u *EVMEventUpdate) Where(ps ...predicate.EVMEvent) *EVMEventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *EVMEventUpdate) SetStatus(v evmevent.Status) *EVMEventUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EVMEventUpdate) SetNillableStatus(v *evmevent.Status) *EVMEventUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the EVMEventMutation object of the builder.
func (_u *EVMEventUpdate) Mutation() *EVMEventMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EVMEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EVMEventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EVMEventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EVMEventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EVMEventUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := evmevent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EVMEvent.status": %w`, err)}
		}
	}
	return nil
}

func (_u *EVMEventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evmevent.Table, evmevent.Columns, sqlgraph.NewFieldSpec(evmevent.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.Topic1Cleared() {
		_spec.ClearField(evmevent.FieldTopic1, field.TypeString)
	}
	if _u.mutation.Topic1HexCleared() {
		_spec.ClearField(evmevent.FieldTopic1Hex, field.TypeString)
	}
	if _u.mutation.Topic2Cleared() {
		_spec.ClearField(evmevent.FieldTopic2, field.TypeString)
	}
	if _u.mutation.Topic2HexCleared() {
		_spec.ClearField(evmevent.FieldTopic2Hex, field.TypeString)
	}
	if _u.mutation.Topic3Cleared() {
		_spec.ClearField(evmevent.FieldTopic3, field.TypeString)
	}
	if _u.mutation.Topic3HexCleared() {
		_spec.ClearField(evmevent.FieldTopic3Hex, field.TypeString)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(evmevent.FieldData, field.TypeString)
	}
	if _u.mutation.DataHexCleared() {
		_spec.ClearField(evmevent.FieldDataHex, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evmevent.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.FailedReasonCleared() {
		_spec.ClearField(evmevent.FieldFailedReason, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evmevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EVMEventUpdateOne is the builder for updating a single EVMEvent entity.
type EVMEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EVMEventMutation
}

// SetStatus sets the "status" field.
func (_u *EVMEventUpdateOne) SetStatus(v evmevent.Status) *EVMEventUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EVMEventUpdateOne) SetNillableStatus(v *evmevent.Status) *EVMEventUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the EVMEventMutation object of the builder.
func (_u *EVMEventUpdateOne) Mutation() *EVMEventMutation {
	return _u.mutation
}

// Where appends a list predicates to the EVMEventUpdate builder.
func (_u *EVMEventUpdateOne) Where(ps ...predicate.EVMEvent) *EVMEventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EVMEventUpdateOne) Select(field string, fields ...string) *EVMEventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EVMEvent entity.
func (_u *EVMEventUpdateOne) Save(ctx context.Context) (*EVMEvent, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EVMEventUpdateOne) SaveX(ctx context.Context) *EVMEvent {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EVMEventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EVMEventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EVMEventUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := evmevent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EVMEvent.status": %w`, err)}
		}
	}
	return nil
}

func (_u *EVMEventUpdateOne) sqlSave(ctx context.Context) (_node *EVMEvent, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evmevent.Table, evmevent.Columns, sqlgraph.NewFieldSpec(evmevent.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EVMEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evmevent.FieldID)
		for _, f := range fields {
			if !evmevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != evmevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.Topic1Cleared() {
		_spec.ClearField(evmevent.FieldTopic1, field.TypeString)
	}
	if _u.mutation.Topic1HexCleared() {
		_spec.ClearField(evmevent.FieldTopic1Hex, field.TypeString)
	}
	if _u.mutation.Topic2Cleared() {
		_spec.ClearField(evmevent.FieldTopic2, field.TypeString)
	}
	if _u.mutation.Topic2HexCleared() {
		_spec.ClearField(evmevent.FieldTopic2Hex, field.TypeString)
	}
	if _u.mutation.Topic3Cleared() {
		_spec.ClearField(evmevent.FieldTopic3, field.TypeString)
	}
	if _u.mutation.Topic3HexCleared() {
		_spec.ClearField(evmevent.FieldTopic3Hex, field.TypeString)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(evmevent.FieldData, field.TypeString)
	}
	if _u.mutation.DataHexCleared() {
		_spec.ClearField(evmevent.FieldDataHex, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evmevent.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.FailedReasonCleared() {
		_spec.ClearField(evmevent.FieldFailedReason, field.TypeString)
	}
	_node = &EVMEvent{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evmevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
