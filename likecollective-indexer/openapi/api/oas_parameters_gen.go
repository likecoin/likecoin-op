// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AccountEvmAddressGetParams is parameters of GET /account/{evm_address} operation.
type AccountEvmAddressGetParams struct {
	EvmAddress      EvmAddress
	FilterBookNftIn []EvmAddress
}

func unpackAccountEvmAddressGetParams(packed middleware.Parameters) (params AccountEvmAddressGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_book_nft_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBookNftIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeAccountEvmAddressGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountEvmAddressGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: filter_book_nft_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_book_nft_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterBookNftInVal EvmAddress
					if err := func() error {
						var paramsDotFilterBookNftInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterBookNftInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterBookNftInVal = EvmAddress(paramsDotFilterBookNftInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterBookNftIn = append(params.FilterBookNftIn, paramsDotFilterBookNftInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterBookNftIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_book_nft_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AccountEvmAddressStakingEventsEventTypeGetParams is parameters of GET /account/{evm_address}/staking-events/{event_type} operation.
type AccountEvmAddressStakingEventsEventTypeGetParams struct {
	EvmAddress EvmAddress
	EventType  AccountEvmAddressStakingEventsEventTypeGetEventType
	// Pagination.key.
	PaginationKey OptInt
	// Number of items to return.
	PaginationLimit OptInt
	// Reverse.
	Reverse            OptBool
	FilterDatetimeFrom OptDateTime
	FilterDatetimeTo   OptDateTime
	FilterBookNftIn    []EvmAddress
}

func unpackAccountEvmAddressStakingEventsEventTypeGetParams(packed middleware.Parameters) (params AccountEvmAddressStakingEventsEventTypeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "event_type",
			In:   "path",
		}
		params.EventType = packed[key].(AccountEvmAddressStakingEventsEventTypeGetEventType)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_datetime_from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterDatetimeFrom = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_datetime_to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterDatetimeTo = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_book_nft_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBookNftIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeAccountEvmAddressStakingEventsEventTypeGetParams(args [2]string, argsEscaped bool, r *http.Request) (params AccountEvmAddressStakingEventsEventTypeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: event_type.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "event_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EventType = AccountEvmAddressStakingEventsEventTypeGetEventType(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EventType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "event_type",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(20)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_datetime_from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_datetime_from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterDatetimeFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFilterDatetimeFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterDatetimeFrom.SetTo(paramsDotFilterDatetimeFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_datetime_from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_datetime_to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_datetime_to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterDatetimeToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFilterDatetimeToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterDatetimeTo.SetTo(paramsDotFilterDatetimeToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_datetime_to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_book_nft_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_book_nft_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterBookNftInVal EvmAddress
					if err := func() error {
						var paramsDotFilterBookNftInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterBookNftInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterBookNftInVal = EvmAddress(paramsDotFilterBookNftInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterBookNftIn = append(params.FilterBookNftIn, paramsDotFilterBookNftInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterBookNftIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_book_nft_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AccountEvmAddressStakingsGetParams is parameters of GET /account/{evm_address}/stakings operation.
type AccountEvmAddressStakingsGetParams struct {
	EvmAddress EvmAddress
	// Pagination.key.
	PaginationKey OptInt
	// Optional limit for paginated use cases.
	PaginationLimit OptInt
	// Reverse.
	Reverse         OptBool
	FilterBookNftIn []EvmAddress
}

func unpackAccountEvmAddressStakingsGetParams(packed middleware.Parameters) (params AccountEvmAddressStakingsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_book_nft_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBookNftIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeAccountEvmAddressStakingsGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountEvmAddressStakingsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_book_nft_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_book_nft_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterBookNftInVal EvmAddress
					if err := func() error {
						var paramsDotFilterBookNftInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterBookNftInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterBookNftInVal = EvmAddress(paramsDotFilterBookNftInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterBookNftIn = append(params.FilterBookNftIn, paramsDotFilterBookNftInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterBookNftIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_book_nft_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AccountsGetParams is parameters of GET /accounts operation.
type AccountsGetParams struct {
	// Pagination.key.
	PaginationKey OptInt
	// The number of items to return.
	// When filter.account_in is provided, the limit will be ignored.
	PaginationLimit OptInt
	// Reverse.
	Reverse         OptBool
	FilterAccountIn []EvmAddress
}

func unpackAccountsGetParams(packed middleware.Parameters) (params AccountsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeAccountsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params AccountsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(20)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNftEvmAddressGetParams is parameters of GET /book-nft/{evm_address} operation.
type BookNftEvmAddressGetParams struct {
	EvmAddress      EvmAddress
	FilterAccountIn []EvmAddress
}

func unpackBookNftEvmAddressGetParams(packed middleware.Parameters) (params BookNftEvmAddressGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeBookNftEvmAddressGetParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNftEvmAddressGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNftEvmAddressStakingEventsEventTypeGetParams is parameters of GET /book-nft/{evm_address}/staking-events/{event_type} operation.
type BookNftEvmAddressStakingEventsEventTypeGetParams struct {
	EvmAddress EvmAddress
	EventType  BookNftEvmAddressStakingEventsEventTypeGetEventType
	// Pagination.key.
	PaginationKey OptInt
	// Number of items to return.
	PaginationLimit OptInt
	// Reverse.
	Reverse            OptBool
	FilterDatetimeFrom OptDateTime
	FilterDatetimeTo   OptDateTime
	FilterAccountIn    []EvmAddress
}

func unpackBookNftEvmAddressStakingEventsEventTypeGetParams(packed middleware.Parameters) (params BookNftEvmAddressStakingEventsEventTypeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "event_type",
			In:   "path",
		}
		params.EventType = packed[key].(BookNftEvmAddressStakingEventsEventTypeGetEventType)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_datetime_from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterDatetimeFrom = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_datetime_to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterDatetimeTo = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeBookNftEvmAddressStakingEventsEventTypeGetParams(args [2]string, argsEscaped bool, r *http.Request) (params BookNftEvmAddressStakingEventsEventTypeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: event_type.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "event_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EventType = BookNftEvmAddressStakingEventsEventTypeGetEventType(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EventType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "event_type",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(20)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_datetime_from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_datetime_from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterDatetimeFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFilterDatetimeFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterDatetimeFrom.SetTo(paramsDotFilterDatetimeFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_datetime_from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_datetime_to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_datetime_to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterDatetimeToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFilterDatetimeToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterDatetimeTo.SetTo(paramsDotFilterDatetimeToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_datetime_to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNftEvmAddressStakingsGetParams is parameters of GET /book-nft/{evm_address}/stakings operation.
type BookNftEvmAddressStakingsGetParams struct {
	EvmAddress EvmAddress
	// Pagination.key.
	PaginationKey OptInt
	// Pagination.limit.
	PaginationLimit OptInt
	// Reverse.
	Reverse         OptBool
	FilterAccountIn []EvmAddress
}

func unpackBookNftEvmAddressStakingsGetParams(packed middleware.Parameters) (params BookNftEvmAddressStakingsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(EvmAddress)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeBookNftEvmAddressStakingsGetParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNftEvmAddressStakingsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotEvmAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEvmAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EvmAddress = EvmAddress(paramsDotEvmAddressVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EvmAddress.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNftsGetParams is parameters of GET /book-nfts operation.
type BookNftsGetParams struct {
	// Pagination.key.
	PaginationKey OptInt
	// The number of items to return.
	// When filter.book_nft_in is provided, the limit will be ignored.
	PaginationLimit OptInt
	// Reverse.
	Reverse         OptBool
	FilterBookNftIn []EvmAddress
	FilterAccountIn []EvmAddress
}

func unpackBookNftsGetParams(packed middleware.Parameters) (params BookNftsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_book_nft_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBookNftIn = v.([]EvmAddress)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeBookNftsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params BookNftsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(20)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_book_nft_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_book_nft_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterBookNftInVal EvmAddress
					if err := func() error {
						var paramsDotFilterBookNftInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterBookNftInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterBookNftInVal = EvmAddress(paramsDotFilterBookNftInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterBookNftIn = append(params.FilterBookNftIn, paramsDotFilterBookNftInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterBookNftIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_book_nft_in",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsAddressGetParams is parameters of GET /events/{address} operation.
type EventsAddressGetParams struct {
	// Contract address.
	Address string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsAddressGetParams(packed middleware.Parameters) (params EventsAddressGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsAddressGetParams(args [1]string, argsEscaped bool, r *http.Request) (params EventsAddressGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsAddressSignatureGetParams is parameters of GET /events/{address}/{signature} operation.
type EventsAddressSignatureGetParams struct {
	// Contract address.
	Address string
	// Event signature.
	Signature string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsAddressSignatureGetParams(packed middleware.Parameters) (params EventsAddressSignatureGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "signature",
			In:   "path",
		}
		params.Signature = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsAddressSignatureGetParams(args [2]string, argsEscaped bool, r *http.Request) (params EventsAddressSignatureGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: signature.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "signature",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Signature = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "signature",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsGetParams is parameters of GET /events operation.
type EventsGetParams struct {
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsGetParams(packed middleware.Parameters) (params EventsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params EventsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// StakingsGetParams is parameters of GET /stakings operation.
type StakingsGetParams struct {
	// Pagination.key.
	PaginationKey OptInt
	// The number of items to return.
	PaginationLimit OptInt
	// Reverse.
	Reverse         OptBool
	FilterBookNftIn []EvmAddress
	FilterAccountIn []EvmAddress
}

func unpackStakingsGetParams(packed middleware.Parameters) (params StakingsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_book_nft_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBookNftIn = v.([]EvmAddress)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_account_in",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterAccountIn = v.([]EvmAddress)
		}
	}
	return params
}

func decodeStakingsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params StakingsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(20)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PaginationLimit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_book_nft_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_book_nft_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterBookNftInVal EvmAddress
					if err := func() error {
						var paramsDotFilterBookNftInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterBookNftInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterBookNftInVal = EvmAddress(paramsDotFilterBookNftInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterBookNftIn = append(params.FilterBookNftIn, paramsDotFilterBookNftInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterBookNftIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_book_nft_in",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_account_in.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_account_in",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFilterAccountInVal EvmAddress
					if err := func() error {
						var paramsDotFilterAccountInValVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							paramsDotFilterAccountInValVal = c
							return nil
						}(); err != nil {
							return err
						}
						paramsDotFilterAccountInVal = EvmAddress(paramsDotFilterAccountInValVal)
						return nil
					}(); err != nil {
						return err
					}
					params.FilterAccountIn = append(params.FilterAccountIn, paramsDotFilterAccountInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.FilterAccountIn {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_account_in",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
