// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Account
type Account struct {
	EvmAddress          EvmAddress `json:"evm_address"`
	StakedAmount        Uint256    `json:"staked_amount"`
	PendingRewardAmount Uint256    `json:"pending_reward_amount"`
	ClaimedRewardAmount Uint256    `json:"claimed_reward_amount"`
}

// GetEvmAddress returns the value of EvmAddress.
func (s *Account) GetEvmAddress() EvmAddress {
	return s.EvmAddress
}

// GetStakedAmount returns the value of StakedAmount.
func (s *Account) GetStakedAmount() Uint256 {
	return s.StakedAmount
}

// GetPendingRewardAmount returns the value of PendingRewardAmount.
func (s *Account) GetPendingRewardAmount() Uint256 {
	return s.PendingRewardAmount
}

// GetClaimedRewardAmount returns the value of ClaimedRewardAmount.
func (s *Account) GetClaimedRewardAmount() Uint256 {
	return s.ClaimedRewardAmount
}

// SetEvmAddress sets the value of EvmAddress.
func (s *Account) SetEvmAddress(val EvmAddress) {
	s.EvmAddress = val
}

// SetStakedAmount sets the value of StakedAmount.
func (s *Account) SetStakedAmount(val Uint256) {
	s.StakedAmount = val
}

// SetPendingRewardAmount sets the value of PendingRewardAmount.
func (s *Account) SetPendingRewardAmount(val Uint256) {
	s.PendingRewardAmount = val
}

// SetClaimedRewardAmount sets the value of ClaimedRewardAmount.
func (s *Account) SetClaimedRewardAmount(val Uint256) {
	s.ClaimedRewardAmount = val
}

type AccountEvmAddressStakingEventsEventTypeGetEventType string

const (
	AccountEvmAddressStakingEventsEventTypeGetEventTypeStaked          AccountEvmAddressStakingEventsEventTypeGetEventType = "staked"
	AccountEvmAddressStakingEventsEventTypeGetEventTypeUnstaked        AccountEvmAddressStakingEventsEventTypeGetEventType = "unstaked"
	AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded     AccountEvmAddressStakingEventsEventTypeGetEventType = "reward-added"
	AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed   AccountEvmAddressStakingEventsEventTypeGetEventType = "reward-claimed"
	AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited AccountEvmAddressStakingEventsEventTypeGetEventType = "reward-deposited"
	AccountEvmAddressStakingEventsEventTypeGetEventTypeAll             AccountEvmAddressStakingEventsEventTypeGetEventType = "all"
)

// AllValues returns all AccountEvmAddressStakingEventsEventTypeGetEventType values.
func (AccountEvmAddressStakingEventsEventTypeGetEventType) AllValues() []AccountEvmAddressStakingEventsEventTypeGetEventType {
	return []AccountEvmAddressStakingEventsEventTypeGetEventType{
		AccountEvmAddressStakingEventsEventTypeGetEventTypeStaked,
		AccountEvmAddressStakingEventsEventTypeGetEventTypeUnstaked,
		AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded,
		AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed,
		AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited,
		AccountEvmAddressStakingEventsEventTypeGetEventTypeAll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountEvmAddressStakingEventsEventTypeGetEventType) MarshalText() ([]byte, error) {
	switch s {
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeStaked:
		return []byte(s), nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeUnstaked:
		return []byte(s), nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded:
		return []byte(s), nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed:
		return []byte(s), nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited:
		return []byte(s), nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountEvmAddressStakingEventsEventTypeGetEventType) UnmarshalText(data []byte) error {
	switch AccountEvmAddressStakingEventsEventTypeGetEventType(data) {
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeStaked:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeStaked
		return nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeUnstaked:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeUnstaked
		return nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded
		return nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed
		return nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited
		return nil
	case AccountEvmAddressStakingEventsEventTypeGetEventTypeAll:
		*s = AccountEvmAddressStakingEventsEventTypeGetEventTypeAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AccountEvmAddressStakingEventsEventTypeGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []StakingEvent     `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *AccountEvmAddressStakingEventsEventTypeGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *AccountEvmAddressStakingEventsEventTypeGetOK) GetData() []StakingEvent {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *AccountEvmAddressStakingEventsEventTypeGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *AccountEvmAddressStakingEventsEventTypeGetOK) SetData(val []StakingEvent) {
	s.Data = val
}

type AccountEvmAddressStakingsGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []Staking          `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *AccountEvmAddressStakingsGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *AccountEvmAddressStakingsGetOK) GetData() []Staking {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *AccountEvmAddressStakingsGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *AccountEvmAddressStakingsGetOK) SetData(val []Staking) {
	s.Data = val
}

type AccountsGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []Account          `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *AccountsGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *AccountsGetOK) GetData() []Account {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *AccountsGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *AccountsGetOK) SetData(val []Account) {
	s.Data = val
}

// Ref: #/components/schemas/BookNFT
type BookNFT struct {
	EvmAddress      EvmAddress  `json:"evm_address"`
	StakedAmount    Uint256     `json:"staked_amount"`
	LastStakedAt    NilDateTime `json:"last_staked_at"`
	NumberOfStakers int         `json:"number_of_stakers"`
}

// GetEvmAddress returns the value of EvmAddress.
func (s *BookNFT) GetEvmAddress() EvmAddress {
	return s.EvmAddress
}

// GetStakedAmount returns the value of StakedAmount.
func (s *BookNFT) GetStakedAmount() Uint256 {
	return s.StakedAmount
}

// GetLastStakedAt returns the value of LastStakedAt.
func (s *BookNFT) GetLastStakedAt() NilDateTime {
	return s.LastStakedAt
}

// GetNumberOfStakers returns the value of NumberOfStakers.
func (s *BookNFT) GetNumberOfStakers() int {
	return s.NumberOfStakers
}

// SetEvmAddress sets the value of EvmAddress.
func (s *BookNFT) SetEvmAddress(val EvmAddress) {
	s.EvmAddress = val
}

// SetStakedAmount sets the value of StakedAmount.
func (s *BookNFT) SetStakedAmount(val Uint256) {
	s.StakedAmount = val
}

// SetLastStakedAt sets the value of LastStakedAt.
func (s *BookNFT) SetLastStakedAt(val NilDateTime) {
	s.LastStakedAt = val
}

// SetNumberOfStakers sets the value of NumberOfStakers.
func (s *BookNFT) SetNumberOfStakers(val int) {
	s.NumberOfStakers = val
}

// Ref: #/components/schemas/BookNFTStakeDelta
type BookNFTStakeDelta struct {
	BookNft         EvmAddress `json:"book_nft"`
	StakedAmount    Uint256    `json:"staked_amount"`
	LastStakedAt    time.Time  `json:"last_staked_at"`
	NumberOfStakers int        `json:"number_of_stakers"`
}

// GetBookNft returns the value of BookNft.
func (s *BookNFTStakeDelta) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetStakedAmount returns the value of StakedAmount.
func (s *BookNFTStakeDelta) GetStakedAmount() Uint256 {
	return s.StakedAmount
}

// GetLastStakedAt returns the value of LastStakedAt.
func (s *BookNFTStakeDelta) GetLastStakedAt() time.Time {
	return s.LastStakedAt
}

// GetNumberOfStakers returns the value of NumberOfStakers.
func (s *BookNFTStakeDelta) GetNumberOfStakers() int {
	return s.NumberOfStakers
}

// SetBookNft sets the value of BookNft.
func (s *BookNFTStakeDelta) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetStakedAmount sets the value of StakedAmount.
func (s *BookNFTStakeDelta) SetStakedAmount(val Uint256) {
	s.StakedAmount = val
}

// SetLastStakedAt sets the value of LastStakedAt.
func (s *BookNFTStakeDelta) SetLastStakedAt(val time.Time) {
	s.LastStakedAt = val
}

// SetNumberOfStakers sets the value of NumberOfStakers.
func (s *BookNFTStakeDelta) SetNumberOfStakers(val int) {
	s.NumberOfStakers = val
}

type BookNftEvmAddressStakingEventsEventTypeGetEventType string

const (
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeStaked          BookNftEvmAddressStakingEventsEventTypeGetEventType = "staked"
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeUnstaked        BookNftEvmAddressStakingEventsEventTypeGetEventType = "unstaked"
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded     BookNftEvmAddressStakingEventsEventTypeGetEventType = "reward-added"
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed   BookNftEvmAddressStakingEventsEventTypeGetEventType = "reward-claimed"
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited BookNftEvmAddressStakingEventsEventTypeGetEventType = "reward-deposited"
	BookNftEvmAddressStakingEventsEventTypeGetEventTypeAll             BookNftEvmAddressStakingEventsEventTypeGetEventType = "all"
)

// AllValues returns all BookNftEvmAddressStakingEventsEventTypeGetEventType values.
func (BookNftEvmAddressStakingEventsEventTypeGetEventType) AllValues() []BookNftEvmAddressStakingEventsEventTypeGetEventType {
	return []BookNftEvmAddressStakingEventsEventTypeGetEventType{
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeStaked,
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeUnstaked,
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded,
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed,
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited,
		BookNftEvmAddressStakingEventsEventTypeGetEventTypeAll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookNftEvmAddressStakingEventsEventTypeGetEventType) MarshalText() ([]byte, error) {
	switch s {
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeStaked:
		return []byte(s), nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeUnstaked:
		return []byte(s), nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded:
		return []byte(s), nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed:
		return []byte(s), nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited:
		return []byte(s), nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookNftEvmAddressStakingEventsEventTypeGetEventType) UnmarshalText(data []byte) error {
	switch BookNftEvmAddressStakingEventsEventTypeGetEventType(data) {
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeStaked:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeStaked
		return nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeUnstaked:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeUnstaked
		return nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardAdded
		return nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardClaimed
		return nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeRewardDeposited
		return nil
	case BookNftEvmAddressStakingEventsEventTypeGetEventTypeAll:
		*s = BookNftEvmAddressStakingEventsEventTypeGetEventTypeAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BookNftEvmAddressStakingEventsEventTypeGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []StakingEvent     `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *BookNftEvmAddressStakingEventsEventTypeGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *BookNftEvmAddressStakingEventsEventTypeGetOK) GetData() []StakingEvent {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *BookNftEvmAddressStakingEventsEventTypeGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *BookNftEvmAddressStakingEventsEventTypeGetOK) SetData(val []StakingEvent) {
	s.Data = val
}

type BookNftEvmAddressStakingsGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []Staking          `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *BookNftEvmAddressStakingsGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *BookNftEvmAddressStakingsGetOK) GetData() []Staking {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *BookNftEvmAddressStakingsGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *BookNftEvmAddressStakingsGetOK) SetData(val []Staking) {
	s.Data = val
}

type BookNftsGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []BookNFT          `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *BookNftsGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *BookNftsGetOK) GetData() []BookNFT {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *BookNftsGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *BookNftsGetOK) SetData(val []BookNFT) {
	s.Data = val
}

type BookNftsTimeFrameDeltaGetOK struct {
	Pagination BookNftsTimeFrameDeltaGetOKPagination `json:"pagination"`
	Data       []BookNFTStakeDelta                   `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *BookNftsTimeFrameDeltaGetOK) GetPagination() BookNftsTimeFrameDeltaGetOKPagination {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *BookNftsTimeFrameDeltaGetOK) GetData() []BookNFTStakeDelta {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *BookNftsTimeFrameDeltaGetOK) SetPagination(val BookNftsTimeFrameDeltaGetOKPagination) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *BookNftsTimeFrameDeltaGetOK) SetData(val []BookNFTStakeDelta) {
	s.Data = val
}

type BookNftsTimeFrameDeltaGetOKPagination struct {
	Count int `json:"count"`
}

// GetCount returns the value of Count.
func (s *BookNftsTimeFrameDeltaGetOKPagination) GetCount() int {
	return s.Count
}

// SetCount sets the value of Count.
func (s *BookNftsTimeFrameDeltaGetOKPagination) SetCount(val int) {
	s.Count = val
}

type BookNftsTimeFrameDeltaGetSortBy string

const (
	BookNftsTimeFrameDeltaGetSortByStakedAmount    BookNftsTimeFrameDeltaGetSortBy = "staked_amount"
	BookNftsTimeFrameDeltaGetSortByLastStakedAt    BookNftsTimeFrameDeltaGetSortBy = "last_staked_at"
	BookNftsTimeFrameDeltaGetSortByNumberOfStakers BookNftsTimeFrameDeltaGetSortBy = "number_of_stakers"
)

// AllValues returns all BookNftsTimeFrameDeltaGetSortBy values.
func (BookNftsTimeFrameDeltaGetSortBy) AllValues() []BookNftsTimeFrameDeltaGetSortBy {
	return []BookNftsTimeFrameDeltaGetSortBy{
		BookNftsTimeFrameDeltaGetSortByStakedAmount,
		BookNftsTimeFrameDeltaGetSortByLastStakedAt,
		BookNftsTimeFrameDeltaGetSortByNumberOfStakers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookNftsTimeFrameDeltaGetSortBy) MarshalText() ([]byte, error) {
	switch s {
	case BookNftsTimeFrameDeltaGetSortByStakedAmount:
		return []byte(s), nil
	case BookNftsTimeFrameDeltaGetSortByLastStakedAt:
		return []byte(s), nil
	case BookNftsTimeFrameDeltaGetSortByNumberOfStakers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookNftsTimeFrameDeltaGetSortBy) UnmarshalText(data []byte) error {
	switch BookNftsTimeFrameDeltaGetSortBy(data) {
	case BookNftsTimeFrameDeltaGetSortByStakedAmount:
		*s = BookNftsTimeFrameDeltaGetSortByStakedAmount
		return nil
	case BookNftsTimeFrameDeltaGetSortByLastStakedAt:
		*s = BookNftsTimeFrameDeltaGetSortByLastStakedAt
		return nil
	case BookNftsTimeFrameDeltaGetSortByNumberOfStakers:
		*s = BookNftsTimeFrameDeltaGetSortByNumberOfStakers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BookNftsTimeFrameDeltaGetSortOrder string

const (
	BookNftsTimeFrameDeltaGetSortOrderAsc  BookNftsTimeFrameDeltaGetSortOrder = "asc"
	BookNftsTimeFrameDeltaGetSortOrderDesc BookNftsTimeFrameDeltaGetSortOrder = "desc"
)

// AllValues returns all BookNftsTimeFrameDeltaGetSortOrder values.
func (BookNftsTimeFrameDeltaGetSortOrder) AllValues() []BookNftsTimeFrameDeltaGetSortOrder {
	return []BookNftsTimeFrameDeltaGetSortOrder{
		BookNftsTimeFrameDeltaGetSortOrderAsc,
		BookNftsTimeFrameDeltaGetSortOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookNftsTimeFrameDeltaGetSortOrder) MarshalText() ([]byte, error) {
	switch s {
	case BookNftsTimeFrameDeltaGetSortOrderAsc:
		return []byte(s), nil
	case BookNftsTimeFrameDeltaGetSortOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookNftsTimeFrameDeltaGetSortOrder) UnmarshalText(data []byte) error {
	switch BookNftsTimeFrameDeltaGetSortOrder(data) {
	case BookNftsTimeFrameDeltaGetSortOrderAsc:
		*s = BookNftsTimeFrameDeltaGetSortOrderAsc
		return nil
	case BookNftsTimeFrameDeltaGetSortOrderDesc:
		*s = BookNftsTimeFrameDeltaGetSortOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BookNftsTimeFrameDeltaGetTimeFrame string

const (
	BookNftsTimeFrameDeltaGetTimeFrame7d  BookNftsTimeFrameDeltaGetTimeFrame = "7d"
	BookNftsTimeFrameDeltaGetTimeFrame30d BookNftsTimeFrameDeltaGetTimeFrame = "30d"
	BookNftsTimeFrameDeltaGetTimeFrame1y  BookNftsTimeFrameDeltaGetTimeFrame = "1y"
)

// AllValues returns all BookNftsTimeFrameDeltaGetTimeFrame values.
func (BookNftsTimeFrameDeltaGetTimeFrame) AllValues() []BookNftsTimeFrameDeltaGetTimeFrame {
	return []BookNftsTimeFrameDeltaGetTimeFrame{
		BookNftsTimeFrameDeltaGetTimeFrame7d,
		BookNftsTimeFrameDeltaGetTimeFrame30d,
		BookNftsTimeFrameDeltaGetTimeFrame1y,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookNftsTimeFrameDeltaGetTimeFrame) MarshalText() ([]byte, error) {
	switch s {
	case BookNftsTimeFrameDeltaGetTimeFrame7d:
		return []byte(s), nil
	case BookNftsTimeFrameDeltaGetTimeFrame30d:
		return []byte(s), nil
	case BookNftsTimeFrameDeltaGetTimeFrame1y:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookNftsTimeFrameDeltaGetTimeFrame) UnmarshalText(data []byte) error {
	switch BookNftsTimeFrameDeltaGetTimeFrame(data) {
	case BookNftsTimeFrameDeltaGetTimeFrame7d:
		*s = BookNftsTimeFrameDeltaGetTimeFrame7d
		return nil
	case BookNftsTimeFrameDeltaGetTimeFrame30d:
		*s = BookNftsTimeFrameDeltaGetTimeFrame30d
		return nil
	case BookNftsTimeFrameDeltaGetTimeFrame1y:
		*s = BookNftsTimeFrameDeltaGetTimeFrame1y
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code          int64     `json:"code"`
	Message       string    `json:"message"`
	SentryErrorID OptString `json:"sentry_error_id"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetSentryErrorID returns the value of SentryErrorID.
func (s *Error) GetSentryErrorID() OptString {
	return s.SentryErrorID
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetSentryErrorID sets the value of SentryErrorID.
func (s *Error) SetSentryErrorID(val OptString) {
	s.SentryErrorID = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Event
type Event struct {
	ChainID          int          `json:"chain_id"`
	BlockNumber      string       `json:"block_number"`
	BlockHash        string       `json:"block_hash"`
	BlockTimestamp   string       `json:"block_timestamp"`
	TransactionHash  string       `json:"transaction_hash"`
	TransactionIndex int          `json:"transaction_index"`
	LogIndex         int          `json:"log_index"`
	Address          string       `json:"address"`
	Data             string       `json:"data"`
	Topics           []string     `json:"topics"`
	Decoded          EventDecoded `json:"decoded"`
}

// GetChainID returns the value of ChainID.
func (s *Event) GetChainID() int {
	return s.ChainID
}

// GetBlockNumber returns the value of BlockNumber.
func (s *Event) GetBlockNumber() string {
	return s.BlockNumber
}

// GetBlockHash returns the value of BlockHash.
func (s *Event) GetBlockHash() string {
	return s.BlockHash
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *Event) GetBlockTimestamp() string {
	return s.BlockTimestamp
}

// GetTransactionHash returns the value of TransactionHash.
func (s *Event) GetTransactionHash() string {
	return s.TransactionHash
}

// GetTransactionIndex returns the value of TransactionIndex.
func (s *Event) GetTransactionIndex() int {
	return s.TransactionIndex
}

// GetLogIndex returns the value of LogIndex.
func (s *Event) GetLogIndex() int {
	return s.LogIndex
}

// GetAddress returns the value of Address.
func (s *Event) GetAddress() string {
	return s.Address
}

// GetData returns the value of Data.
func (s *Event) GetData() string {
	return s.Data
}

// GetTopics returns the value of Topics.
func (s *Event) GetTopics() []string {
	return s.Topics
}

// GetDecoded returns the value of Decoded.
func (s *Event) GetDecoded() EventDecoded {
	return s.Decoded
}

// SetChainID sets the value of ChainID.
func (s *Event) SetChainID(val int) {
	s.ChainID = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *Event) SetBlockNumber(val string) {
	s.BlockNumber = val
}

// SetBlockHash sets the value of BlockHash.
func (s *Event) SetBlockHash(val string) {
	s.BlockHash = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *Event) SetBlockTimestamp(val string) {
	s.BlockTimestamp = val
}

// SetTransactionHash sets the value of TransactionHash.
func (s *Event) SetTransactionHash(val string) {
	s.TransactionHash = val
}

// SetTransactionIndex sets the value of TransactionIndex.
func (s *Event) SetTransactionIndex(val int) {
	s.TransactionIndex = val
}

// SetLogIndex sets the value of LogIndex.
func (s *Event) SetLogIndex(val int) {
	s.LogIndex = val
}

// SetAddress sets the value of Address.
func (s *Event) SetAddress(val string) {
	s.Address = val
}

// SetData sets the value of Data.
func (s *Event) SetData(val string) {
	s.Data = val
}

// SetTopics sets the value of Topics.
func (s *Event) SetTopics(val []string) {
	s.Topics = val
}

// SetDecoded sets the value of Decoded.
func (s *Event) SetDecoded(val EventDecoded) {
	s.Decoded = val
}

type EventDecoded struct {
	Name             string                       `json:"name"`
	Signature        string                       `json:"signature"`
	IndexedParams    EventDecodedIndexedParams    `json:"indexed_params"`
	NonIndexedParams EventDecodedNonIndexedParams `json:"non_indexed_params"`
}

// GetName returns the value of Name.
func (s *EventDecoded) GetName() string {
	return s.Name
}

// GetSignature returns the value of Signature.
func (s *EventDecoded) GetSignature() string {
	return s.Signature
}

// GetIndexedParams returns the value of IndexedParams.
func (s *EventDecoded) GetIndexedParams() EventDecodedIndexedParams {
	return s.IndexedParams
}

// GetNonIndexedParams returns the value of NonIndexedParams.
func (s *EventDecoded) GetNonIndexedParams() EventDecodedNonIndexedParams {
	return s.NonIndexedParams
}

// SetName sets the value of Name.
func (s *EventDecoded) SetName(val string) {
	s.Name = val
}

// SetSignature sets the value of Signature.
func (s *EventDecoded) SetSignature(val string) {
	s.Signature = val
}

// SetIndexedParams sets the value of IndexedParams.
func (s *EventDecoded) SetIndexedParams(val EventDecodedIndexedParams) {
	s.IndexedParams = val
}

// SetNonIndexedParams sets the value of NonIndexedParams.
func (s *EventDecoded) SetNonIndexedParams(val EventDecodedNonIndexedParams) {
	s.NonIndexedParams = val
}

type EventDecodedIndexedParams map[string]jx.Raw

func (s *EventDecodedIndexedParams) init() EventDecodedIndexedParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type EventDecodedNonIndexedParams map[string]jx.Raw

func (s *EventDecodedNonIndexedParams) init() EventDecodedNonIndexedParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Metadata for event query.
// Ref: #/components/schemas/EventQueryMetadata
type EventQueryMetadata struct {
	ChainIds      []int  `json:"chain_ids"`
	Address       string `json:"address"`
	Signature     string `json:"signature"`
	Page          int    `json:"page"`
	LimitPerChain int    `json:"limit_per_chain"`
	TotalItems    int    `json:"total_items"`
	TotalPages    int    `json:"total_pages"`
}

// GetChainIds returns the value of ChainIds.
func (s *EventQueryMetadata) GetChainIds() []int {
	return s.ChainIds
}

// GetAddress returns the value of Address.
func (s *EventQueryMetadata) GetAddress() string {
	return s.Address
}

// GetSignature returns the value of Signature.
func (s *EventQueryMetadata) GetSignature() string {
	return s.Signature
}

// GetPage returns the value of Page.
func (s *EventQueryMetadata) GetPage() int {
	return s.Page
}

// GetLimitPerChain returns the value of LimitPerChain.
func (s *EventQueryMetadata) GetLimitPerChain() int {
	return s.LimitPerChain
}

// GetTotalItems returns the value of TotalItems.
func (s *EventQueryMetadata) GetTotalItems() int {
	return s.TotalItems
}

// GetTotalPages returns the value of TotalPages.
func (s *EventQueryMetadata) GetTotalPages() int {
	return s.TotalPages
}

// SetChainIds sets the value of ChainIds.
func (s *EventQueryMetadata) SetChainIds(val []int) {
	s.ChainIds = val
}

// SetAddress sets the value of Address.
func (s *EventQueryMetadata) SetAddress(val string) {
	s.Address = val
}

// SetSignature sets the value of Signature.
func (s *EventQueryMetadata) SetSignature(val string) {
	s.Signature = val
}

// SetPage sets the value of Page.
func (s *EventQueryMetadata) SetPage(val int) {
	s.Page = val
}

// SetLimitPerChain sets the value of LimitPerChain.
func (s *EventQueryMetadata) SetLimitPerChain(val int) {
	s.LimitPerChain = val
}

// SetTotalItems sets the value of TotalItems.
func (s *EventQueryMetadata) SetTotalItems(val int) {
	s.TotalItems = val
}

// SetTotalPages sets the value of TotalPages.
func (s *EventQueryMetadata) SetTotalPages(val int) {
	s.TotalPages = val
}

type EventSortRequestSortBy string

const (
	EventSortRequestSortByBlockNumber    EventSortRequestSortBy = "block_number"
	EventSortRequestSortByBlockTimestamp EventSortRequestSortBy = "block_timestamp"
)

// AllValues returns all EventSortRequestSortBy values.
func (EventSortRequestSortBy) AllValues() []EventSortRequestSortBy {
	return []EventSortRequestSortBy{
		EventSortRequestSortByBlockNumber,
		EventSortRequestSortByBlockTimestamp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventSortRequestSortBy) MarshalText() ([]byte, error) {
	switch s {
	case EventSortRequestSortByBlockNumber:
		return []byte(s), nil
	case EventSortRequestSortByBlockTimestamp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventSortRequestSortBy) UnmarshalText(data []byte) error {
	switch EventSortRequestSortBy(data) {
	case EventSortRequestSortByBlockNumber:
		*s = EventSortRequestSortByBlockNumber
		return nil
	case EventSortRequestSortByBlockTimestamp:
		*s = EventSortRequestSortByBlockTimestamp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EventSortRequestSortOrder string

const (
	EventSortRequestSortOrderAsc  EventSortRequestSortOrder = "asc"
	EventSortRequestSortOrderDesc EventSortRequestSortOrder = "desc"
)

// AllValues returns all EventSortRequestSortOrder values.
func (EventSortRequestSortOrder) AllValues() []EventSortRequestSortOrder {
	return []EventSortRequestSortOrder{
		EventSortRequestSortOrderAsc,
		EventSortRequestSortOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventSortRequestSortOrder) MarshalText() ([]byte, error) {
	switch s {
	case EventSortRequestSortOrderAsc:
		return []byte(s), nil
	case EventSortRequestSortOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventSortRequestSortOrder) UnmarshalText(data []byte) error {
	switch EventSortRequestSortOrder(data) {
	case EventSortRequestSortOrderAsc:
		*s = EventSortRequestSortOrderAsc
		return nil
	case EventSortRequestSortOrderDesc:
		*s = EventSortRequestSortOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EventsAddressGetOK struct {
	Meta EventQueryMetadata `json:"meta"`
	Data []Event            `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *EventsAddressGetOK) GetMeta() EventQueryMetadata {
	return s.Meta
}

// GetData returns the value of Data.
func (s *EventsAddressGetOK) GetData() []Event {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *EventsAddressGetOK) SetMeta(val EventQueryMetadata) {
	s.Meta = val
}

// SetData sets the value of Data.
func (s *EventsAddressGetOK) SetData(val []Event) {
	s.Data = val
}

type EventsAddressSignatureGetOK struct {
	Meta EventQueryMetadata `json:"meta"`
	Data []Event            `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *EventsAddressSignatureGetOK) GetMeta() EventQueryMetadata {
	return s.Meta
}

// GetData returns the value of Data.
func (s *EventsAddressSignatureGetOK) GetData() []Event {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *EventsAddressSignatureGetOK) SetMeta(val EventQueryMetadata) {
	s.Meta = val
}

// SetData sets the value of Data.
func (s *EventsAddressSignatureGetOK) SetData(val []Event) {
	s.Data = val
}

type EventsGetOK struct {
	Meta EventQueryMetadata `json:"meta"`
	Data []Event            `json:"data"`
}

// GetMeta returns the value of Meta.
func (s *EventsGetOK) GetMeta() EventQueryMetadata {
	return s.Meta
}

// GetData returns the value of Data.
func (s *EventsGetOK) GetData() []Event {
	return s.Data
}

// SetMeta sets the value of Meta.
func (s *EventsGetOK) SetMeta(val EventQueryMetadata) {
	s.Meta = val
}

// SetData sets the value of Data.
func (s *EventsGetOK) SetData(val []Event) {
	s.Data = val
}

type EvmAddress string

// NewNilDateTime returns new NilDateTime with value set to v.
func NewNilDateTime(v time.Time) NilDateTime {
	return NilDateTime{
		Value: v,
	}
}

// NilDateTime is nullable time.Time.
type NilDateTime struct {
	Value time.Time
	Null  bool
}

// SetTo sets value to v.
func (o *NilDateTime) SetTo(v time.Time) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilDateTime) SetToNull() {
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventSortRequestSortBy returns new OptEventSortRequestSortBy with value set to v.
func NewOptEventSortRequestSortBy(v EventSortRequestSortBy) OptEventSortRequestSortBy {
	return OptEventSortRequestSortBy{
		Value: v,
		Set:   true,
	}
}

// OptEventSortRequestSortBy is optional EventSortRequestSortBy.
type OptEventSortRequestSortBy struct {
	Value EventSortRequestSortBy
	Set   bool
}

// IsSet returns true if OptEventSortRequestSortBy was set.
func (o OptEventSortRequestSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventSortRequestSortBy) Reset() {
	var v EventSortRequestSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventSortRequestSortBy) SetTo(v EventSortRequestSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventSortRequestSortBy) Get() (v EventSortRequestSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventSortRequestSortBy) Or(d EventSortRequestSortBy) EventSortRequestSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventSortRequestSortOrder returns new OptEventSortRequestSortOrder with value set to v.
func NewOptEventSortRequestSortOrder(v EventSortRequestSortOrder) OptEventSortRequestSortOrder {
	return OptEventSortRequestSortOrder{
		Value: v,
		Set:   true,
	}
}

// OptEventSortRequestSortOrder is optional EventSortRequestSortOrder.
type OptEventSortRequestSortOrder struct {
	Value EventSortRequestSortOrder
	Set   bool
}

// IsSet returns true if OptEventSortRequestSortOrder was set.
func (o OptEventSortRequestSortOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventSortRequestSortOrder) Reset() {
	var v EventSortRequestSortOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventSortRequestSortOrder) SetTo(v EventSortRequestSortOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventSortRequestSortOrder) Get() (v EventSortRequestSortOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventSortRequestSortOrder) Or(d EventSortRequestSortOrder) EventSortRequestSortOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PaginationResponse
type PaginationResponse struct {
	NextKey int `json:"next_key"`
	Count   int `json:"count"`
}

// GetNextKey returns the value of NextKey.
func (s *PaginationResponse) GetNextKey() int {
	return s.NextKey
}

// GetCount returns the value of Count.
func (s *PaginationResponse) GetCount() int {
	return s.Count
}

// SetNextKey sets the value of NextKey.
func (s *PaginationResponse) SetNextKey(val int) {
	s.NextKey = val
}

// SetCount sets the value of Count.
func (s *PaginationResponse) SetCount(val int) {
	s.Count = val
}

type Percentage string

// Ref: #/components/schemas/Staking
type Staking struct {
	BookNft             EvmAddress `json:"book_nft"`
	Account             EvmAddress `json:"account"`
	PoolShare           Percentage `json:"pool_share"`
	StakedAmount        Uint256    `json:"staked_amount"`
	PendingRewardAmount Uint256    `json:"pending_reward_amount"`
	ClaimedRewardAmount Uint256    `json:"claimed_reward_amount"`
}

// GetBookNft returns the value of BookNft.
func (s *Staking) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *Staking) GetAccount() EvmAddress {
	return s.Account
}

// GetPoolShare returns the value of PoolShare.
func (s *Staking) GetPoolShare() Percentage {
	return s.PoolShare
}

// GetStakedAmount returns the value of StakedAmount.
func (s *Staking) GetStakedAmount() Uint256 {
	return s.StakedAmount
}

// GetPendingRewardAmount returns the value of PendingRewardAmount.
func (s *Staking) GetPendingRewardAmount() Uint256 {
	return s.PendingRewardAmount
}

// GetClaimedRewardAmount returns the value of ClaimedRewardAmount.
func (s *Staking) GetClaimedRewardAmount() Uint256 {
	return s.ClaimedRewardAmount
}

// SetBookNft sets the value of BookNft.
func (s *Staking) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *Staking) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetPoolShare sets the value of PoolShare.
func (s *Staking) SetPoolShare(val Percentage) {
	s.PoolShare = val
}

// SetStakedAmount sets the value of StakedAmount.
func (s *Staking) SetStakedAmount(val Uint256) {
	s.StakedAmount = val
}

// SetPendingRewardAmount sets the value of PendingRewardAmount.
func (s *Staking) SetPendingRewardAmount(val Uint256) {
	s.PendingRewardAmount = val
}

// SetClaimedRewardAmount sets the value of ClaimedRewardAmount.
func (s *Staking) SetClaimedRewardAmount(val Uint256) {
	s.ClaimedRewardAmount = val
}

// Ref: #/components/schemas/StakingEvent
// StakingEvent represents sum type.
type StakingEvent struct {
	Type                          StakingEventType // switch on this field
	StakingEventStaked            StakingEventStaked
	StakingEventUnstaked          StakingEventUnstaked
	StakingEventRewardAdded       StakingEventRewardAdded
	StakingEventRewardClaimed     StakingEventRewardClaimed
	StakingEventRewardDeposited   StakingEventRewardDeposited
	StakingEventAllRewardsClaimed StakingEventAllRewardsClaimed
}

// StakingEventType is oneOf type of StakingEvent.
type StakingEventType string

// Possible values for StakingEventType.
const (
	StakingEventStakedStakingEvent            StakingEventType = "staked"
	StakingEventUnstakedStakingEvent          StakingEventType = "unstaked"
	StakingEventRewardAddedStakingEvent       StakingEventType = "reward-added"
	StakingEventRewardClaimedStakingEvent     StakingEventType = "reward-claimed"
	StakingEventRewardDepositedStakingEvent   StakingEventType = "reward-deposited"
	StakingEventAllRewardsClaimedStakingEvent StakingEventType = "all-rewards-claimed"
)

// IsStakingEventStaked reports whether StakingEvent is StakingEventStaked.
func (s StakingEvent) IsStakingEventStaked() bool { return s.Type == StakingEventStakedStakingEvent }

// IsStakingEventUnstaked reports whether StakingEvent is StakingEventUnstaked.
func (s StakingEvent) IsStakingEventUnstaked() bool {
	return s.Type == StakingEventUnstakedStakingEvent
}

// IsStakingEventRewardAdded reports whether StakingEvent is StakingEventRewardAdded.
func (s StakingEvent) IsStakingEventRewardAdded() bool {
	return s.Type == StakingEventRewardAddedStakingEvent
}

// IsStakingEventRewardClaimed reports whether StakingEvent is StakingEventRewardClaimed.
func (s StakingEvent) IsStakingEventRewardClaimed() bool {
	return s.Type == StakingEventRewardClaimedStakingEvent
}

// IsStakingEventRewardDeposited reports whether StakingEvent is StakingEventRewardDeposited.
func (s StakingEvent) IsStakingEventRewardDeposited() bool {
	return s.Type == StakingEventRewardDepositedStakingEvent
}

// IsStakingEventAllRewardsClaimed reports whether StakingEvent is StakingEventAllRewardsClaimed.
func (s StakingEvent) IsStakingEventAllRewardsClaimed() bool {
	return s.Type == StakingEventAllRewardsClaimedStakingEvent
}

// SetStakingEventStaked sets StakingEvent to StakingEventStaked.
func (s *StakingEvent) SetStakingEventStaked(v StakingEventStaked) {
	s.Type = StakingEventStakedStakingEvent
	s.StakingEventStaked = v
}

// GetStakingEventStaked returns StakingEventStaked and true boolean if StakingEvent is StakingEventStaked.
func (s StakingEvent) GetStakingEventStaked() (v StakingEventStaked, ok bool) {
	if !s.IsStakingEventStaked() {
		return v, false
	}
	return s.StakingEventStaked, true
}

// NewStakingEventStakedStakingEvent returns new StakingEvent from StakingEventStaked.
func NewStakingEventStakedStakingEvent(v StakingEventStaked) StakingEvent {
	var s StakingEvent
	s.SetStakingEventStaked(v)
	return s
}

// SetStakingEventUnstaked sets StakingEvent to StakingEventUnstaked.
func (s *StakingEvent) SetStakingEventUnstaked(v StakingEventUnstaked) {
	s.Type = StakingEventUnstakedStakingEvent
	s.StakingEventUnstaked = v
}

// GetStakingEventUnstaked returns StakingEventUnstaked and true boolean if StakingEvent is StakingEventUnstaked.
func (s StakingEvent) GetStakingEventUnstaked() (v StakingEventUnstaked, ok bool) {
	if !s.IsStakingEventUnstaked() {
		return v, false
	}
	return s.StakingEventUnstaked, true
}

// NewStakingEventUnstakedStakingEvent returns new StakingEvent from StakingEventUnstaked.
func NewStakingEventUnstakedStakingEvent(v StakingEventUnstaked) StakingEvent {
	var s StakingEvent
	s.SetStakingEventUnstaked(v)
	return s
}

// SetStakingEventRewardAdded sets StakingEvent to StakingEventRewardAdded.
func (s *StakingEvent) SetStakingEventRewardAdded(v StakingEventRewardAdded) {
	s.Type = StakingEventRewardAddedStakingEvent
	s.StakingEventRewardAdded = v
}

// GetStakingEventRewardAdded returns StakingEventRewardAdded and true boolean if StakingEvent is StakingEventRewardAdded.
func (s StakingEvent) GetStakingEventRewardAdded() (v StakingEventRewardAdded, ok bool) {
	if !s.IsStakingEventRewardAdded() {
		return v, false
	}
	return s.StakingEventRewardAdded, true
}

// NewStakingEventRewardAddedStakingEvent returns new StakingEvent from StakingEventRewardAdded.
func NewStakingEventRewardAddedStakingEvent(v StakingEventRewardAdded) StakingEvent {
	var s StakingEvent
	s.SetStakingEventRewardAdded(v)
	return s
}

// SetStakingEventRewardClaimed sets StakingEvent to StakingEventRewardClaimed.
func (s *StakingEvent) SetStakingEventRewardClaimed(v StakingEventRewardClaimed) {
	s.Type = StakingEventRewardClaimedStakingEvent
	s.StakingEventRewardClaimed = v
}

// GetStakingEventRewardClaimed returns StakingEventRewardClaimed and true boolean if StakingEvent is StakingEventRewardClaimed.
func (s StakingEvent) GetStakingEventRewardClaimed() (v StakingEventRewardClaimed, ok bool) {
	if !s.IsStakingEventRewardClaimed() {
		return v, false
	}
	return s.StakingEventRewardClaimed, true
}

// NewStakingEventRewardClaimedStakingEvent returns new StakingEvent from StakingEventRewardClaimed.
func NewStakingEventRewardClaimedStakingEvent(v StakingEventRewardClaimed) StakingEvent {
	var s StakingEvent
	s.SetStakingEventRewardClaimed(v)
	return s
}

// SetStakingEventRewardDeposited sets StakingEvent to StakingEventRewardDeposited.
func (s *StakingEvent) SetStakingEventRewardDeposited(v StakingEventRewardDeposited) {
	s.Type = StakingEventRewardDepositedStakingEvent
	s.StakingEventRewardDeposited = v
}

// GetStakingEventRewardDeposited returns StakingEventRewardDeposited and true boolean if StakingEvent is StakingEventRewardDeposited.
func (s StakingEvent) GetStakingEventRewardDeposited() (v StakingEventRewardDeposited, ok bool) {
	if !s.IsStakingEventRewardDeposited() {
		return v, false
	}
	return s.StakingEventRewardDeposited, true
}

// NewStakingEventRewardDepositedStakingEvent returns new StakingEvent from StakingEventRewardDeposited.
func NewStakingEventRewardDepositedStakingEvent(v StakingEventRewardDeposited) StakingEvent {
	var s StakingEvent
	s.SetStakingEventRewardDeposited(v)
	return s
}

// SetStakingEventAllRewardsClaimed sets StakingEvent to StakingEventAllRewardsClaimed.
func (s *StakingEvent) SetStakingEventAllRewardsClaimed(v StakingEventAllRewardsClaimed) {
	s.Type = StakingEventAllRewardsClaimedStakingEvent
	s.StakingEventAllRewardsClaimed = v
}

// GetStakingEventAllRewardsClaimed returns StakingEventAllRewardsClaimed and true boolean if StakingEvent is StakingEventAllRewardsClaimed.
func (s StakingEvent) GetStakingEventAllRewardsClaimed() (v StakingEventAllRewardsClaimed, ok bool) {
	if !s.IsStakingEventAllRewardsClaimed() {
		return v, false
	}
	return s.StakingEventAllRewardsClaimed, true
}

// NewStakingEventAllRewardsClaimedStakingEvent returns new StakingEvent from StakingEventAllRewardsClaimed.
func NewStakingEventAllRewardsClaimedStakingEvent(v StakingEventAllRewardsClaimed) StakingEvent {
	var s StakingEvent
	s.SetStakingEventAllRewardsClaimed(v)
	return s
}

// Ref: #/components/schemas/StakingEventAllRewardsClaimed
type StakingEventAllRewardsClaimed struct {
	EventType         StakingEventAllRewardsClaimedEventType               `json:"event_type"`
	Account           EvmAddress                                           `json:"account"`
	ClaimedAmountList []StakingEventAllRewardsClaimedClaimedAmountListItem `json:"claimed_amount_list"`
	Datetime          time.Time                                            `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventAllRewardsClaimed) GetEventType() StakingEventAllRewardsClaimedEventType {
	return s.EventType
}

// GetAccount returns the value of Account.
func (s *StakingEventAllRewardsClaimed) GetAccount() EvmAddress {
	return s.Account
}

// GetClaimedAmountList returns the value of ClaimedAmountList.
func (s *StakingEventAllRewardsClaimed) GetClaimedAmountList() []StakingEventAllRewardsClaimedClaimedAmountListItem {
	return s.ClaimedAmountList
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventAllRewardsClaimed) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventAllRewardsClaimed) SetEventType(val StakingEventAllRewardsClaimedEventType) {
	s.EventType = val
}

// SetAccount sets the value of Account.
func (s *StakingEventAllRewardsClaimed) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetClaimedAmountList sets the value of ClaimedAmountList.
func (s *StakingEventAllRewardsClaimed) SetClaimedAmountList(val []StakingEventAllRewardsClaimedClaimedAmountListItem) {
	s.ClaimedAmountList = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventAllRewardsClaimed) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventAllRewardsClaimedClaimedAmountListItem struct {
	BookNft  EvmAddress  `json:"book_nft"`
	Amount   Uint256     `json:"amount"`
	Datetime OptDateTime `json:"datetime"`
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAmount returns the value of Amount.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) GetDatetime() OptDateTime {
	return s.Datetime
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventAllRewardsClaimedClaimedAmountListItem) SetDatetime(val OptDateTime) {
	s.Datetime = val
}

type StakingEventAllRewardsClaimedEventType string

const (
	StakingEventAllRewardsClaimedEventTypeAllRewardsClaimed StakingEventAllRewardsClaimedEventType = "all-rewards-claimed"
)

// AllValues returns all StakingEventAllRewardsClaimedEventType values.
func (StakingEventAllRewardsClaimedEventType) AllValues() []StakingEventAllRewardsClaimedEventType {
	return []StakingEventAllRewardsClaimedEventType{
		StakingEventAllRewardsClaimedEventTypeAllRewardsClaimed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventAllRewardsClaimedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventAllRewardsClaimedEventTypeAllRewardsClaimed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventAllRewardsClaimedEventType) UnmarshalText(data []byte) error {
	switch StakingEventAllRewardsClaimedEventType(data) {
	case StakingEventAllRewardsClaimedEventTypeAllRewardsClaimed:
		*s = StakingEventAllRewardsClaimedEventTypeAllRewardsClaimed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StakingEventRewardAdded
type StakingEventRewardAdded struct {
	EventType StakingEventRewardAddedEventType `json:"event_type"`
	BookNft   EvmAddress                       `json:"book_nft"`
	Account   EvmAddress                       `json:"account"`
	Amount    Uint256                          `json:"amount"`
	Datetime  time.Time                        `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventRewardAdded) GetEventType() StakingEventRewardAddedEventType {
	return s.EventType
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventRewardAdded) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *StakingEventRewardAdded) GetAccount() EvmAddress {
	return s.Account
}

// GetAmount returns the value of Amount.
func (s *StakingEventRewardAdded) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventRewardAdded) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventRewardAdded) SetEventType(val StakingEventRewardAddedEventType) {
	s.EventType = val
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventRewardAdded) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *StakingEventRewardAdded) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventRewardAdded) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventRewardAdded) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventRewardAddedEventType string

const (
	StakingEventRewardAddedEventTypeRewardAdded StakingEventRewardAddedEventType = "reward-added"
)

// AllValues returns all StakingEventRewardAddedEventType values.
func (StakingEventRewardAddedEventType) AllValues() []StakingEventRewardAddedEventType {
	return []StakingEventRewardAddedEventType{
		StakingEventRewardAddedEventTypeRewardAdded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventRewardAddedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventRewardAddedEventTypeRewardAdded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventRewardAddedEventType) UnmarshalText(data []byte) error {
	switch StakingEventRewardAddedEventType(data) {
	case StakingEventRewardAddedEventTypeRewardAdded:
		*s = StakingEventRewardAddedEventTypeRewardAdded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StakingEventRewardClaimed
type StakingEventRewardClaimed struct {
	EventType StakingEventRewardClaimedEventType `json:"event_type"`
	BookNft   EvmAddress                         `json:"book_nft"`
	Account   EvmAddress                         `json:"account"`
	Amount    Uint256                            `json:"amount"`
	Datetime  time.Time                          `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventRewardClaimed) GetEventType() StakingEventRewardClaimedEventType {
	return s.EventType
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventRewardClaimed) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *StakingEventRewardClaimed) GetAccount() EvmAddress {
	return s.Account
}

// GetAmount returns the value of Amount.
func (s *StakingEventRewardClaimed) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventRewardClaimed) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventRewardClaimed) SetEventType(val StakingEventRewardClaimedEventType) {
	s.EventType = val
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventRewardClaimed) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *StakingEventRewardClaimed) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventRewardClaimed) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventRewardClaimed) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventRewardClaimedEventType string

const (
	StakingEventRewardClaimedEventTypeRewardClaimed StakingEventRewardClaimedEventType = "reward-claimed"
)

// AllValues returns all StakingEventRewardClaimedEventType values.
func (StakingEventRewardClaimedEventType) AllValues() []StakingEventRewardClaimedEventType {
	return []StakingEventRewardClaimedEventType{
		StakingEventRewardClaimedEventTypeRewardClaimed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventRewardClaimedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventRewardClaimedEventTypeRewardClaimed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventRewardClaimedEventType) UnmarshalText(data []byte) error {
	switch StakingEventRewardClaimedEventType(data) {
	case StakingEventRewardClaimedEventTypeRewardClaimed:
		*s = StakingEventRewardClaimedEventTypeRewardClaimed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StakingEventRewardDeposited
type StakingEventRewardDeposited struct {
	EventType StakingEventRewardDepositedEventType `json:"event_type"`
	BookNft   EvmAddress                           `json:"book_nft"`
	Account   EvmAddress                           `json:"account"`
	Amount    Uint256                              `json:"amount"`
	Datetime  time.Time                            `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventRewardDeposited) GetEventType() StakingEventRewardDepositedEventType {
	return s.EventType
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventRewardDeposited) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *StakingEventRewardDeposited) GetAccount() EvmAddress {
	return s.Account
}

// GetAmount returns the value of Amount.
func (s *StakingEventRewardDeposited) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventRewardDeposited) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventRewardDeposited) SetEventType(val StakingEventRewardDepositedEventType) {
	s.EventType = val
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventRewardDeposited) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *StakingEventRewardDeposited) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventRewardDeposited) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventRewardDeposited) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventRewardDepositedEventType string

const (
	StakingEventRewardDepositedEventTypeRewardDeposited StakingEventRewardDepositedEventType = "reward-deposited"
)

// AllValues returns all StakingEventRewardDepositedEventType values.
func (StakingEventRewardDepositedEventType) AllValues() []StakingEventRewardDepositedEventType {
	return []StakingEventRewardDepositedEventType{
		StakingEventRewardDepositedEventTypeRewardDeposited,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventRewardDepositedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventRewardDepositedEventTypeRewardDeposited:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventRewardDepositedEventType) UnmarshalText(data []byte) error {
	switch StakingEventRewardDepositedEventType(data) {
	case StakingEventRewardDepositedEventTypeRewardDeposited:
		*s = StakingEventRewardDepositedEventTypeRewardDeposited
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StakingEventStaked
type StakingEventStaked struct {
	EventType StakingEventStakedEventType `json:"event_type"`
	BookNft   EvmAddress                  `json:"book_nft"`
	Account   EvmAddress                  `json:"account"`
	Amount    Uint256                     `json:"amount"`
	Datetime  time.Time                   `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventStaked) GetEventType() StakingEventStakedEventType {
	return s.EventType
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventStaked) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *StakingEventStaked) GetAccount() EvmAddress {
	return s.Account
}

// GetAmount returns the value of Amount.
func (s *StakingEventStaked) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventStaked) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventStaked) SetEventType(val StakingEventStakedEventType) {
	s.EventType = val
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventStaked) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *StakingEventStaked) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventStaked) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventStaked) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventStakedEventType string

const (
	StakingEventStakedEventTypeStaked StakingEventStakedEventType = "staked"
)

// AllValues returns all StakingEventStakedEventType values.
func (StakingEventStakedEventType) AllValues() []StakingEventStakedEventType {
	return []StakingEventStakedEventType{
		StakingEventStakedEventTypeStaked,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventStakedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventStakedEventTypeStaked:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventStakedEventType) UnmarshalText(data []byte) error {
	switch StakingEventStakedEventType(data) {
	case StakingEventStakedEventTypeStaked:
		*s = StakingEventStakedEventTypeStaked
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StakingEventUnstaked
type StakingEventUnstaked struct {
	EventType StakingEventUnstakedEventType `json:"event_type"`
	BookNft   EvmAddress                    `json:"book_nft"`
	Account   EvmAddress                    `json:"account"`
	Amount    Uint256                       `json:"amount"`
	Datetime  time.Time                     `json:"datetime"`
}

// GetEventType returns the value of EventType.
func (s *StakingEventUnstaked) GetEventType() StakingEventUnstakedEventType {
	return s.EventType
}

// GetBookNft returns the value of BookNft.
func (s *StakingEventUnstaked) GetBookNft() EvmAddress {
	return s.BookNft
}

// GetAccount returns the value of Account.
func (s *StakingEventUnstaked) GetAccount() EvmAddress {
	return s.Account
}

// GetAmount returns the value of Amount.
func (s *StakingEventUnstaked) GetAmount() Uint256 {
	return s.Amount
}

// GetDatetime returns the value of Datetime.
func (s *StakingEventUnstaked) GetDatetime() time.Time {
	return s.Datetime
}

// SetEventType sets the value of EventType.
func (s *StakingEventUnstaked) SetEventType(val StakingEventUnstakedEventType) {
	s.EventType = val
}

// SetBookNft sets the value of BookNft.
func (s *StakingEventUnstaked) SetBookNft(val EvmAddress) {
	s.BookNft = val
}

// SetAccount sets the value of Account.
func (s *StakingEventUnstaked) SetAccount(val EvmAddress) {
	s.Account = val
}

// SetAmount sets the value of Amount.
func (s *StakingEventUnstaked) SetAmount(val Uint256) {
	s.Amount = val
}

// SetDatetime sets the value of Datetime.
func (s *StakingEventUnstaked) SetDatetime(val time.Time) {
	s.Datetime = val
}

type StakingEventUnstakedEventType string

const (
	StakingEventUnstakedEventTypeUnstaked StakingEventUnstakedEventType = "unstaked"
)

// AllValues returns all StakingEventUnstakedEventType values.
func (StakingEventUnstakedEventType) AllValues() []StakingEventUnstakedEventType {
	return []StakingEventUnstakedEventType{
		StakingEventUnstakedEventTypeUnstaked,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StakingEventUnstakedEventType) MarshalText() ([]byte, error) {
	switch s {
	case StakingEventUnstakedEventTypeUnstaked:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StakingEventUnstakedEventType) UnmarshalText(data []byte) error {
	switch StakingEventUnstakedEventType(data) {
	case StakingEventUnstakedEventTypeUnstaked:
		*s = StakingEventUnstakedEventTypeUnstaked
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StakingsGetOK struct {
	Pagination PaginationResponse `json:"pagination"`
	Data       []Staking          `json:"data"`
}

// GetPagination returns the value of Pagination.
func (s *StakingsGetOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// GetData returns the value of Data.
func (s *StakingsGetOK) GetData() []Staking {
	return s.Data
}

// SetPagination sets the value of Pagination.
func (s *StakingsGetOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

// SetData sets the value of Data.
func (s *StakingsGetOK) SetData(val []Staking) {
	s.Data = val
}

type Uint256 string
