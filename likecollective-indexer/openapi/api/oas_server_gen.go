// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountEvmAddressGet implements GET /account/{evm_address} operation.
	//
	// Get an account.
	//
	// GET /account/{evm_address}
	AccountEvmAddressGet(ctx context.Context, params AccountEvmAddressGetParams) (*Account, error)
	// AccountEvmAddressStakingEventsEventTypeGet implements GET /account/{evm_address}/staking-events/{event_type} operation.
	//
	// Get staking events for an account.
	//
	// GET /account/{evm_address}/staking-events/{event_type}
	AccountEvmAddressStakingEventsEventTypeGet(ctx context.Context, params AccountEvmAddressStakingEventsEventTypeGetParams) (*AccountEvmAddressStakingEventsEventTypeGetOK, error)
	// AccountEvmAddressStakingsGet implements GET /account/{evm_address}/stakings operation.
	//
	// Get staking information for an account.
	//
	// GET /account/{evm_address}/stakings
	AccountEvmAddressStakingsGet(ctx context.Context, params AccountEvmAddressStakingsGetParams) (*AccountEvmAddressStakingsGetOK, error)
	// AccountsGet implements GET /accounts operation.
	//
	// Get accounts.
	//
	// GET /accounts
	AccountsGet(ctx context.Context, params AccountsGetParams) (*AccountsGetOK, error)
	// BookNftEvmAddressGet implements GET /book-nft/{evm_address} operation.
	//
	// Get a book NFT.
	//
	// GET /book-nft/{evm_address}
	BookNftEvmAddressGet(ctx context.Context, params BookNftEvmAddressGetParams) (*BookNFT, error)
	// BookNftEvmAddressStakingEventsEventTypeGet implements GET /book-nft/{evm_address}/staking-events/{event_type} operation.
	//
	// Get staking events for a book NFT.
	//
	// GET /book-nft/{evm_address}/staking-events/{event_type}
	BookNftEvmAddressStakingEventsEventTypeGet(ctx context.Context, params BookNftEvmAddressStakingEventsEventTypeGetParams) (*BookNftEvmAddressStakingEventsEventTypeGetOK, error)
	// BookNftEvmAddressStakingsGet implements GET /book-nft/{evm_address}/stakings operation.
	//
	// Get staking information for a book NFT.
	//
	// GET /book-nft/{evm_address}/stakings
	BookNftEvmAddressStakingsGet(ctx context.Context, params BookNftEvmAddressStakingsGetParams) (*BookNftEvmAddressStakingsGetOK, error)
	// BookNftsGet implements GET /book-nfts operation.
	//
	// Get book NFTs.
	//
	// GET /book-nfts
	BookNftsGet(ctx context.Context, params BookNftsGetParams) (*BookNftsGetOK, error)
	// BookNftsTimeFrameDeltaGet implements GET /book-nfts/{time_frame}/delta operation.
	//
	// Get book NFTs.
	//
	// GET /book-nfts/{time_frame}/delta
	BookNftsTimeFrameDeltaGet(ctx context.Context, params BookNftsTimeFrameDeltaGetParams) (*BookNftsTimeFrameDeltaGetOK, error)
	// EventsAddressGet implements GET /events/{address} operation.
	//
	// Query events.
	//
	// GET /events/{address}
	EventsAddressGet(ctx context.Context, params EventsAddressGetParams) (*EventsAddressGetOK, error)
	// EventsAddressSignatureGet implements GET /events/{address}/{signature} operation.
	//
	// Query events.
	//
	// GET /events/{address}/{signature}
	EventsAddressSignatureGet(ctx context.Context, params EventsAddressSignatureGetParams) (*EventsAddressSignatureGetOK, error)
	// EventsGet implements GET /events operation.
	//
	// Query events.
	//
	// GET /events
	EventsGet(ctx context.Context, params EventsGetParams) (*EventsGetOK, error)
	// StakingsGet implements GET /stakings operation.
	//
	// Get stakings.
	//
	// GET /stakings
	StakingsGet(ctx context.Context, params StakingsGetParams) (*StakingsGetOK, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
