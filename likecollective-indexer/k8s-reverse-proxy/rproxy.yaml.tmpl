apiVersion: v1
kind: Service
metadata:
  labels:
    app: rproxy-{{ .Env.NAME }}
  name: rproxy-{{ .Env.NAME }}
  namespace: {{ .Env.NAMESPACE }}
spec:
  type: ClusterIP
  selector:
    app: rproxy-{{ .Env.NAME }}
  sessionAffinity: None
  ports:
  - name: http
    port: {{ .Env.APP_PORT_LOCAL }}
    targetPort: {{ .Env.APP_PORT_LOCAL }}
    protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: rproxy-{{ .Env.NAME }}
  name: rproxy-{{ .Env.NAME }}
  namespace: {{ .Env.NAMESPACE }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rproxy-{{ .Env.NAME }}
  template:
    metadata:
      labels:
        app: rproxy-{{ .Env.NAME }}
      annotations:
        container.apparmor.security.beta.kubernetes.io/rproxy-{{ .Env.NAME }}: runtime/default
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      automountServiceAccountToken: false
      restartPolicy: Always
      volumes:
      - name: ssh-rproxy-{{ .Env.NAME }}-public-key
        secret:
          secretName: ssh-rproxy-{{ .Env.NAME }}-public-key
      containers:
      - name: rproxy-{{ .Env.NAME }}
        image: linuxserver/openssh-server:version-8.8_p1-r1
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
        resources:
          requests:
            cpu: "32m"
            memory: "8Mi"
          limits:
            cpu: "64m"
            memory: "32Mi"
        ports:
        - containerPort: 2222
        volumeMounts:
        - name: ssh-rproxy-{{ .Env.NAME }}-public-key
          mountPath: "/run/secrets/sshd/"
          readOnly: true
        env:
        - name: SUDO_ACCESS
          value: "true"
        - name: USER_NAME
          value: "user"
        - name: PUBLIC_KEY_FILE
          value: "/run/secrets/sshd/rproxy-{{ .Env.NAME }}.pub"
        - name: DOCKER_MODS
          value: "linuxserver/mods:openssh-server-ssh-tunnel"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: rproxy-{{ .Env.NAME }}
  name: rproxy-{{ .Env.NAME }}
  namespace: {{ .Env.NAMESPACE }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    ingress.kubernetes.io/proxy-body-size: 4m
    nginx.ingress.kubernetes.io/proxy-body-size: 4m
spec:
  rules:
    - host: rproxy-{{ .Env.NAME }}.pandawork.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rproxy-{{ .Env.NAME }}
                port:
                  number: {{ .Env.APP_PORT_LOCAL }}
  tls:
    - hosts:
        - rproxy-{{ .Env.NAME }}.pandawork.com
      secretName: rproxy-{{ .Env.NAME }}.pandawork.com
