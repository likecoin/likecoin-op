// Code generated by ent, DO NOT EDIT.

package stakingeventshypertable

import (
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the stakingeventshypertable type in the database.
	Label = "staking_events_hyper_table"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionHash holds the string denoting the transaction_hash field in the database.
	FieldTransactionHash = "transaction_hash"
	// FieldTransactionIndex holds the string denoting the transaction_index field in the database.
	FieldTransactionIndex = "transaction_index"
	// FieldBlockNumber holds the string denoting the block_number field in the database.
	FieldBlockNumber = "block_number"
	// FieldLogIndex holds the string denoting the log_index field in the database.
	FieldLogIndex = "log_index"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldNftClassAddress holds the string denoting the nft_class_address field in the database.
	FieldNftClassAddress = "nft_class_address"
	// FieldAccountEvmAddress holds the string denoting the account_evm_address field in the database.
	FieldAccountEvmAddress = "account_evm_address"
	// FieldStakedAmountAdded holds the string denoting the staked_amount_added field in the database.
	FieldStakedAmountAdded = "staked_amount_added"
	// FieldStakedAmountRemoved holds the string denoting the staked_amount_removed field in the database.
	FieldStakedAmountRemoved = "staked_amount_removed"
	// FieldPendingRewardAmountAdded holds the string denoting the pending_reward_amount_added field in the database.
	FieldPendingRewardAmountAdded = "pending_reward_amount_added"
	// FieldPendingRewardAmountRemoved holds the string denoting the pending_reward_amount_removed field in the database.
	FieldPendingRewardAmountRemoved = "pending_reward_amount_removed"
	// FieldClaimedRewardAmountAdded holds the string denoting the claimed_reward_amount_added field in the database.
	FieldClaimedRewardAmountAdded = "claimed_reward_amount_added"
	// FieldClaimedRewardAmountRemoved holds the string denoting the claimed_reward_amount_removed field in the database.
	FieldClaimedRewardAmountRemoved = "claimed_reward_amount_removed"
	// FieldDatetime holds the string denoting the datetime field in the database.
	FieldDatetime = "datetime"
	// Table holds the table name of the stakingeventshypertable in the database.
	Table = "staking_events_hyper_table"
)

// Columns holds all SQL columns for stakingeventshypertable fields.
var Columns = []string{
	FieldID,
	FieldTransactionHash,
	FieldTransactionIndex,
	FieldBlockNumber,
	FieldLogIndex,
	FieldEventType,
	FieldNftClassAddress,
	FieldAccountEvmAddress,
	FieldStakedAmountAdded,
	FieldStakedAmountRemoved,
	FieldPendingRewardAmountAdded,
	FieldPendingRewardAmountRemoved,
	FieldClaimedRewardAmountAdded,
	FieldClaimedRewardAmountRemoved,
	FieldDatetime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	TransactionHashValidator func(string) error
	// NftClassAddressValidator is a validator for the "nft_class_address" field. It is called by the builders before save.
	NftClassAddressValidator func(string) error
	// AccountEvmAddressValidator is a validator for the "account_evm_address" field. It is called by the builders before save.
	AccountEvmAddressValidator func(string) error
	// DefaultDatetime holds the default value on creation for the "datetime" field.
	DefaultDatetime time.Time
	// ValueScanner of all StakingEventsHyperTable fields.
	ValueScanner struct {
		BlockNumber                field.TypeValueScanner[typeutil.Uint64]
		StakedAmountAdded          field.TypeValueScanner[typeutil.Uint256]
		StakedAmountRemoved        field.TypeValueScanner[typeutil.Uint256]
		PendingRewardAmountAdded   field.TypeValueScanner[typeutil.Uint256]
		PendingRewardAmountRemoved field.TypeValueScanner[typeutil.Uint256]
		ClaimedRewardAmountAdded   field.TypeValueScanner[typeutil.Uint256]
		ClaimedRewardAmountRemoved field.TypeValueScanner[typeutil.Uint256]
	}
)

// EventType defines the type for the "event_type" enum field.
type EventType string

// EventTypeStaked is the default value of the EventType enum.
const DefaultEventType = EventTypeStaked

// EventType values.
const (
	EventTypeStaked                   EventType = "staked"
	EventTypeUnstaked                 EventType = "unstaked"
	EventTypeRewardClaimed            EventType = "reward_claimed"
	EventTypeRewardDeposited          EventType = "reward_deposited"
	EventTypeRewardDepositDistributed EventType = "reward_deposit_distributed"
	EventTypeAllRewardsClaimed        EventType = "all_rewards_claimed"
	EventTypeStakePositionTransferred EventType = "stake_position_transferred"
	EventTypeStakePositionReceived    EventType = "stake_position_received"
)

func (et EventType) String() string {
	return string(et)
}

// EventTypeValidator is a validator for the "event_type" field enum values. It is called by the builders before save.
func EventTypeValidator(et EventType) error {
	switch et {
	case EventTypeStaked, EventTypeUnstaked, EventTypeRewardClaimed, EventTypeRewardDeposited, EventTypeRewardDepositDistributed, EventTypeAllRewardsClaimed, EventTypeStakePositionTransferred, EventTypeStakePositionReceived:
		return nil
	default:
		return fmt.Errorf("stakingeventshypertable: invalid enum value for event_type field: %q", et)
	}
}

// OrderOption defines the ordering options for the StakingEventsHyperTable queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTransactionHash orders the results by the transaction_hash field.
func ByTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionHash, opts...).ToFunc()
}

// ByTransactionIndex orders the results by the transaction_index field.
func ByTransactionIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionIndex, opts...).ToFunc()
}

// ByBlockNumber orders the results by the block_number field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByLogIndex orders the results by the log_index field.
func ByLogIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogIndex, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByNftClassAddress orders the results by the nft_class_address field.
func ByNftClassAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNftClassAddress, opts...).ToFunc()
}

// ByAccountEvmAddress orders the results by the account_evm_address field.
func ByAccountEvmAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountEvmAddress, opts...).ToFunc()
}

// ByStakedAmountAdded orders the results by the staked_amount_added field.
func ByStakedAmountAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmountAdded, opts...).ToFunc()
}

// ByStakedAmountRemoved orders the results by the staked_amount_removed field.
func ByStakedAmountRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmountRemoved, opts...).ToFunc()
}

// ByPendingRewardAmountAdded orders the results by the pending_reward_amount_added field.
func ByPendingRewardAmountAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPendingRewardAmountAdded, opts...).ToFunc()
}

// ByPendingRewardAmountRemoved orders the results by the pending_reward_amount_removed field.
func ByPendingRewardAmountRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPendingRewardAmountRemoved, opts...).ToFunc()
}

// ByClaimedRewardAmountAdded orders the results by the claimed_reward_amount_added field.
func ByClaimedRewardAmountAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimedRewardAmountAdded, opts...).ToFunc()
}

// ByClaimedRewardAmountRemoved orders the results by the claimed_reward_amount_removed field.
func ByClaimedRewardAmountRemoved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimedRewardAmountRemoved, opts...).ToFunc()
}

// ByDatetime orders the results by the datetime field.
func ByDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatetime, opts...).ToFunc()
}
