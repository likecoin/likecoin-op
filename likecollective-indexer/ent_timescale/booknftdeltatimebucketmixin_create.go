// Code generated by ent, DO NOT EDIT.

package ent_timescale

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent_timescale/booknftdeltatimebucketmixin"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookNFTDeltaTimeBucketMixinCreate is the builder for creating a BookNFTDeltaTimeBucketMixin entity.
type BookNFTDeltaTimeBucketMixinCreate struct {
	config
	mutation *BookNFTDeltaTimeBucketMixinMutation
	hooks    []Hook
}

// SetEvmAddress sets the "evm_address" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetEvmAddress(v string) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetEvmAddress(v)
	return _c
}

// SetBucket sets the "bucket" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetBucket(v time.Time) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetBucket(v)
	return _c
}

// SetStakedAmount sets the "staked_amount" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetStakedAmount(v typeutil.Uint256) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetStakedAmount(v)
	return _c
}

// SetLastStakedAt sets the "last_staked_at" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetLastStakedAt(v time.Time) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetLastStakedAt(v)
	return _c
}

// SetNumberOfStakers sets the "number_of_stakers" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetNumberOfStakers(v uint64) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetNumberOfStakers(v)
	return _c
}

// SetID sets the "id" field.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SetID(v string) *BookNFTDeltaTimeBucketMixinCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the BookNFTDeltaTimeBucketMixinMutation object of the builder.
func (_c *BookNFTDeltaTimeBucketMixinCreate) Mutation() *BookNFTDeltaTimeBucketMixinMutation {
	return _c.mutation
}

// Save creates the BookNFTDeltaTimeBucketMixin in the database.
func (_c *BookNFTDeltaTimeBucketMixinCreate) Save(ctx context.Context) (*BookNFTDeltaTimeBucketMixin, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BookNFTDeltaTimeBucketMixinCreate) SaveX(ctx context.Context) *BookNFTDeltaTimeBucketMixin {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BookNFTDeltaTimeBucketMixinCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BookNFTDeltaTimeBucketMixinCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BookNFTDeltaTimeBucketMixinCreate) check() error {
	if _, ok := _c.mutation.EvmAddress(); !ok {
		return &ValidationError{Name: "evm_address", err: errors.New(`ent_timescale: missing required field "BookNFTDeltaTimeBucketMixin.evm_address"`)}
	}
	if v, ok := _c.mutation.EvmAddress(); ok {
		if err := booknftdeltatimebucketmixin.EvmAddressValidator(v); err != nil {
			return &ValidationError{Name: "evm_address", err: fmt.Errorf(`ent_timescale: validator failed for field "BookNFTDeltaTimeBucketMixin.evm_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent_timescale: missing required field "BookNFTDeltaTimeBucketMixin.bucket"`)}
	}
	if _, ok := _c.mutation.StakedAmount(); !ok {
		return &ValidationError{Name: "staked_amount", err: errors.New(`ent_timescale: missing required field "BookNFTDeltaTimeBucketMixin.staked_amount"`)}
	}
	if _, ok := _c.mutation.LastStakedAt(); !ok {
		return &ValidationError{Name: "last_staked_at", err: errors.New(`ent_timescale: missing required field "BookNFTDeltaTimeBucketMixin.last_staked_at"`)}
	}
	if _, ok := _c.mutation.NumberOfStakers(); !ok {
		return &ValidationError{Name: "number_of_stakers", err: errors.New(`ent_timescale: missing required field "BookNFTDeltaTimeBucketMixin.number_of_stakers"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := booknftdeltatimebucketmixin.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent_timescale: validator failed for field "BookNFTDeltaTimeBucketMixin.id": %w`, err)}
		}
	}
	return nil
}

func (_c *BookNFTDeltaTimeBucketMixinCreate) sqlSave(ctx context.Context) (*BookNFTDeltaTimeBucketMixin, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BookNFTDeltaTimeBucketMixin.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BookNFTDeltaTimeBucketMixinCreate) createSpec() (*BookNFTDeltaTimeBucketMixin, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BookNFTDeltaTimeBucketMixin{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(booknftdeltatimebucketmixin.Table, sqlgraph.NewFieldSpec(booknftdeltatimebucketmixin.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.EvmAddress(); ok {
		_spec.SetField(booknftdeltatimebucketmixin.FieldEvmAddress, field.TypeString, value)
		_node.EvmAddress = value
	}
	if value, ok := _c.mutation.Bucket(); ok {
		_spec.SetField(booknftdeltatimebucketmixin.FieldBucket, field.TypeTime, value)
		_node.Bucket = value
	}
	if value, ok := _c.mutation.StakedAmount(); ok {
		vv, err := booknftdeltatimebucketmixin.ValueScanner.StakedAmount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(booknftdeltatimebucketmixin.FieldStakedAmount, field.TypeUint64, vv)
		_node.StakedAmount = value
	}
	if value, ok := _c.mutation.LastStakedAt(); ok {
		_spec.SetField(booknftdeltatimebucketmixin.FieldLastStakedAt, field.TypeTime, value)
		_node.LastStakedAt = value
	}
	if value, ok := _c.mutation.NumberOfStakers(); ok {
		_spec.SetField(booknftdeltatimebucketmixin.FieldNumberOfStakers, field.TypeUint64, value)
		_node.NumberOfStakers = value
	}
	return _node, _spec, nil
}

// BookNFTDeltaTimeBucketMixinCreateBulk is the builder for creating many BookNFTDeltaTimeBucketMixin entities in bulk.
type BookNFTDeltaTimeBucketMixinCreateBulk struct {
	config
	err      error
	builders []*BookNFTDeltaTimeBucketMixinCreate
}

// Save creates the BookNFTDeltaTimeBucketMixin entities in the database.
func (_c *BookNFTDeltaTimeBucketMixinCreateBulk) Save(ctx context.Context) ([]*BookNFTDeltaTimeBucketMixin, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BookNFTDeltaTimeBucketMixin, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookNFTDeltaTimeBucketMixinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BookNFTDeltaTimeBucketMixinCreateBulk) SaveX(ctx context.Context) []*BookNFTDeltaTimeBucketMixin {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BookNFTDeltaTimeBucketMixinCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BookNFTDeltaTimeBucketMixinCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
