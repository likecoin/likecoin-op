// Code generated by ent, DO NOT EDIT.

package ent_timescale

import (
	"context"
	"errors"
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent_timescale/stakingeventshypertable"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StakingEventsHyperTableCreate is the builder for creating a StakingEventsHyperTable entity.
type StakingEventsHyperTableCreate struct {
	config
	mutation *StakingEventsHyperTableMutation
	hooks    []Hook
}

// SetTransactionHash sets the "transaction_hash" field.
func (_c *StakingEventsHyperTableCreate) SetTransactionHash(v string) *StakingEventsHyperTableCreate {
	_c.mutation.SetTransactionHash(v)
	return _c
}

// SetTransactionIndex sets the "transaction_index" field.
func (_c *StakingEventsHyperTableCreate) SetTransactionIndex(v uint) *StakingEventsHyperTableCreate {
	_c.mutation.SetTransactionIndex(v)
	return _c
}

// SetBlockNumber sets the "block_number" field.
func (_c *StakingEventsHyperTableCreate) SetBlockNumber(v typeutil.Uint64) *StakingEventsHyperTableCreate {
	_c.mutation.SetBlockNumber(v)
	return _c
}

// SetLogIndex sets the "log_index" field.
func (_c *StakingEventsHyperTableCreate) SetLogIndex(v uint) *StakingEventsHyperTableCreate {
	_c.mutation.SetLogIndex(v)
	return _c
}

// SetEventType sets the "event_type" field.
func (_c *StakingEventsHyperTableCreate) SetEventType(v stakingeventshypertable.EventType) *StakingEventsHyperTableCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_c *StakingEventsHyperTableCreate) SetNillableEventType(v *stakingeventshypertable.EventType) *StakingEventsHyperTableCreate {
	if v != nil {
		_c.SetEventType(*v)
	}
	return _c
}

// SetNftClassAddress sets the "nft_class_address" field.
func (_c *StakingEventsHyperTableCreate) SetNftClassAddress(v string) *StakingEventsHyperTableCreate {
	_c.mutation.SetNftClassAddress(v)
	return _c
}

// SetAccountEvmAddress sets the "account_evm_address" field.
func (_c *StakingEventsHyperTableCreate) SetAccountEvmAddress(v string) *StakingEventsHyperTableCreate {
	_c.mutation.SetAccountEvmAddress(v)
	return _c
}

// SetStakedAmountAdded sets the "staked_amount_added" field.
func (_c *StakingEventsHyperTableCreate) SetStakedAmountAdded(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetStakedAmountAdded(v)
	return _c
}

// SetStakedAmountRemoved sets the "staked_amount_removed" field.
func (_c *StakingEventsHyperTableCreate) SetStakedAmountRemoved(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetStakedAmountRemoved(v)
	return _c
}

// SetPendingRewardAmountAdded sets the "pending_reward_amount_added" field.
func (_c *StakingEventsHyperTableCreate) SetPendingRewardAmountAdded(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetPendingRewardAmountAdded(v)
	return _c
}

// SetPendingRewardAmountRemoved sets the "pending_reward_amount_removed" field.
func (_c *StakingEventsHyperTableCreate) SetPendingRewardAmountRemoved(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetPendingRewardAmountRemoved(v)
	return _c
}

// SetClaimedRewardAmountAdded sets the "claimed_reward_amount_added" field.
func (_c *StakingEventsHyperTableCreate) SetClaimedRewardAmountAdded(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetClaimedRewardAmountAdded(v)
	return _c
}

// SetClaimedRewardAmountRemoved sets the "claimed_reward_amount_removed" field.
func (_c *StakingEventsHyperTableCreate) SetClaimedRewardAmountRemoved(v typeutil.Uint256) *StakingEventsHyperTableCreate {
	_c.mutation.SetClaimedRewardAmountRemoved(v)
	return _c
}

// SetDatetime sets the "datetime" field.
func (_c *StakingEventsHyperTableCreate) SetDatetime(v time.Time) *StakingEventsHyperTableCreate {
	_c.mutation.SetDatetime(v)
	return _c
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (_c *StakingEventsHyperTableCreate) SetNillableDatetime(v *time.Time) *StakingEventsHyperTableCreate {
	if v != nil {
		_c.SetDatetime(*v)
	}
	return _c
}

// Mutation returns the StakingEventsHyperTableMutation object of the builder.
func (_c *StakingEventsHyperTableCreate) Mutation() *StakingEventsHyperTableMutation {
	return _c.mutation
}

// Save creates the StakingEventsHyperTable in the database.
func (_c *StakingEventsHyperTableCreate) Save(ctx context.Context) (*StakingEventsHyperTable, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StakingEventsHyperTableCreate) SaveX(ctx context.Context) *StakingEventsHyperTable {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StakingEventsHyperTableCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StakingEventsHyperTableCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StakingEventsHyperTableCreate) defaults() {
	if _, ok := _c.mutation.EventType(); !ok {
		v := stakingeventshypertable.DefaultEventType
		_c.mutation.SetEventType(v)
	}
	if _, ok := _c.mutation.Datetime(); !ok {
		v := stakingeventshypertable.DefaultDatetime
		_c.mutation.SetDatetime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StakingEventsHyperTableCreate) check() error {
	if _, ok := _c.mutation.TransactionHash(); !ok {
		return &ValidationError{Name: "transaction_hash", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.transaction_hash"`)}
	}
	if v, ok := _c.mutation.TransactionHash(); ok {
		if err := stakingeventshypertable.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent_timescale: validator failed for field "StakingEventsHyperTable.transaction_hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TransactionIndex(); !ok {
		return &ValidationError{Name: "transaction_index", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.transaction_index"`)}
	}
	if _, ok := _c.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.block_number"`)}
	}
	if _, ok := _c.mutation.LogIndex(); !ok {
		return &ValidationError{Name: "log_index", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.log_index"`)}
	}
	if _, ok := _c.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.event_type"`)}
	}
	if v, ok := _c.mutation.EventType(); ok {
		if err := stakingeventshypertable.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent_timescale: validator failed for field "StakingEventsHyperTable.event_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.NftClassAddress(); !ok {
		return &ValidationError{Name: "nft_class_address", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.nft_class_address"`)}
	}
	if v, ok := _c.mutation.NftClassAddress(); ok {
		if err := stakingeventshypertable.NftClassAddressValidator(v); err != nil {
			return &ValidationError{Name: "nft_class_address", err: fmt.Errorf(`ent_timescale: validator failed for field "StakingEventsHyperTable.nft_class_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AccountEvmAddress(); !ok {
		return &ValidationError{Name: "account_evm_address", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.account_evm_address"`)}
	}
	if v, ok := _c.mutation.AccountEvmAddress(); ok {
		if err := stakingeventshypertable.AccountEvmAddressValidator(v); err != nil {
			return &ValidationError{Name: "account_evm_address", err: fmt.Errorf(`ent_timescale: validator failed for field "StakingEventsHyperTable.account_evm_address": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StakedAmountAdded(); !ok {
		return &ValidationError{Name: "staked_amount_added", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.staked_amount_added"`)}
	}
	if _, ok := _c.mutation.StakedAmountRemoved(); !ok {
		return &ValidationError{Name: "staked_amount_removed", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.staked_amount_removed"`)}
	}
	if _, ok := _c.mutation.PendingRewardAmountAdded(); !ok {
		return &ValidationError{Name: "pending_reward_amount_added", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.pending_reward_amount_added"`)}
	}
	if _, ok := _c.mutation.PendingRewardAmountRemoved(); !ok {
		return &ValidationError{Name: "pending_reward_amount_removed", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.pending_reward_amount_removed"`)}
	}
	if _, ok := _c.mutation.ClaimedRewardAmountAdded(); !ok {
		return &ValidationError{Name: "claimed_reward_amount_added", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.claimed_reward_amount_added"`)}
	}
	if _, ok := _c.mutation.ClaimedRewardAmountRemoved(); !ok {
		return &ValidationError{Name: "claimed_reward_amount_removed", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.claimed_reward_amount_removed"`)}
	}
	if _, ok := _c.mutation.Datetime(); !ok {
		return &ValidationError{Name: "datetime", err: errors.New(`ent_timescale: missing required field "StakingEventsHyperTable.datetime"`)}
	}
	return nil
}

func (_c *StakingEventsHyperTableCreate) sqlSave(ctx context.Context) (*StakingEventsHyperTable, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StakingEventsHyperTableCreate) createSpec() (*StakingEventsHyperTable, *sqlgraph.CreateSpec, error) {
	var (
		_node = &StakingEventsHyperTable{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(stakingeventshypertable.Table, sqlgraph.NewFieldSpec(stakingeventshypertable.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.TransactionHash(); ok {
		_spec.SetField(stakingeventshypertable.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := _c.mutation.TransactionIndex(); ok {
		_spec.SetField(stakingeventshypertable.FieldTransactionIndex, field.TypeUint, value)
		_node.TransactionIndex = value
	}
	if value, ok := _c.mutation.BlockNumber(); ok {
		vv, err := stakingeventshypertable.ValueScanner.BlockNumber.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldBlockNumber, field.TypeUint64, vv)
		_node.BlockNumber = value
	}
	if value, ok := _c.mutation.LogIndex(); ok {
		_spec.SetField(stakingeventshypertable.FieldLogIndex, field.TypeUint, value)
		_node.LogIndex = value
	}
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(stakingeventshypertable.FieldEventType, field.TypeEnum, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.NftClassAddress(); ok {
		_spec.SetField(stakingeventshypertable.FieldNftClassAddress, field.TypeString, value)
		_node.NftClassAddress = value
	}
	if value, ok := _c.mutation.AccountEvmAddress(); ok {
		_spec.SetField(stakingeventshypertable.FieldAccountEvmAddress, field.TypeString, value)
		_node.AccountEvmAddress = value
	}
	if value, ok := _c.mutation.StakedAmountAdded(); ok {
		vv, err := stakingeventshypertable.ValueScanner.StakedAmountAdded.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldStakedAmountAdded, field.TypeUint64, vv)
		_node.StakedAmountAdded = value
	}
	if value, ok := _c.mutation.StakedAmountRemoved(); ok {
		vv, err := stakingeventshypertable.ValueScanner.StakedAmountRemoved.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldStakedAmountRemoved, field.TypeUint64, vv)
		_node.StakedAmountRemoved = value
	}
	if value, ok := _c.mutation.PendingRewardAmountAdded(); ok {
		vv, err := stakingeventshypertable.ValueScanner.PendingRewardAmountAdded.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldPendingRewardAmountAdded, field.TypeUint64, vv)
		_node.PendingRewardAmountAdded = value
	}
	if value, ok := _c.mutation.PendingRewardAmountRemoved(); ok {
		vv, err := stakingeventshypertable.ValueScanner.PendingRewardAmountRemoved.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldPendingRewardAmountRemoved, field.TypeUint64, vv)
		_node.PendingRewardAmountRemoved = value
	}
	if value, ok := _c.mutation.ClaimedRewardAmountAdded(); ok {
		vv, err := stakingeventshypertable.ValueScanner.ClaimedRewardAmountAdded.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldClaimedRewardAmountAdded, field.TypeUint64, vv)
		_node.ClaimedRewardAmountAdded = value
	}
	if value, ok := _c.mutation.ClaimedRewardAmountRemoved(); ok {
		vv, err := stakingeventshypertable.ValueScanner.ClaimedRewardAmountRemoved.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(stakingeventshypertable.FieldClaimedRewardAmountRemoved, field.TypeUint64, vv)
		_node.ClaimedRewardAmountRemoved = value
	}
	if value, ok := _c.mutation.Datetime(); ok {
		_spec.SetField(stakingeventshypertable.FieldDatetime, field.TypeTime, value)
		_node.Datetime = value
	}
	return _node, _spec, nil
}

// StakingEventsHyperTableCreateBulk is the builder for creating many StakingEventsHyperTable entities in bulk.
type StakingEventsHyperTableCreateBulk struct {
	config
	err      error
	builders []*StakingEventsHyperTableCreate
}

// Save creates the StakingEventsHyperTable entities in the database.
func (_c *StakingEventsHyperTableCreateBulk) Save(ctx context.Context) ([]*StakingEventsHyperTable, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StakingEventsHyperTable, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StakingEventsHyperTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StakingEventsHyperTableCreateBulk) SaveX(ctx context.Context) []*StakingEventsHyperTable {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StakingEventsHyperTableCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StakingEventsHyperTableCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
