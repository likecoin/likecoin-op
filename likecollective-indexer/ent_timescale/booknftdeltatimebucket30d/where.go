// Code generated by ent, DO NOT EDIT.

package booknftdeltatimebucket30d

import (
	"likecollective-indexer/ent_timescale/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldContainsFold(FieldID, id))
}

// EvmAddress applies equality check predicate on the "evm_address" field. It's identical to EvmAddressEQ.
func EvmAddress(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldEvmAddress, v))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldBucket, v))
}

// LastStakedAt applies equality check predicate on the "last_staked_at" field. It's identical to LastStakedAtEQ.
func LastStakedAt(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldLastStakedAt, v))
}

// NumberOfStakers applies equality check predicate on the "number_of_stakers" field. It's identical to NumberOfStakersEQ.
func NumberOfStakers(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldNumberOfStakers, v))
}

// EvmAddressEQ applies the EQ predicate on the "evm_address" field.
func EvmAddressEQ(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldEvmAddress, v))
}

// EvmAddressNEQ applies the NEQ predicate on the "evm_address" field.
func EvmAddressNEQ(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNEQ(FieldEvmAddress, v))
}

// EvmAddressIn applies the In predicate on the "evm_address" field.
func EvmAddressIn(vs ...string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldIn(FieldEvmAddress, vs...))
}

// EvmAddressNotIn applies the NotIn predicate on the "evm_address" field.
func EvmAddressNotIn(vs ...string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNotIn(FieldEvmAddress, vs...))
}

// EvmAddressGT applies the GT predicate on the "evm_address" field.
func EvmAddressGT(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGT(FieldEvmAddress, v))
}

// EvmAddressGTE applies the GTE predicate on the "evm_address" field.
func EvmAddressGTE(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGTE(FieldEvmAddress, v))
}

// EvmAddressLT applies the LT predicate on the "evm_address" field.
func EvmAddressLT(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLT(FieldEvmAddress, v))
}

// EvmAddressLTE applies the LTE predicate on the "evm_address" field.
func EvmAddressLTE(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLTE(FieldEvmAddress, v))
}

// EvmAddressContains applies the Contains predicate on the "evm_address" field.
func EvmAddressContains(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldContains(FieldEvmAddress, v))
}

// EvmAddressHasPrefix applies the HasPrefix predicate on the "evm_address" field.
func EvmAddressHasPrefix(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldHasPrefix(FieldEvmAddress, v))
}

// EvmAddressHasSuffix applies the HasSuffix predicate on the "evm_address" field.
func EvmAddressHasSuffix(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldHasSuffix(FieldEvmAddress, v))
}

// EvmAddressEqualFold applies the EqualFold predicate on the "evm_address" field.
func EvmAddressEqualFold(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEqualFold(FieldEvmAddress, v))
}

// EvmAddressContainsFold applies the ContainsFold predicate on the "evm_address" field.
func EvmAddressContainsFold(v string) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldContainsFold(FieldEvmAddress, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLTE(FieldBucket, v))
}

// LastStakedAtEQ applies the EQ predicate on the "last_staked_at" field.
func LastStakedAtEQ(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldLastStakedAt, v))
}

// LastStakedAtNEQ applies the NEQ predicate on the "last_staked_at" field.
func LastStakedAtNEQ(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNEQ(FieldLastStakedAt, v))
}

// LastStakedAtIn applies the In predicate on the "last_staked_at" field.
func LastStakedAtIn(vs ...time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldIn(FieldLastStakedAt, vs...))
}

// LastStakedAtNotIn applies the NotIn predicate on the "last_staked_at" field.
func LastStakedAtNotIn(vs ...time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNotIn(FieldLastStakedAt, vs...))
}

// LastStakedAtGT applies the GT predicate on the "last_staked_at" field.
func LastStakedAtGT(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGT(FieldLastStakedAt, v))
}

// LastStakedAtGTE applies the GTE predicate on the "last_staked_at" field.
func LastStakedAtGTE(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGTE(FieldLastStakedAt, v))
}

// LastStakedAtLT applies the LT predicate on the "last_staked_at" field.
func LastStakedAtLT(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLT(FieldLastStakedAt, v))
}

// LastStakedAtLTE applies the LTE predicate on the "last_staked_at" field.
func LastStakedAtLTE(v time.Time) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLTE(FieldLastStakedAt, v))
}

// NumberOfStakersEQ applies the EQ predicate on the "number_of_stakers" field.
func NumberOfStakersEQ(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldEQ(FieldNumberOfStakers, v))
}

// NumberOfStakersNEQ applies the NEQ predicate on the "number_of_stakers" field.
func NumberOfStakersNEQ(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNEQ(FieldNumberOfStakers, v))
}

// NumberOfStakersIn applies the In predicate on the "number_of_stakers" field.
func NumberOfStakersIn(vs ...uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldIn(FieldNumberOfStakers, vs...))
}

// NumberOfStakersNotIn applies the NotIn predicate on the "number_of_stakers" field.
func NumberOfStakersNotIn(vs ...uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldNotIn(FieldNumberOfStakers, vs...))
}

// NumberOfStakersGT applies the GT predicate on the "number_of_stakers" field.
func NumberOfStakersGT(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGT(FieldNumberOfStakers, v))
}

// NumberOfStakersGTE applies the GTE predicate on the "number_of_stakers" field.
func NumberOfStakersGTE(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldGTE(FieldNumberOfStakers, v))
}

// NumberOfStakersLT applies the LT predicate on the "number_of_stakers" field.
func NumberOfStakersLT(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLT(FieldNumberOfStakers, v))
}

// NumberOfStakersLTE applies the LTE predicate on the "number_of_stakers" field.
func NumberOfStakersLTE(v uint64) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.FieldLTE(FieldNumberOfStakers, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookNFTDeltaTimeBucket30d) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookNFTDeltaTimeBucket30d) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookNFTDeltaTimeBucket30d) predicate.BookNFTDeltaTimeBucket30d {
	return predicate.BookNFTDeltaTimeBucket30d(sql.NotPredicates(p))
}
