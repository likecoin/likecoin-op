// Code generated by ent, DO NOT EDIT.

package booknftdeltatimebucket30d

import (
	"likecollective-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the booknftdeltatimebucket30d type in the database.
	Label = "book_nft_delta_time_bucket30d"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEvmAddress holds the string denoting the evm_address field in the database.
	FieldEvmAddress = "evm_address"
	// FieldBucket holds the string denoting the bucket field in the database.
	FieldBucket = "bucket"
	// FieldStakedAmount holds the string denoting the staked_amount field in the database.
	FieldStakedAmount = "staked_amount"
	// FieldLastStakedAt holds the string denoting the last_staked_at field in the database.
	FieldLastStakedAt = "last_staked_at"
	// FieldNumberOfStakers holds the string denoting the number_of_stakers field in the database.
	FieldNumberOfStakers = "number_of_stakers"
	// Table holds the table name of the booknftdeltatimebucket30d in the database.
	Table = "book_nft_delta_time_bucket_30d"
)

// Columns holds all SQL columns for booknftdeltatimebucket30d fields.
var Columns = []string{
	FieldID,
	FieldEvmAddress,
	FieldBucket,
	FieldStakedAmount,
	FieldLastStakedAt,
	FieldNumberOfStakers,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EvmAddressValidator is a validator for the "evm_address" field. It is called by the builders before save.
	EvmAddressValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
	// ValueScanner of all BookNFTDeltaTimeBucket30d fields.
	ValueScanner struct {
		StakedAmount field.TypeValueScanner[typeutil.Uint256]
	}
)

// OrderOption defines the ordering options for the BookNFTDeltaTimeBucket30d queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEvmAddress orders the results by the evm_address field.
func ByEvmAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvmAddress, opts...).ToFunc()
}

// ByBucket orders the results by the bucket field.
func ByBucket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBucket, opts...).ToFunc()
}

// ByStakedAmount orders the results by the staked_amount field.
func ByStakedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStakedAmount, opts...).ToFunc()
}

// ByLastStakedAt orders the results by the last_staked_at field.
func ByLastStakedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastStakedAt, opts...).ToFunc()
}

// ByNumberOfStakers orders the results by the number_of_stakers field.
func ByNumberOfStakers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberOfStakers, opts...).ToFunc()
}
