// Code generated by ent, DO NOT EDIT.

package ent_timescale

import (
	"fmt"
	"likecollective-indexer/ent/schema/typeutil"
	"likecollective-indexer/ent_timescale/booknftdeltatimebucket7d"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BookNFTDeltaTimeBucket7d is the model entity for the BookNFTDeltaTimeBucket7d schema.
type BookNFTDeltaTimeBucket7d struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// EvmAddress holds the value of the "evm_address" field.
	EvmAddress string `json:"evm_address,omitempty"`
	// Bucket holds the value of the "bucket" field.
	Bucket time.Time `json:"bucket,omitempty"`
	// StakedAmount holds the value of the "staked_amount" field.
	StakedAmount typeutil.Uint256 `json:"staked_amount,omitempty"`
	// LastStakedAt holds the value of the "last_staked_at" field.
	LastStakedAt time.Time `json:"last_staked_at,omitempty"`
	// NumberOfStakers holds the value of the "number_of_stakers" field.
	NumberOfStakers uint64 `json:"number_of_stakers,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookNFTDeltaTimeBucket7d) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case booknftdeltatimebucket7d.FieldNumberOfStakers:
			values[i] = new(sql.NullInt64)
		case booknftdeltatimebucket7d.FieldID, booknftdeltatimebucket7d.FieldEvmAddress:
			values[i] = new(sql.NullString)
		case booknftdeltatimebucket7d.FieldBucket, booknftdeltatimebucket7d.FieldLastStakedAt:
			values[i] = new(sql.NullTime)
		case booknftdeltatimebucket7d.FieldStakedAmount:
			values[i] = booknftdeltatimebucket7d.ValueScanner.StakedAmount.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookNFTDeltaTimeBucket7d fields.
func (_m *BookNFTDeltaTimeBucket7d) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case booknftdeltatimebucket7d.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case booknftdeltatimebucket7d.FieldEvmAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evm_address", values[i])
			} else if value.Valid {
				_m.EvmAddress = value.String
			}
		case booknftdeltatimebucket7d.FieldBucket:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				_m.Bucket = value.Time
			}
		case booknftdeltatimebucket7d.FieldStakedAmount:
			if value, err := booknftdeltatimebucket7d.ValueScanner.StakedAmount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.StakedAmount = value
			}
		case booknftdeltatimebucket7d.FieldLastStakedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_staked_at", values[i])
			} else if value.Valid {
				_m.LastStakedAt = value.Time
			}
		case booknftdeltatimebucket7d.FieldNumberOfStakers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_stakers", values[i])
			} else if value.Valid {
				_m.NumberOfStakers = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookNFTDeltaTimeBucket7d.
// This includes values selected through modifiers, order, etc.
func (_m *BookNFTDeltaTimeBucket7d) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this BookNFTDeltaTimeBucket7d.
// Note that you need to call BookNFTDeltaTimeBucket7d.Unwrap() before calling this method if this BookNFTDeltaTimeBucket7d
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BookNFTDeltaTimeBucket7d) Update() *BookNFTDeltaTimeBucket7dUpdateOne {
	return NewBookNFTDeltaTimeBucket7dClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BookNFTDeltaTimeBucket7d entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BookNFTDeltaTimeBucket7d) Unwrap() *BookNFTDeltaTimeBucket7d {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent_timescale: BookNFTDeltaTimeBucket7d is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BookNFTDeltaTimeBucket7d) String() string {
	var builder strings.Builder
	builder.WriteString("BookNFTDeltaTimeBucket7d(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("evm_address=")
	builder.WriteString(_m.EvmAddress)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(_m.Bucket.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("staked_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.StakedAmount))
	builder.WriteString(", ")
	builder.WriteString("last_staked_at=")
	builder.WriteString(_m.LastStakedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("number_of_stakers=")
	builder.WriteString(fmt.Sprintf("%v", _m.NumberOfStakers))
	builder.WriteByte(')')
	return builder.String()
}

// BookNFTDeltaTimeBucket7ds is a parsable slice of BookNFTDeltaTimeBucket7d.
type BookNFTDeltaTimeBucket7ds []*BookNFTDeltaTimeBucket7d
