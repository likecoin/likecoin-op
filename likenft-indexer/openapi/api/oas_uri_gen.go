// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes ContractLevelMetadataEQ as URI form.
func (s ContractLevelMetadataEQ) EncodeURI(e uri.Encoder) error {
	for k, elem := range s {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	return nil
}

// DecodeURI decodes ContractLevelMetadataEQ from URI form.
func (s *ContractLevelMetadataEQ) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractLevelMetadataEQ to nil")
	}
	m := s.init()
	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		var elem string
		if err := func() error {
			val, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(val)
			if err != nil {
				return err
			}

			elem = c
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractLevelMetadataEQ")
	}

	return nil
}

// EncodeURI encodes ContractLevelMetadataNEQ as URI form.
func (s ContractLevelMetadataNEQ) EncodeURI(e uri.Encoder) error {
	for k, elem := range s {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	return nil
}

// DecodeURI decodes ContractLevelMetadataNEQ from URI form.
func (s *ContractLevelMetadataNEQ) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractLevelMetadataNEQ to nil")
	}
	m := s.init()
	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		var elem string
		if err := func() error {
			val, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(val)
			if err != nil {
				return err
			}

			elem = c
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractLevelMetadataNEQ")
	}

	return nil
}
