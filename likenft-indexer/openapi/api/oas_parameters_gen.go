// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AccountByBookNFTParams is parameters of accountByBookNFT operation.
type AccountByBookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
}

func unpackAccountByBookNFTParams(packed middleware.Parameters) (params AccountByBookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeAccountByBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountByBookNFTParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTParams is parameters of bookNFT operation.
type BookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
}

func unpackBookNFTParams(packed middleware.Parameters) (params BookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNFTParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTsParams is parameters of bookNFTs operation.
type BookNFTsParams struct {
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackBookNFTsParams(packed middleware.Parameters) (params BookNFTsParams) {
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeBookNFTsParams(args [0]string, argsEscaped bool, r *http.Request) (params BookNFTsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTsByAccountParams is parameters of bookNFTsByAccount operation.
type BookNFTsByAccountParams struct {
	// Evm_address of the Account.
	EvmAddress string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackBookNFTsByAccountParams(packed middleware.Parameters) (params BookNFTsByAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeBookNFTsByAccountParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNFTsByAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EvmAddress = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsParams is parameters of events operation.
type EventsParams struct {
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
}

func unpackEventsParams(packed middleware.Parameters) (params EventsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeEventsParams(args [0]string, argsEscaped bool, r *http.Request) (params EventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsByAddressParams is parameters of eventsByAddress operation.
type EventsByAddressParams struct {
	// Contract address.
	Address string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
}

func unpackEventsByAddressParams(packed middleware.Parameters) (params EventsByAddressParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeEventsByAddressParams(args [1]string, argsEscaped bool, r *http.Request) (params EventsByAddressParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsByAddressAndSignatureParams is parameters of eventsByAddressAndSignature operation.
type EventsByAddressAndSignatureParams struct {
	// Contract address.
	Address string
	// Event signature.
	Signature string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
}

func unpackEventsByAddressAndSignatureParams(packed middleware.Parameters) (params EventsByAddressAndSignatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "signature",
			In:   "path",
		}
		params.Signature = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeEventsByAddressAndSignatureParams(args [2]string, argsEscaped bool, r *http.Request) (params EventsByAddressAndSignatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: signature.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "signature",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Signature = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "signature",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TokenParams is parameters of token operation.
type TokenParams struct {
	// Evm address of the BookNFT.
	BooknftID string
	// Token id of the token.
	TokenID Uint64
}

func unpackTokenParams(packed middleware.Parameters) (params TokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "booknft_id",
			In:   "path",
		}
		params.BooknftID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "token_id",
			In:   "path",
		}
		params.TokenID = packed[key].(Uint64)
	}
	return params
}

func decodeTokenParams(args [2]string, argsEscaped bool, r *http.Request) (params TokenParams, _ error) {
	// Decode path: booknft_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "booknft_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BooknftID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "booknft_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: token_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTokenIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TokenID = Uint64(paramsDotTokenIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TokensByAccountParams is parameters of tokensByAccount operation.
type TokensByAccountParams struct {
	// Evm_address of the Account.
	EvmAddress string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokensByAccountParams(packed middleware.Parameters) (params TokensByAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokensByAccountParams(args [1]string, argsEscaped bool, r *http.Request) (params TokensByAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EvmAddress = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TokensByBookNFTParams is parameters of tokensByBookNFT operation.
type TokensByBookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokensByBookNFTParams(packed middleware.Parameters) (params TokensByBookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokensByBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params TokensByBookNFTParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
