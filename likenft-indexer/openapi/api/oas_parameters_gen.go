// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AccountByBookNFTParams is parameters of accountByBookNFT operation.
type AccountByBookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
}

func unpackAccountByBookNFTParams(packed middleware.Parameters) (params AccountByBookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeAccountByBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountByBookNFTParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTParams is parameters of bookNFT operation.
type BookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
}

func unpackBookNFTParams(packed middleware.Parameters) (params BookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNFTParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTsParams is parameters of bookNFTs operation.
type BookNFTsParams struct {
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackBookNFTsParams(packed middleware.Parameters) (params BookNFTsParams) {
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeBookNFTsParams(args [0]string, argsEscaped bool, r *http.Request) (params BookNFTsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// BookNFTsByAccountParams is parameters of bookNFTsByAccount operation.
type BookNFTsByAccountParams struct {
	// Evm_address of the Account.
	EvmAddress string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackBookNFTsByAccountParams(packed middleware.Parameters) (params BookNFTsByAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeBookNFTsByAccountParams(args [1]string, argsEscaped bool, r *http.Request) (params BookNFTsByAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EvmAddress = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsParams is parameters of events operation.
type EventsParams struct {
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsParams(packed middleware.Parameters) (params EventsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsParams(args [0]string, argsEscaped bool, r *http.Request) (params EventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsByAddressParams is parameters of eventsByAddress operation.
type EventsByAddressParams struct {
	// Contract address.
	Address string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsByAddressParams(packed middleware.Parameters) (params EventsByAddressParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsByAddressParams(args [1]string, argsEscaped bool, r *http.Request) (params EventsByAddressParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EventsByAddressAndSignatureParams is parameters of eventsByAddressAndSignature operation.
type EventsByAddressAndSignatureParams struct {
	// Contract address.
	Address string
	// Event signature.
	Signature string
	// Limit.
	Limit OptInt
	// Page.
	Page OptInt
	// Sort_by.
	SortBy OptEventSortRequestSortBy
	// Sort_order.
	SortOrder OptEventSortRequestSortOrder
	// Filter_block_timestamp.
	FilterBlockTimestamp OptString
	// Filter_block_timestamp_gte.
	FilterBlockTimestampGte OptString
	// Filter_block_timestamp_gt.
	FilterBlockTimestampGt OptString
	// Filter_block_timestamp_lte.
	FilterBlockTimestampLte OptString
	// Filter_block_timestamp_lt.
	FilterBlockTimestampLt OptString
	// Filter_topic_1.
	FilterTopic1 OptString
	// Filter_topic_2.
	FilterTopic2 OptString
	// Filter_topic_3.
	FilterTopic3 OptString
	// Filter_topic_0.
	FilterTopic0 OptString
}

func unpackEventsByAddressAndSignatureParams(packed middleware.Parameters) (params EventsByAddressAndSignatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "path",
		}
		params.Address = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "signature",
			In:   "path",
		}
		params.Signature = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptEventSortRequestSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptEventSortRequestSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestamp = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_gt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampGt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLte = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_block_timestamp_lt",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterBlockTimestampLt = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_1",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic1 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic2 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_3",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic3 = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "filter_topic_0",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FilterTopic0 = v.(OptString)
		}
	}
	return params
}

func decodeEventsByAddressAndSignatureParams(args [2]string, argsEscaped bool, r *http.Request) (params EventsByAddressAndSignatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: signature.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "signature",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Signature = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "signature",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := EventSortRequestSortBy("block_number")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal EventSortRequestSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = EventSortRequestSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := EventSortRequestSortOrder("asc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal EventSortRequestSortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = EventSortRequestSortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestamp.SetTo(paramsDotFilterBlockTimestampVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGte.SetTo(paramsDotFilterBlockTimestampGteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_gt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_gt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampGtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampGtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampGt.SetTo(paramsDotFilterBlockTimestampGtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_gt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLte.SetTo(paramsDotFilterBlockTimestampLteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_block_timestamp_lt.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_block_timestamp_lt",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterBlockTimestampLtVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterBlockTimestampLtVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterBlockTimestampLt.SetTo(paramsDotFilterBlockTimestampLtVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_block_timestamp_lt",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic1Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic1Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic1.SetTo(paramsDotFilterTopic1Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_1",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic2Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic2.SetTo(paramsDotFilterTopic2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_2",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_3.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_3",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic3Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic3Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic3.SetTo(paramsDotFilterTopic3Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_3",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: filter_topic_0.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter_topic_0",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterTopic0Val string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterTopic0Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.FilterTopic0.SetTo(paramsDotFilterTopic0Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filter_topic_0",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBookNFTLatestEventBlockNumberParams is parameters of GetBookNFTLatestEventBlockNumber operation.
type GetBookNFTLatestEventBlockNumberParams struct {
	// Evm address of the BookNFT.
	ID string
}

func unpackGetBookNFTLatestEventBlockNumberParams(packed middleware.Parameters) (params GetBookNFTLatestEventBlockNumberParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGetBookNFTLatestEventBlockNumberParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBookNFTLatestEventBlockNumberParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// IndexActionBookNftBooknftIDPostParams is parameters of POST /index-action/book-nft/{booknft_id} operation.
type IndexActionBookNftBooknftIDPostParams struct {
	// Evm address of the BookNFT.
	BooknftID string
	// Api key.
	XIndexActionAPIKey string
}

func unpackIndexActionBookNftBooknftIDPostParams(packed middleware.Parameters) (params IndexActionBookNftBooknftIDPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "booknft_id",
			In:   "path",
		}
		params.BooknftID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Index-Action-Api-Key",
			In:   "header",
		}
		params.XIndexActionAPIKey = packed[key].(string)
	}
	return params
}

func decodeIndexActionBookNftBooknftIDPostParams(args [1]string, argsEscaped bool, r *http.Request) (params IndexActionBookNftBooknftIDPostParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: booknft_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "booknft_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BooknftID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "booknft_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Index-Action-Api-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Index-Action-Api-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XIndexActionAPIKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Index-Action-Api-Key",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// IndexActionLikeProtocolPostParams is parameters of POST /index-action/like-protocol operation.
type IndexActionLikeProtocolPostParams struct {
	// Api key.
	XIndexActionAPIKey string
}

func unpackIndexActionLikeProtocolPostParams(packed middleware.Parameters) (params IndexActionLikeProtocolPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Index-Action-Api-Key",
			In:   "header",
		}
		params.XIndexActionAPIKey = packed[key].(string)
	}
	return params
}

func decodeIndexActionLikeProtocolPostParams(args [0]string, argsEscaped bool, r *http.Request) (params IndexActionLikeProtocolPostParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Index-Action-Api-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Index-Action-Api-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XIndexActionAPIKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Index-Action-Api-Key",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// TokenParams is parameters of token operation.
type TokenParams struct {
	// Evm address of the BookNFT.
	BooknftID string
	// Token id of the token.
	TokenID Uint64
}

func unpackTokenParams(packed middleware.Parameters) (params TokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "booknft_id",
			In:   "path",
		}
		params.BooknftID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "token_id",
			In:   "path",
		}
		params.TokenID = packed[key].(Uint64)
	}
	return params
}

func decodeTokenParams(args [2]string, argsEscaped bool, r *http.Request) (params TokenParams, _ error) {
	// Decode path: booknft_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "booknft_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BooknftID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "booknft_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: token_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "token_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTokenIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TokenID = Uint64(paramsDotTokenIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TokenAccountsByBookNFTParams is parameters of tokenAccountsByBookNFT operation.
type TokenAccountsByBookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokenAccountsByBookNFTParams(packed middleware.Parameters) (params TokenAccountsByBookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokenAccountsByBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params TokenAccountsByBookNFTParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TokenBookNFTsByAccountParams is parameters of tokenBookNFTsByAccount operation.
type TokenBookNFTsByAccountParams struct {
	// Evm_address of the Account.
	EvmAddress string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokenBookNFTsByAccountParams(packed middleware.Parameters) (params TokenBookNFTsByAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokenBookNFTsByAccountParams(args [1]string, argsEscaped bool, r *http.Request) (params TokenBookNFTsByAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EvmAddress = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TokensByAccountParams is parameters of tokensByAccount operation.
type TokensByAccountParams struct {
	// Evm_address of the Account.
	EvmAddress string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokensByAccountParams(packed middleware.Parameters) (params TokensByAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "evm_address",
			In:   "path",
		}
		params.EvmAddress = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokensByAccountParams(args [1]string, argsEscaped bool, r *http.Request) (params TokensByAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: evm_address.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "evm_address",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EvmAddress = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "evm_address",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TokensByBookNFTParams is parameters of tokensByBookNFT operation.
type TokensByBookNFTParams struct {
	// Evm address of the BookNFT.
	ID string
	// Pagination.limit.
	PaginationLimit OptInt
	// Pagination.key.
	PaginationKey OptInt
	// Reverse.
	Reverse OptBool
}

func unpackTokensByBookNFTParams(packed middleware.Parameters) (params TokensByBookNFTParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationLimit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pagination.key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PaginationKey = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "reverse",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Reverse = v.(OptBool)
		}
	}
	return params
}

func decodeTokensByBookNFTParams(args [1]string, argsEscaped bool, r *http.Request) (params TokensByBookNFTParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: pagination.limit.
	{
		val := int(0)
		params.PaginationLimit.SetTo(val)
	}
	// Decode query: pagination.limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationLimit.SetTo(paramsDotPaginationLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pagination.key.
	{
		val := int(0)
		params.PaginationKey.SetTo(val)
	}
	// Decode query: pagination.key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pagination.key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPaginationKeyVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPaginationKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PaginationKey.SetTo(paramsDotPaginationKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pagination.key",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: reverse.
	{
		val := bool(false)
		params.Reverse.SetTo(val)
	}
	// Decode query: reverse.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reverse",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReverseVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotReverseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Reverse.SetTo(paramsDotReverseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reverse",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
