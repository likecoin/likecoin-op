// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "account/"

				if l := len("account/"); len(elem) >= l && elem[0:l] == "account/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "evm_address"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "booknfts"

						if l := len("booknfts"); len(elem) >= l && elem[0:l] == "booknfts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleBookNFTsByAccountRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 't': // Prefix: "tokens"

						if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleTokensByAccountRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

			case 'b': // Prefix: "booknft"

				if l := len("booknft"); len(elem) >= l && elem[0:l] == "booknft" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleBookNFTRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "account"

							if l := len("account"); len(elem) >= l && elem[0:l] == "account" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAccountByBookNFTRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'l': // Prefix: "latest-event-block-number"

							if l := len("latest-event-block-number"); len(elem) >= l && elem[0:l] == "latest-event-block-number" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBookNFTLatestEventBlockNumberRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 't': // Prefix: "tokens"

							if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleTokensByBookNFTRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/account"

								if l := len("/account"); len(elem) >= l && elem[0:l] == "/account" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleTokenAccountsByBookNFTRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleBookNFTsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'e': // Prefix: "events"

				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleEventsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "address"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleEventsByAddressRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "signature"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleEventsByAddressAndSignatureRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

			case 'i': // Prefix: "index-action/"

				if l := len("index-action/"); len(elem) >= l && elem[0:l] == "index-action/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "book-nft/"

					if l := len("book-nft/"); len(elem) >= l && elem[0:l] == "book-nft/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "booknft_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleIndexActionBookNftBooknftIDPostRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'l': // Prefix: "like-protocol"

					if l := len("like-protocol"); len(elem) >= l && elem[0:l] == "like-protocol" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleIndexActionLikeProtocolPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'l': // Prefix: "likeprotocol/latest-event-block-number"

				if l := len("likeprotocol/latest-event-block-number"); len(elem) >= l && elem[0:l] == "likeprotocol/latest-event-block-number" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetLikeProtocolLatestEventBlockNumberRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 't': // Prefix: "token/"

				if l := len("token/"); len(elem) >= l && elem[0:l] == "token/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "booknft_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "token_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleTokenRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "account/"

				if l := len("account/"); len(elem) >= l && elem[0:l] == "account/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "evm_address"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "booknfts"

						if l := len("booknfts"); len(elem) >= l && elem[0:l] == "booknfts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = BookNFTsByAccountOperation
								r.summary = "Query booknfts by account"
								r.operationID = "bookNFTsByAccount"
								r.pathPattern = "/account/{evm_address}/booknfts"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 't': // Prefix: "tokens"

						if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = TokensByAccountOperation
								r.summary = "Query tokens by account"
								r.operationID = "tokensByAccount"
								r.pathPattern = "/account/{evm_address}/tokens"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'b': // Prefix: "booknft"

				if l := len("booknft"); len(elem) >= l && elem[0:l] == "booknft" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = BookNFTOperation
							r.summary = "Query BookNFT"
							r.operationID = "bookNFT"
							r.pathPattern = "/booknft/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "account"

							if l := len("account"); len(elem) >= l && elem[0:l] == "account" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = AccountByBookNFTOperation
									r.summary = "Query account by BookNFT"
									r.operationID = "accountByBookNFT"
									r.pathPattern = "/booknft/{id}/account"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'l': // Prefix: "latest-event-block-number"

							if l := len("latest-event-block-number"); len(elem) >= l && elem[0:l] == "latest-event-block-number" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetBookNFTLatestEventBlockNumberOperation
									r.summary = "Get BookNFT latest event block number"
									r.operationID = "GetBookNFTLatestEventBlockNumber"
									r.pathPattern = "/booknft/{id}/latest-event-block-number"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 't': // Prefix: "tokens"

							if l := len("tokens"); len(elem) >= l && elem[0:l] == "tokens" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = TokensByBookNFTOperation
									r.summary = "Query tokens by BookNFT"
									r.operationID = "tokensByBookNFT"
									r.pathPattern = "/booknft/{id}/tokens"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/account"

								if l := len("/account"); len(elem) >= l && elem[0:l] == "/account" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = TokenAccountsByBookNFTOperation
										r.summary = "Query account holding booknft tokens"
										r.operationID = "tokenAccountsByBookNFT"
										r.pathPattern = "/booknft/{id}/tokens/account"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = BookNFTsOperation
							r.summary = "Query all BookNFTs"
							r.operationID = "bookNFTs"
							r.pathPattern = "/booknfts"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'e': // Prefix: "events"

				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = EventsOperation
						r.summary = "Query events"
						r.operationID = "events"
						r.pathPattern = "/events"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "address"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = EventsByAddressOperation
							r.summary = "Query events"
							r.operationID = "eventsByAddress"
							r.pathPattern = "/events/{address}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "signature"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = EventsByAddressAndSignatureOperation
								r.summary = "Query events"
								r.operationID = "eventsByAddressAndSignature"
								r.pathPattern = "/events/{address}/{signature}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'i': // Prefix: "index-action/"

				if l := len("index-action/"); len(elem) >= l && elem[0:l] == "index-action/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "book-nft/"

					if l := len("book-nft/"); len(elem) >= l && elem[0:l] == "book-nft/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "booknft_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = IndexActionBookNftBooknftIDPostOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/index-action/book-nft/{booknft_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				case 'l': // Prefix: "like-protocol"

					if l := len("like-protocol"); len(elem) >= l && elem[0:l] == "like-protocol" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = IndexActionLikeProtocolPostOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/index-action/like-protocol"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'l': // Prefix: "likeprotocol/latest-event-block-number"

				if l := len("likeprotocol/latest-event-block-number"); len(elem) >= l && elem[0:l] == "likeprotocol/latest-event-block-number" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetLikeProtocolLatestEventBlockNumberOperation
						r.summary = "Get Like Protocol latest event block number"
						r.operationID = "GetLikeProtocolLatestEventBlockNumber"
						r.pathPattern = "/likeprotocol/latest-event-block-number"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 't': // Prefix: "token/"

				if l := len("token/"); len(elem) >= l && elem[0:l] == "token/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "booknft_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "token_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = TokenOperation
							r.summary = "Query token"
							r.operationID = "token"
							r.pathPattern = "/token/{booknft_id}/{token_id}"
							r.args = args
							r.count = 2
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
