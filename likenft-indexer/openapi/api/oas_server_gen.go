// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountByBookNFT implements accountByBookNFT operation.
	//
	// Query account by BookNFT.
	//
	// GET /booknft/{id}/account
	AccountByBookNFT(ctx context.Context, params AccountByBookNFTParams) (*AccountByBookNFTOK, error)
	// BookNFT implements bookNFT operation.
	//
	// Query BookNFT.
	//
	// GET /booknft/{id}
	BookNFT(ctx context.Context, params BookNFTParams) (*BookNFT, error)
	// BookNFTs implements bookNFTs operation.
	//
	// Query all BookNFTs.
	//
	// GET /booknfts
	BookNFTs(ctx context.Context, params BookNFTsParams) (*BookNFTsOK, error)
	// BookNFTsByAccount implements bookNFTsByAccount operation.
	//
	// Query booknfts by account.
	//
	// GET /account/{evm_address}/booknfts
	BookNFTsByAccount(ctx context.Context, params BookNFTsByAccountParams) (*BookNFTsByAccountOK, error)
	// Events implements events operation.
	//
	// Query events.
	//
	// GET /events
	Events(ctx context.Context, params EventsParams) (*EventsOK, error)
	// EventsByAddress implements eventsByAddress operation.
	//
	// Query events.
	//
	// GET /events/{address}
	EventsByAddress(ctx context.Context, params EventsByAddressParams) (*EventsByAddressOK, error)
	// EventsByAddressAndSignature implements eventsByAddressAndSignature operation.
	//
	// Query events.
	//
	// GET /events/{address}/{signature}
	EventsByAddressAndSignature(ctx context.Context, params EventsByAddressAndSignatureParams) (*EventsByAddressAndSignatureOK, error)
	// GetBookNFTLatestEventBlockNumber implements GetBookNFTLatestEventBlockNumber operation.
	//
	// Get BookNFT latest event block number.
	//
	// GET /booknft/{id}/latest-event-block-number
	GetBookNFTLatestEventBlockNumber(ctx context.Context, params GetBookNFTLatestEventBlockNumberParams) (*LatestEventBlockNumber, error)
	// GetLikeProtocolLatestEventBlockNumber implements GetLikeProtocolLatestEventBlockNumber operation.
	//
	// Get Like Protocol Latest Event Block Number.
	//
	// GET /likeprotocol/latest-event-block-number
	GetLikeProtocolLatestEventBlockNumber(ctx context.Context) (*LatestEventBlockNumber, error)
	// IndexActionBookNftBooknftIDPost implements POST /index-action/book-nft/{booknft_id} operation.
	//
	// POST /index-action/book-nft/{booknft_id}
	IndexActionBookNftBooknftIDPost(ctx context.Context, params IndexActionBookNftBooknftIDPostParams) (*IndexActionBookNftBooknftIDPostOK, error)
	// IndexActionLikeProtocolPost implements POST /index-action/like-protocol operation.
	//
	// POST /index-action/like-protocol
	IndexActionLikeProtocolPost(ctx context.Context, params IndexActionLikeProtocolPostParams) (*IndexActionLikeProtocolPostOK, error)
	// Token implements token operation.
	//
	// Query token.
	//
	// GET /token/{booknft_id}/{token_id}
	Token(ctx context.Context, params TokenParams) (*NFT, error)
	// TokenAccountsByBookNFT implements tokenAccountsByBookNFT operation.
	//
	// Query token accounts by BookNFT.
	//
	// GET /booknft/{id}/tokens/account
	TokenAccountsByBookNFT(ctx context.Context, params TokenAccountsByBookNFTParams) (*TokenAccountsByBookNFTOK, error)
	// TokensByAccount implements tokensByAccount operation.
	//
	// Query tokens by account.
	//
	// GET /account/{evm_address}/tokens
	TokensByAccount(ctx context.Context, params TokensByAccountParams) (*TokensByAccountOK, error)
	// TokensByBookNFT implements tokensByBookNFT operation.
	//
	// Query tokens by BookNFT.
	//
	// GET /booknft/{id}/tokens
	TokensByBookNFT(ctx context.Context, params TokensByBookNFTParams) (*TokensByBookNFTOK, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
