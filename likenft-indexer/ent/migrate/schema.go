// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "cosmos_address", Type: field.TypeString, Nullable: true},
		{Name: "evm_address", Type: field.TypeString, Unique: true},
		{Name: "likeid", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "account_cosmos_address",
				Unique:  false,
				Columns: []*schema.Column{AccountsColumns[1]},
			},
		},
	}
	// EvmEventsColumns holds the columns for the "evm_events" table.
	EvmEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "transaction_index", Type: field.TypeUint},
		{Name: "chain_id", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "block_hash", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "log_index", Type: field.TypeUint},
		{Name: "address", Type: field.TypeString},
		{Name: "topic0", Type: field.TypeString},
		{Name: "topic0_hex", Type: field.TypeString},
		{Name: "topic1", Type: field.TypeString, Nullable: true},
		{Name: "topic1_hex", Type: field.TypeString, Nullable: true},
		{Name: "topic2", Type: field.TypeString, Nullable: true},
		{Name: "topic2_hex", Type: field.TypeString, Nullable: true},
		{Name: "topic3", Type: field.TypeString, Nullable: true},
		{Name: "topic3_hex", Type: field.TypeString, Nullable: true},
		{Name: "data", Type: field.TypeString, Nullable: true},
		{Name: "data_hex", Type: field.TypeString, Nullable: true},
		{Name: "removed", Type: field.TypeBool},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"received", "skipped", "enqueued", "processing", "processed", "failed"}},
		{Name: "name", Type: field.TypeString},
		{Name: "signature", Type: field.TypeString},
		{Name: "indexed_params", Type: field.TypeJSON},
		{Name: "non_indexed_params", Type: field.TypeJSON},
		{Name: "failed_reason", Type: field.TypeString, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// EvmEventsTable holds the schema information for the "evm_events" table.
	EvmEventsTable = &schema.Table{
		Name:       "evm_events",
		Columns:    EvmEventsColumns,
		PrimaryKey: []*schema.Column{EvmEventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "evmevent_transaction_hash_transaction_index_block_number_log_index",
				Unique:  true,
				Columns: []*schema.Column{EvmEventsColumns[1], EvmEventsColumns[2], EvmEventsColumns[5], EvmEventsColumns[6]},
			},
			{
				Name:    "evmevent_block_number",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[5]},
			},
			{
				Name:    "evmevent_log_index",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[6]},
			},
			{
				Name:    "evmevent_address",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[7]},
			},
			{
				Name:    "evmevent_signature",
				Unique:  false,
				Columns: []*schema.Column{EvmEventsColumns[21]},
			},
		},
	}
	// EvmEventProcessedBlockHeightsColumns holds the columns for the "evm_event_processed_block_heights" table.
	EvmEventProcessedBlockHeightsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "contract_type", Type: field.TypeEnum, Enums: []string{"book_nft", "like_protocol"}},
		{Name: "contract_address", Type: field.TypeString},
		{Name: "event", Type: field.TypeEnum, Enums: []string{"ContractURIUpdated", "NewBookNFT", "OwnershipTransferred", "TransferWithMemo", "Transfer"}},
		{Name: "block_height", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
	}
	// EvmEventProcessedBlockHeightsTable holds the schema information for the "evm_event_processed_block_heights" table.
	EvmEventProcessedBlockHeightsTable = &schema.Table{
		Name:       "evm_event_processed_block_heights",
		Columns:    EvmEventProcessedBlockHeightsColumns,
		PrimaryKey: []*schema.Column{EvmEventProcessedBlockHeightsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "evmeventprocessedblockheight_contract_type_contract_address_event",
				Unique:  true,
				Columns: []*schema.Column{EvmEventProcessedBlockHeightsColumns[1], EvmEventProcessedBlockHeightsColumns[2], EvmEventProcessedBlockHeightsColumns[3]},
			},
		},
	}
	// LikeProtocolsColumns holds the columns for the "like_protocols" table.
	LikeProtocolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "latest_event_block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
	}
	// LikeProtocolsTable holds the schema information for the "like_protocols" table.
	LikeProtocolsTable = &schema.Table{
		Name:       "like_protocols",
		Columns:    LikeProtocolsColumns,
		PrimaryKey: []*schema.Column{LikeProtocolsColumns[0]},
	}
	// NftsColumns holds the columns for the "nfts" table.
	NftsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "contract_address", Type: field.TypeString, Size: 42},
		{Name: "token_id", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "token_uri", Type: field.TypeString, Nullable: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "image_data", Type: field.TypeString, Nullable: true},
		{Name: "external_url", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "attributes", Type: field.TypeJSON, Nullable: true},
		{Name: "background_color", Type: field.TypeString, Nullable: true},
		{Name: "animation_url", Type: field.TypeString, Nullable: true},
		{Name: "youtube_url", Type: field.TypeString, Nullable: true},
		{Name: "owner_address", Type: field.TypeString, Size: 42},
		{Name: "minted_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account_nfts", Type: field.TypeInt, Nullable: true},
		{Name: "nft_class_nfts", Type: field.TypeInt, Nullable: true},
	}
	// NftsTable holds the schema information for the "nfts" table.
	NftsTable = &schema.Table{
		Name:       "nfts",
		Columns:    NftsColumns,
		PrimaryKey: []*schema.Column{NftsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nfts_accounts_nfts",
				Columns:    []*schema.Column{NftsColumns[16]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "nfts_nft_classes_nfts",
				Columns:    []*schema.Column{NftsColumns[17]},
				RefColumns: []*schema.Column{NftClassesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "nft_contract_address_token_id",
				Unique:  true,
				Columns: []*schema.Column{NftsColumns[1], NftsColumns[2]},
			},
			{
				Name:    "nft_owner_address",
				Unique:  false,
				Columns: []*schema.Column{NftsColumns[13]},
			},
		},
	}
	// NftClassesColumns holds the columns for the "nft_classes" table.
	NftClassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "acquire_book_nft_events_weight", Type: field.TypeFloat64, Default: 1},
		{Name: "acquire_book_nft_events_last_processed_time", Type: field.TypeTime, Nullable: true},
		{Name: "acquire_book_nft_events_eta", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "acquire_book_nft_events_status", Type: field.TypeEnum, Nullable: true, Enums: []string{"enqueueing", "enqueued", "enqueue_failed", "processing", "completed", "failed"}},
		{Name: "acquire_book_nft_events_failed_reason", Type: field.TypeString, Nullable: true},
		{Name: "acquire_book_nft_events_failed_count", Type: field.TypeInt, Default: 0},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "symbol", Type: field.TypeString},
		{Name: "owner_address", Type: field.TypeString, Nullable: true},
		{Name: "minter_addresses", Type: field.TypeJSON, Nullable: true},
		{Name: "updater_addresses", Type: field.TypeJSON, Nullable: true},
		{Name: "total_supply", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "max_supply", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "banner_image", Type: field.TypeString},
		{Name: "featured_image", Type: field.TypeString},
		{Name: "deployer_address", Type: field.TypeString},
		{Name: "deployed_block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "latest_event_block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "disabled_for_indexing", Type: field.TypeBool, Default: false},
		{Name: "disabled_for_indexing_reason", Type: field.TypeString, Nullable: true},
		{Name: "minted_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account_nft_classes", Type: field.TypeInt, Nullable: true},
	}
	// NftClassesTable holds the schema information for the "nft_classes" table.
	NftClassesTable = &schema.Table{
		Name:       "nft_classes",
		Columns:    NftClassesColumns,
		PrimaryKey: []*schema.Column{NftClassesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nft_classes_accounts_nft_classes",
				Columns:    []*schema.Column{NftClassesColumns[25]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "nftclass_acquire_book_nft_events_eta",
				Unique:  false,
				Columns: []*schema.Column{NftClassesColumns[3]},
			},
			{
				Name:    "nftclass_acquire_book_nft_events_status",
				Unique:  false,
				Columns: []*schema.Column{NftClassesColumns[4]},
			},
			{
				Name:    "nftclass_owner_address",
				Unique:  false,
				Columns: []*schema.Column{NftClassesColumns[10]},
			},
			{
				Name:    "nftclass_deployer_address",
				Unique:  false,
				Columns: []*schema.Column{NftClassesColumns[18]},
			},
		},
	}
	// TransactionMemosColumns holds the columns for the "transaction_memos" table.
	TransactionMemosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "book_nft_id", Type: field.TypeString},
		{Name: "from", Type: field.TypeString},
		{Name: "to", Type: field.TypeString},
		{Name: "token_id", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
		{Name: "memo", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeUint64, SchemaType: map[string]string{"postgres": "numeric"}},
	}
	// TransactionMemosTable holds the schema information for the "transaction_memos" table.
	TransactionMemosTable = &schema.Table{
		Name:       "transaction_memos",
		Columns:    TransactionMemosColumns,
		PrimaryKey: []*schema.Column{TransactionMemosColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "transactionmemo_transaction_hash_book_nft_id_token_id",
				Unique:  true,
				Columns: []*schema.Column{TransactionMemosColumns[1], TransactionMemosColumns[2], TransactionMemosColumns[5]},
			},
			{
				Name:    "transactionmemo_book_nft_id_token_id",
				Unique:  false,
				Columns: []*schema.Column{TransactionMemosColumns[2], TransactionMemosColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		EvmEventsTable,
		EvmEventProcessedBlockHeightsTable,
		LikeProtocolsTable,
		NftsTable,
		NftClassesTable,
		TransactionMemosTable,
	}
)

func init() {
	EvmEventsTable.Annotation = &entsql.Annotation{}
	EvmEventsTable.Annotation.Checks = map[string]string{
		"uint64_block_number_check": "block_number >= 0",
	}
	EvmEventProcessedBlockHeightsTable.Annotation = &entsql.Annotation{}
	EvmEventProcessedBlockHeightsTable.Annotation.Checks = map[string]string{
		"uint64_block_height_check": "block_height >= 0",
	}
	LikeProtocolsTable.Annotation = &entsql.Annotation{}
	LikeProtocolsTable.Annotation.Checks = map[string]string{
		"uint64_latest_event_block_number_check": "latest_event_block_number >= 0",
	}
	NftsTable.ForeignKeys[0].RefTable = AccountsTable
	NftsTable.ForeignKeys[1].RefTable = NftClassesTable
	NftsTable.Annotation = &entsql.Annotation{
		Table: "nfts",
	}
	NftsTable.Annotation.Checks = map[string]string{
		"uint64_token_id_check": "token_id >= 0",
	}
	NftClassesTable.ForeignKeys[0].RefTable = AccountsTable
	NftClassesTable.Annotation = &entsql.Annotation{}
	NftClassesTable.Annotation.Checks = map[string]string{
		"uint64_deployed_block_number_check":     "deployed_block_number >= 0",
		"uint64_latest_event_block_number_check": "latest_event_block_number >= 0",
		"uint64_max_supply_check":                "max_supply >= 0",
		"uint64_total_supply_check":              "total_supply >= 0",
	}
	TransactionMemosTable.Annotation = &entsql.Annotation{}
	TransactionMemosTable.Annotation.Checks = map[string]string{
		"uint64_block_number_check": "block_number >= 0",
		"uint64_token_id_check":     "token_id >= 0",
	}
}
