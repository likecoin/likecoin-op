// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/evmeventprocessedblockheight"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EVMEventProcessedBlockHeightCreate is the builder for creating a EVMEventProcessedBlockHeight entity.
type EVMEventProcessedBlockHeightCreate struct {
	config
	mutation *EVMEventProcessedBlockHeightMutation
	hooks    []Hook
}

// SetContractType sets the "contract_type" field.
func (eepbhc *EVMEventProcessedBlockHeightCreate) SetContractType(et evmeventprocessedblockheight.ContractType) *EVMEventProcessedBlockHeightCreate {
	eepbhc.mutation.SetContractType(et)
	return eepbhc
}

// SetContractAddress sets the "contract_address" field.
func (eepbhc *EVMEventProcessedBlockHeightCreate) SetContractAddress(s string) *EVMEventProcessedBlockHeightCreate {
	eepbhc.mutation.SetContractAddress(s)
	return eepbhc
}

// SetEvent sets the "event" field.
func (eepbhc *EVMEventProcessedBlockHeightCreate) SetEvent(e evmeventprocessedblockheight.Event) *EVMEventProcessedBlockHeightCreate {
	eepbhc.mutation.SetEvent(e)
	return eepbhc
}

// SetBlockHeight sets the "block_height" field.
func (eepbhc *EVMEventProcessedBlockHeightCreate) SetBlockHeight(t typeutil.Uint64) *EVMEventProcessedBlockHeightCreate {
	eepbhc.mutation.SetBlockHeight(t)
	return eepbhc
}

// Mutation returns the EVMEventProcessedBlockHeightMutation object of the builder.
func (eepbhc *EVMEventProcessedBlockHeightCreate) Mutation() *EVMEventProcessedBlockHeightMutation {
	return eepbhc.mutation
}

// Save creates the EVMEventProcessedBlockHeight in the database.
func (eepbhc *EVMEventProcessedBlockHeightCreate) Save(ctx context.Context) (*EVMEventProcessedBlockHeight, error) {
	return withHooks(ctx, eepbhc.sqlSave, eepbhc.mutation, eepbhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eepbhc *EVMEventProcessedBlockHeightCreate) SaveX(ctx context.Context) *EVMEventProcessedBlockHeight {
	v, err := eepbhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eepbhc *EVMEventProcessedBlockHeightCreate) Exec(ctx context.Context) error {
	_, err := eepbhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eepbhc *EVMEventProcessedBlockHeightCreate) ExecX(ctx context.Context) {
	if err := eepbhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eepbhc *EVMEventProcessedBlockHeightCreate) check() error {
	if _, ok := eepbhc.mutation.ContractType(); !ok {
		return &ValidationError{Name: "contract_type", err: errors.New(`ent: missing required field "EVMEventProcessedBlockHeight.contract_type"`)}
	}
	if v, ok := eepbhc.mutation.ContractType(); ok {
		if err := evmeventprocessedblockheight.ContractTypeValidator(v); err != nil {
			return &ValidationError{Name: "contract_type", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_type": %w`, err)}
		}
	}
	if _, ok := eepbhc.mutation.ContractAddress(); !ok {
		return &ValidationError{Name: "contract_address", err: errors.New(`ent: missing required field "EVMEventProcessedBlockHeight.contract_address"`)}
	}
	if v, ok := eepbhc.mutation.ContractAddress(); ok {
		if err := evmeventprocessedblockheight.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_address": %w`, err)}
		}
	}
	if _, ok := eepbhc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "EVMEventProcessedBlockHeight.event"`)}
	}
	if v, ok := eepbhc.mutation.Event(); ok {
		if err := evmeventprocessedblockheight.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.event": %w`, err)}
		}
	}
	if _, ok := eepbhc.mutation.BlockHeight(); !ok {
		return &ValidationError{Name: "block_height", err: errors.New(`ent: missing required field "EVMEventProcessedBlockHeight.block_height"`)}
	}
	return nil
}

func (eepbhc *EVMEventProcessedBlockHeightCreate) sqlSave(ctx context.Context) (*EVMEventProcessedBlockHeight, error) {
	if err := eepbhc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := eepbhc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, eepbhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eepbhc.mutation.id = &_node.ID
	eepbhc.mutation.done = true
	return _node, nil
}

func (eepbhc *EVMEventProcessedBlockHeightCreate) createSpec() (*EVMEventProcessedBlockHeight, *sqlgraph.CreateSpec, error) {
	var (
		_node = &EVMEventProcessedBlockHeight{config: eepbhc.config}
		_spec = sqlgraph.NewCreateSpec(evmeventprocessedblockheight.Table, sqlgraph.NewFieldSpec(evmeventprocessedblockheight.FieldID, field.TypeInt))
	)
	if value, ok := eepbhc.mutation.ContractType(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractType, field.TypeEnum, value)
		_node.ContractType = value
	}
	if value, ok := eepbhc.mutation.ContractAddress(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractAddress, field.TypeString, value)
		_node.ContractAddress = value
	}
	if value, ok := eepbhc.mutation.Event(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldEvent, field.TypeEnum, value)
		_node.Event = value
	}
	if value, ok := eepbhc.mutation.BlockHeight(); ok {
		vv, err := evmeventprocessedblockheight.ValueScanner.BlockHeight.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(evmeventprocessedblockheight.FieldBlockHeight, field.TypeUint64, vv)
		_node.BlockHeight = value
	}
	return _node, _spec, nil
}

// EVMEventProcessedBlockHeightCreateBulk is the builder for creating many EVMEventProcessedBlockHeight entities in bulk.
type EVMEventProcessedBlockHeightCreateBulk struct {
	config
	err      error
	builders []*EVMEventProcessedBlockHeightCreate
}

// Save creates the EVMEventProcessedBlockHeight entities in the database.
func (eepbhcb *EVMEventProcessedBlockHeightCreateBulk) Save(ctx context.Context) ([]*EVMEventProcessedBlockHeight, error) {
	if eepbhcb.err != nil {
		return nil, eepbhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eepbhcb.builders))
	nodes := make([]*EVMEventProcessedBlockHeight, len(eepbhcb.builders))
	mutators := make([]Mutator, len(eepbhcb.builders))
	for i := range eepbhcb.builders {
		func(i int, root context.Context) {
			builder := eepbhcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EVMEventProcessedBlockHeightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eepbhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eepbhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eepbhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eepbhcb *EVMEventProcessedBlockHeightCreateBulk) SaveX(ctx context.Context) []*EVMEventProcessedBlockHeight {
	v, err := eepbhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eepbhcb *EVMEventProcessedBlockHeightCreateBulk) Exec(ctx context.Context) error {
	_, err := eepbhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eepbhcb *EVMEventProcessedBlockHeightCreateBulk) ExecX(ctx context.Context) {
	if err := eepbhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
