// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"likenft-indexer/ent/likeprotocol"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LikeProtocol is the model entity for the LikeProtocol schema.
type LikeProtocol struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// LatestEventBlockNumber holds the value of the "latest_event_block_number" field.
	LatestEventBlockNumber typeutil.Uint64 `json:"latest_event_block_number,omitempty"`
	selectValues           sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikeProtocol) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case likeprotocol.FieldID:
			values[i] = new(sql.NullInt64)
		case likeprotocol.FieldAddress:
			values[i] = new(sql.NullString)
		case likeprotocol.FieldLatestEventBlockNumber:
			values[i] = likeprotocol.ValueScanner.LatestEventBlockNumber.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikeProtocol fields.
func (lp *LikeProtocol) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likeprotocol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lp.ID = int(value.Int64)
		case likeprotocol.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				lp.Address = value.String
			}
		case likeprotocol.FieldLatestEventBlockNumber:
			if value, err := likeprotocol.ValueScanner.LatestEventBlockNumber.FromValue(values[i]); err != nil {
				return err
			} else {
				lp.LatestEventBlockNumber = value
			}
		default:
			lp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LikeProtocol.
// This includes values selected through modifiers, order, etc.
func (lp *LikeProtocol) Value(name string) (ent.Value, error) {
	return lp.selectValues.Get(name)
}

// Update returns a builder for updating this LikeProtocol.
// Note that you need to call LikeProtocol.Unwrap() before calling this method if this LikeProtocol
// was returned from a transaction, and the transaction was committed or rolled back.
func (lp *LikeProtocol) Update() *LikeProtocolUpdateOne {
	return NewLikeProtocolClient(lp.config).UpdateOne(lp)
}

// Unwrap unwraps the LikeProtocol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lp *LikeProtocol) Unwrap() *LikeProtocol {
	_tx, ok := lp.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikeProtocol is not a transactional entity")
	}
	lp.config.driver = _tx.drv
	return lp
}

// String implements the fmt.Stringer.
func (lp *LikeProtocol) String() string {
	var builder strings.Builder
	builder.WriteString("LikeProtocol(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lp.ID))
	builder.WriteString("address=")
	builder.WriteString(lp.Address)
	builder.WriteString(", ")
	builder.WriteString("latest_event_block_number=")
	builder.WriteString(fmt.Sprintf("%v", lp.LatestEventBlockNumber))
	builder.WriteByte(')')
	return builder.String()
}

// LikeProtocols is a parsable slice of LikeProtocol.
type LikeProtocols []*LikeProtocol
