// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/likeprotocol"
	"likenft-indexer/ent/predicate"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikeProtocolUpdate is the builder for updating LikeProtocol entities.
type LikeProtocolUpdate struct {
	config
	hooks    []Hook
	mutation *LikeProtocolMutation
}

// Where appends a list predicates to the LikeProtocolUpdate builder.
func (lpu *LikeProtocolUpdate) Where(ps ...predicate.LikeProtocol) *LikeProtocolUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetAddress sets the "address" field.
func (lpu *LikeProtocolUpdate) SetAddress(s string) *LikeProtocolUpdate {
	lpu.mutation.SetAddress(s)
	return lpu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lpu *LikeProtocolUpdate) SetNillableAddress(s *string) *LikeProtocolUpdate {
	if s != nil {
		lpu.SetAddress(*s)
	}
	return lpu
}

// SetLatestEventBlockNumber sets the "latest_event_block_number" field.
func (lpu *LikeProtocolUpdate) SetLatestEventBlockNumber(t typeutil.Uint64) *LikeProtocolUpdate {
	lpu.mutation.ResetLatestEventBlockNumber()
	lpu.mutation.SetLatestEventBlockNumber(t)
	return lpu
}

// SetNillableLatestEventBlockNumber sets the "latest_event_block_number" field if the given value is not nil.
func (lpu *LikeProtocolUpdate) SetNillableLatestEventBlockNumber(t *typeutil.Uint64) *LikeProtocolUpdate {
	if t != nil {
		lpu.SetLatestEventBlockNumber(*t)
	}
	return lpu
}

// AddLatestEventBlockNumber adds t to the "latest_event_block_number" field.
func (lpu *LikeProtocolUpdate) AddLatestEventBlockNumber(t typeutil.Uint64) *LikeProtocolUpdate {
	lpu.mutation.AddLatestEventBlockNumber(t)
	return lpu
}

// Mutation returns the LikeProtocolMutation object of the builder.
func (lpu *LikeProtocolUpdate) Mutation() *LikeProtocolMutation {
	return lpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LikeProtocolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lpu.sqlSave, lpu.mutation, lpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LikeProtocolUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LikeProtocolUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LikeProtocolUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpu *LikeProtocolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(likeprotocol.Table, likeprotocol.Columns, sqlgraph.NewFieldSpec(likeprotocol.FieldID, field.TypeInt))
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpu.mutation.Address(); ok {
		_spec.SetField(likeprotocol.FieldAddress, field.TypeString, value)
	}
	if value, ok := lpu.mutation.LatestEventBlockNumber(); ok {
		vv, err := likeprotocol.ValueScanner.LatestEventBlockNumber.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(likeprotocol.FieldLatestEventBlockNumber, field.TypeUint64, vv)
	}
	if value, ok := lpu.mutation.AddedLatestEventBlockNumber(); ok {
		vv, err := likeprotocol.ValueScanner.LatestEventBlockNumber.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(likeprotocol.FieldLatestEventBlockNumber, field.TypeUint64, vv)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likeprotocol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpu.mutation.done = true
	return n, nil
}

// LikeProtocolUpdateOne is the builder for updating a single LikeProtocol entity.
type LikeProtocolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikeProtocolMutation
}

// SetAddress sets the "address" field.
func (lpuo *LikeProtocolUpdateOne) SetAddress(s string) *LikeProtocolUpdateOne {
	lpuo.mutation.SetAddress(s)
	return lpuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lpuo *LikeProtocolUpdateOne) SetNillableAddress(s *string) *LikeProtocolUpdateOne {
	if s != nil {
		lpuo.SetAddress(*s)
	}
	return lpuo
}

// SetLatestEventBlockNumber sets the "latest_event_block_number" field.
func (lpuo *LikeProtocolUpdateOne) SetLatestEventBlockNumber(t typeutil.Uint64) *LikeProtocolUpdateOne {
	lpuo.mutation.ResetLatestEventBlockNumber()
	lpuo.mutation.SetLatestEventBlockNumber(t)
	return lpuo
}

// SetNillableLatestEventBlockNumber sets the "latest_event_block_number" field if the given value is not nil.
func (lpuo *LikeProtocolUpdateOne) SetNillableLatestEventBlockNumber(t *typeutil.Uint64) *LikeProtocolUpdateOne {
	if t != nil {
		lpuo.SetLatestEventBlockNumber(*t)
	}
	return lpuo
}

// AddLatestEventBlockNumber adds t to the "latest_event_block_number" field.
func (lpuo *LikeProtocolUpdateOne) AddLatestEventBlockNumber(t typeutil.Uint64) *LikeProtocolUpdateOne {
	lpuo.mutation.AddLatestEventBlockNumber(t)
	return lpuo
}

// Mutation returns the LikeProtocolMutation object of the builder.
func (lpuo *LikeProtocolUpdateOne) Mutation() *LikeProtocolMutation {
	return lpuo.mutation
}

// Where appends a list predicates to the LikeProtocolUpdate builder.
func (lpuo *LikeProtocolUpdateOne) Where(ps ...predicate.LikeProtocol) *LikeProtocolUpdateOne {
	lpuo.mutation.Where(ps...)
	return lpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LikeProtocolUpdateOne) Select(field string, fields ...string) *LikeProtocolUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LikeProtocol entity.
func (lpuo *LikeProtocolUpdateOne) Save(ctx context.Context) (*LikeProtocol, error) {
	return withHooks(ctx, lpuo.sqlSave, lpuo.mutation, lpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LikeProtocolUpdateOne) SaveX(ctx context.Context) *LikeProtocol {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LikeProtocolUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LikeProtocolUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lpuo *LikeProtocolUpdateOne) sqlSave(ctx context.Context) (_node *LikeProtocol, err error) {
	_spec := sqlgraph.NewUpdateSpec(likeprotocol.Table, likeprotocol.Columns, sqlgraph.NewFieldSpec(likeprotocol.FieldID, field.TypeInt))
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LikeProtocol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likeprotocol.FieldID)
		for _, f := range fields {
			if !likeprotocol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likeprotocol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpuo.mutation.Address(); ok {
		_spec.SetField(likeprotocol.FieldAddress, field.TypeString, value)
	}
	if value, ok := lpuo.mutation.LatestEventBlockNumber(); ok {
		vv, err := likeprotocol.ValueScanner.LatestEventBlockNumber.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(likeprotocol.FieldLatestEventBlockNumber, field.TypeUint64, vv)
	}
	if value, ok := lpuo.mutation.AddedLatestEventBlockNumber(); ok {
		vv, err := likeprotocol.ValueScanner.LatestEventBlockNumber.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(likeprotocol.FieldLatestEventBlockNumber, field.TypeUint64, vv)
	}
	_node = &LikeProtocol{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likeprotocol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpuo.mutation.done = true
	return _node, nil
}
