// Code generated by ent, DO NOT EDIT.

package likeprotocol

import (
	"likenft-indexer/ent/predicate"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldEQ(FieldAddress, v))
}

// LatestEventBlockNumber applies equality check predicate on the "latest_event_block_number" field. It's identical to LatestEventBlockNumberEQ.
func LatestEventBlockNumber(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldEQ(FieldLatestEventBlockNumber, vc), err)
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.FieldContainsFold(FieldAddress, v))
}

// LatestEventBlockNumberEQ applies the EQ predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberEQ(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldEQ(FieldLatestEventBlockNumber, vc), err)
}

// LatestEventBlockNumberNEQ applies the NEQ predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberNEQ(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldNEQ(FieldLatestEventBlockNumber, vc), err)
}

// LatestEventBlockNumberIn applies the In predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberIn(vs ...typeutil.Uint64) predicate.LikeProtocol {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.LatestEventBlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.LikeProtocolOrErr(sql.FieldIn(FieldLatestEventBlockNumber, v...), err)
}

// LatestEventBlockNumberNotIn applies the NotIn predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberNotIn(vs ...typeutil.Uint64) predicate.LikeProtocol {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.LatestEventBlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.LikeProtocolOrErr(sql.FieldNotIn(FieldLatestEventBlockNumber, v...), err)
}

// LatestEventBlockNumberGT applies the GT predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberGT(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldGT(FieldLatestEventBlockNumber, vc), err)
}

// LatestEventBlockNumberGTE applies the GTE predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberGTE(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldGTE(FieldLatestEventBlockNumber, vc), err)
}

// LatestEventBlockNumberLT applies the LT predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberLT(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldLT(FieldLatestEventBlockNumber, vc), err)
}

// LatestEventBlockNumberLTE applies the LTE predicate on the "latest_event_block_number" field.
func LatestEventBlockNumberLTE(v typeutil.Uint64) predicate.LikeProtocol {
	vc, err := ValueScanner.LatestEventBlockNumber.Value(v)
	return predicate.LikeProtocolOrErr(sql.FieldLTE(FieldLatestEventBlockNumber, vc), err)
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LikeProtocol) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LikeProtocol) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LikeProtocol) predicate.LikeProtocol {
	return predicate.LikeProtocol(sql.NotPredicates(p))
}
