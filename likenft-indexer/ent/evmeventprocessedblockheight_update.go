// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/evmeventprocessedblockheight"
	"likenft-indexer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EVMEventProcessedBlockHeightUpdate is the builder for updating EVMEventProcessedBlockHeight entities.
type EVMEventProcessedBlockHeightUpdate struct {
	config
	hooks    []Hook
	mutation *EVMEventProcessedBlockHeightMutation
}

// Where appends a list predicates to the EVMEventProcessedBlockHeightUpdate builder.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) Where(ps ...predicate.EVMEventProcessedBlockHeight) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.Where(ps...)
	return eepbhu
}

// SetContractType sets the "contract_type" field.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetContractType(et evmeventprocessedblockheight.ContractType) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.SetContractType(et)
	return eepbhu
}

// SetNillableContractType sets the "contract_type" field if the given value is not nil.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetNillableContractType(et *evmeventprocessedblockheight.ContractType) *EVMEventProcessedBlockHeightUpdate {
	if et != nil {
		eepbhu.SetContractType(*et)
	}
	return eepbhu
}

// SetContractAddress sets the "contract_address" field.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetContractAddress(s string) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.SetContractAddress(s)
	return eepbhu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetNillableContractAddress(s *string) *EVMEventProcessedBlockHeightUpdate {
	if s != nil {
		eepbhu.SetContractAddress(*s)
	}
	return eepbhu
}

// SetEvent sets the "event" field.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetEvent(e evmeventprocessedblockheight.Event) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.SetEvent(e)
	return eepbhu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetNillableEvent(e *evmeventprocessedblockheight.Event) *EVMEventProcessedBlockHeightUpdate {
	if e != nil {
		eepbhu.SetEvent(*e)
	}
	return eepbhu
}

// SetBlockHeight sets the "block_height" field.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetBlockHeight(u uint64) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.ResetBlockHeight()
	eepbhu.mutation.SetBlockHeight(u)
	return eepbhu
}

// SetNillableBlockHeight sets the "block_height" field if the given value is not nil.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SetNillableBlockHeight(u *uint64) *EVMEventProcessedBlockHeightUpdate {
	if u != nil {
		eepbhu.SetBlockHeight(*u)
	}
	return eepbhu
}

// AddBlockHeight adds u to the "block_height" field.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) AddBlockHeight(u int64) *EVMEventProcessedBlockHeightUpdate {
	eepbhu.mutation.AddBlockHeight(u)
	return eepbhu
}

// Mutation returns the EVMEventProcessedBlockHeightMutation object of the builder.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) Mutation() *EVMEventProcessedBlockHeightMutation {
	return eepbhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eepbhu.sqlSave, eepbhu.mutation, eepbhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) SaveX(ctx context.Context) int {
	affected, err := eepbhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) Exec(ctx context.Context) error {
	_, err := eepbhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) ExecX(ctx context.Context) {
	if err := eepbhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eepbhu *EVMEventProcessedBlockHeightUpdate) check() error {
	if v, ok := eepbhu.mutation.ContractType(); ok {
		if err := evmeventprocessedblockheight.ContractTypeValidator(v); err != nil {
			return &ValidationError{Name: "contract_type", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_type": %w`, err)}
		}
	}
	if v, ok := eepbhu.mutation.ContractAddress(); ok {
		if err := evmeventprocessedblockheight.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_address": %w`, err)}
		}
	}
	if v, ok := eepbhu.mutation.Event(); ok {
		if err := evmeventprocessedblockheight.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.event": %w`, err)}
		}
	}
	return nil
}

func (eepbhu *EVMEventProcessedBlockHeightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eepbhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(evmeventprocessedblockheight.Table, evmeventprocessedblockheight.Columns, sqlgraph.NewFieldSpec(evmeventprocessedblockheight.FieldID, field.TypeInt))
	if ps := eepbhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eepbhu.mutation.ContractType(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractType, field.TypeEnum, value)
	}
	if value, ok := eepbhu.mutation.ContractAddress(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := eepbhu.mutation.Event(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldEvent, field.TypeEnum, value)
	}
	if value, ok := eepbhu.mutation.BlockHeight(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldBlockHeight, field.TypeUint64, value)
	}
	if value, ok := eepbhu.mutation.AddedBlockHeight(); ok {
		_spec.AddField(evmeventprocessedblockheight.FieldBlockHeight, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eepbhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evmeventprocessedblockheight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eepbhu.mutation.done = true
	return n, nil
}

// EVMEventProcessedBlockHeightUpdateOne is the builder for updating a single EVMEventProcessedBlockHeight entity.
type EVMEventProcessedBlockHeightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EVMEventProcessedBlockHeightMutation
}

// SetContractType sets the "contract_type" field.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetContractType(et evmeventprocessedblockheight.ContractType) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.SetContractType(et)
	return eepbhuo
}

// SetNillableContractType sets the "contract_type" field if the given value is not nil.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetNillableContractType(et *evmeventprocessedblockheight.ContractType) *EVMEventProcessedBlockHeightUpdateOne {
	if et != nil {
		eepbhuo.SetContractType(*et)
	}
	return eepbhuo
}

// SetContractAddress sets the "contract_address" field.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetContractAddress(s string) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.SetContractAddress(s)
	return eepbhuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetNillableContractAddress(s *string) *EVMEventProcessedBlockHeightUpdateOne {
	if s != nil {
		eepbhuo.SetContractAddress(*s)
	}
	return eepbhuo
}

// SetEvent sets the "event" field.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetEvent(e evmeventprocessedblockheight.Event) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.SetEvent(e)
	return eepbhuo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetNillableEvent(e *evmeventprocessedblockheight.Event) *EVMEventProcessedBlockHeightUpdateOne {
	if e != nil {
		eepbhuo.SetEvent(*e)
	}
	return eepbhuo
}

// SetBlockHeight sets the "block_height" field.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetBlockHeight(u uint64) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.ResetBlockHeight()
	eepbhuo.mutation.SetBlockHeight(u)
	return eepbhuo
}

// SetNillableBlockHeight sets the "block_height" field if the given value is not nil.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SetNillableBlockHeight(u *uint64) *EVMEventProcessedBlockHeightUpdateOne {
	if u != nil {
		eepbhuo.SetBlockHeight(*u)
	}
	return eepbhuo
}

// AddBlockHeight adds u to the "block_height" field.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) AddBlockHeight(u int64) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.AddBlockHeight(u)
	return eepbhuo
}

// Mutation returns the EVMEventProcessedBlockHeightMutation object of the builder.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) Mutation() *EVMEventProcessedBlockHeightMutation {
	return eepbhuo.mutation
}

// Where appends a list predicates to the EVMEventProcessedBlockHeightUpdate builder.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) Where(ps ...predicate.EVMEventProcessedBlockHeight) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.mutation.Where(ps...)
	return eepbhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) Select(field string, fields ...string) *EVMEventProcessedBlockHeightUpdateOne {
	eepbhuo.fields = append([]string{field}, fields...)
	return eepbhuo
}

// Save executes the query and returns the updated EVMEventProcessedBlockHeight entity.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) Save(ctx context.Context) (*EVMEventProcessedBlockHeight, error) {
	return withHooks(ctx, eepbhuo.sqlSave, eepbhuo.mutation, eepbhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) SaveX(ctx context.Context) *EVMEventProcessedBlockHeight {
	node, err := eepbhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) Exec(ctx context.Context) error {
	_, err := eepbhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) ExecX(ctx context.Context) {
	if err := eepbhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) check() error {
	if v, ok := eepbhuo.mutation.ContractType(); ok {
		if err := evmeventprocessedblockheight.ContractTypeValidator(v); err != nil {
			return &ValidationError{Name: "contract_type", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_type": %w`, err)}
		}
	}
	if v, ok := eepbhuo.mutation.ContractAddress(); ok {
		if err := evmeventprocessedblockheight.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.contract_address": %w`, err)}
		}
	}
	if v, ok := eepbhuo.mutation.Event(); ok {
		if err := evmeventprocessedblockheight.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EVMEventProcessedBlockHeight.event": %w`, err)}
		}
	}
	return nil
}

func (eepbhuo *EVMEventProcessedBlockHeightUpdateOne) sqlSave(ctx context.Context) (_node *EVMEventProcessedBlockHeight, err error) {
	if err := eepbhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evmeventprocessedblockheight.Table, evmeventprocessedblockheight.Columns, sqlgraph.NewFieldSpec(evmeventprocessedblockheight.FieldID, field.TypeInt))
	id, ok := eepbhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EVMEventProcessedBlockHeight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eepbhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evmeventprocessedblockheight.FieldID)
		for _, f := range fields {
			if !evmeventprocessedblockheight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != evmeventprocessedblockheight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eepbhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eepbhuo.mutation.ContractType(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractType, field.TypeEnum, value)
	}
	if value, ok := eepbhuo.mutation.ContractAddress(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := eepbhuo.mutation.Event(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldEvent, field.TypeEnum, value)
	}
	if value, ok := eepbhuo.mutation.BlockHeight(); ok {
		_spec.SetField(evmeventprocessedblockheight.FieldBlockHeight, field.TypeUint64, value)
	}
	if value, ok := eepbhuo.mutation.AddedBlockHeight(); ok {
		_spec.AddField(evmeventprocessedblockheight.FieldBlockHeight, field.TypeUint64, value)
	}
	_node = &EVMEventProcessedBlockHeight{config: eepbhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eepbhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evmeventprocessedblockheight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eepbhuo.mutation.done = true
	return _node, nil
}
