// Code generated by ent, DO NOT EDIT.

package nftclass

import (
	"fmt"
	"likenft-indexer/ent/schema/typeutil"
	"math/big"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the nftclass type in the database.
	Label = "nft_class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAcquireBookNftEventsWeight holds the string denoting the acquire_book_nft_events_weight field in the database.
	FieldAcquireBookNftEventsWeight = "acquire_book_nft_events_weight"
	// FieldAcquireBookNftEventsLastProcessedTime holds the string denoting the acquire_book_nft_events_last_processed_time field in the database.
	FieldAcquireBookNftEventsLastProcessedTime = "acquire_book_nft_events_last_processed_time"
	// FieldAcquireBookNftEventsEta holds the string denoting the acquire_book_nft_events_eta field in the database.
	FieldAcquireBookNftEventsEta = "acquire_book_nft_events_eta"
	// FieldAcquireBookNftEventsStatus holds the string denoting the acquire_book_nft_events_status field in the database.
	FieldAcquireBookNftEventsStatus = "acquire_book_nft_events_status"
	// FieldAcquireBookNftEventsFailedReason holds the string denoting the acquire_book_nft_events_failed_reason field in the database.
	FieldAcquireBookNftEventsFailedReason = "acquire_book_nft_events_failed_reason"
	// FieldAcquireBookNftEventsFailedCount holds the string denoting the acquire_book_nft_events_failed_count field in the database.
	FieldAcquireBookNftEventsFailedCount = "acquire_book_nft_events_failed_count"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldOwnerAddress holds the string denoting the owner_address field in the database.
	FieldOwnerAddress = "owner_address"
	// FieldMinterAddresses holds the string denoting the minter_addresses field in the database.
	FieldMinterAddresses = "minter_addresses"
	// FieldTotalSupply holds the string denoting the total_supply field in the database.
	FieldTotalSupply = "total_supply"
	// FieldMaxSupply holds the string denoting the max_supply field in the database.
	FieldMaxSupply = "max_supply"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldBannerImage holds the string denoting the banner_image field in the database.
	FieldBannerImage = "banner_image"
	// FieldFeaturedImage holds the string denoting the featured_image field in the database.
	FieldFeaturedImage = "featured_image"
	// FieldDeployerAddress holds the string denoting the deployer_address field in the database.
	FieldDeployerAddress = "deployer_address"
	// FieldDeployedBlockNumber holds the string denoting the deployed_block_number field in the database.
	FieldDeployedBlockNumber = "deployed_block_number"
	// FieldLatestEventBlockNumber holds the string denoting the latest_event_block_number field in the database.
	FieldLatestEventBlockNumber = "latest_event_block_number"
	// FieldDisabledForIndexing holds the string denoting the disabled_for_indexing field in the database.
	FieldDisabledForIndexing = "disabled_for_indexing"
	// FieldDisabledForIndexingReason holds the string denoting the disabled_for_indexing_reason field in the database.
	FieldDisabledForIndexingReason = "disabled_for_indexing_reason"
	// FieldMintedAt holds the string denoting the minted_at field in the database.
	FieldMintedAt = "minted_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeNfts holds the string denoting the nfts edge name in mutations.
	EdgeNfts = "nfts"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the nftclass in the database.
	Table = "nft_classes"
	// NftsTable is the table that holds the nfts relation/edge.
	NftsTable = "nfts"
	// NftsInverseTable is the table name for the NFT entity.
	// It exists in this package in order to avoid circular dependency with the "nft" package.
	NftsInverseTable = "nfts"
	// NftsColumn is the table column denoting the nfts relation/edge.
	NftsColumn = "nft_class_nfts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "nft_classes"
	// OwnerInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	OwnerInverseTable = "accounts"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "account_nft_classes"
)

// Columns holds all SQL columns for nftclass fields.
var Columns = []string{
	FieldID,
	FieldAcquireBookNftEventsWeight,
	FieldAcquireBookNftEventsLastProcessedTime,
	FieldAcquireBookNftEventsEta,
	FieldAcquireBookNftEventsStatus,
	FieldAcquireBookNftEventsFailedReason,
	FieldAcquireBookNftEventsFailedCount,
	FieldAddress,
	FieldName,
	FieldSymbol,
	FieldOwnerAddress,
	FieldMinterAddresses,
	FieldTotalSupply,
	FieldMaxSupply,
	FieldMetadata,
	FieldBannerImage,
	FieldFeaturedImage,
	FieldDeployerAddress,
	FieldDeployedBlockNumber,
	FieldLatestEventBlockNumber,
	FieldDisabledForIndexing,
	FieldDisabledForIndexingReason,
	FieldMintedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nft_classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_nft_classes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAcquireBookNftEventsWeight holds the default value on creation for the "acquire_book_nft_events_weight" field.
	DefaultAcquireBookNftEventsWeight float64
	// AcquireBookNftEventsWeightValidator is a validator for the "acquire_book_nft_events_weight" field. It is called by the builders before save.
	AcquireBookNftEventsWeightValidator func(float64) error
	// DefaultAcquireBookNftEventsFailedCount holds the default value on creation for the "acquire_book_nft_events_failed_count" field.
	DefaultAcquireBookNftEventsFailedCount int
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// DeployerAddressValidator is a validator for the "deployer_address" field. It is called by the builders before save.
	DeployerAddressValidator func(string) error
	// DefaultDisabledForIndexing holds the default value on creation for the "disabled_for_indexing" field.
	DefaultDisabledForIndexing bool
	// ValueScanner of all NFTClass fields.
	ValueScanner struct {
		TotalSupply            field.TypeValueScanner[*big.Int]
		MaxSupply              field.TypeValueScanner[typeutil.Uint64]
		DeployedBlockNumber    field.TypeValueScanner[typeutil.Uint64]
		LatestEventBlockNumber field.TypeValueScanner[typeutil.Uint64]
	}
)

// AcquireBookNftEventsStatus defines the type for the "acquire_book_nft_events_status" enum field.
type AcquireBookNftEventsStatus string

// AcquireBookNftEventsStatus values.
const (
	AcquireBookNftEventsStatusEnqueueing    AcquireBookNftEventsStatus = "enqueueing"
	AcquireBookNftEventsStatusEnqueued      AcquireBookNftEventsStatus = "enqueued"
	AcquireBookNftEventsStatusEnqueueFailed AcquireBookNftEventsStatus = "enqueue_failed"
	AcquireBookNftEventsStatusProcessing    AcquireBookNftEventsStatus = "processing"
	AcquireBookNftEventsStatusCompleted     AcquireBookNftEventsStatus = "completed"
	AcquireBookNftEventsStatusFailed        AcquireBookNftEventsStatus = "failed"
)

func (abnes AcquireBookNftEventsStatus) String() string {
	return string(abnes)
}

// AcquireBookNftEventsStatusValidator is a validator for the "acquire_book_nft_events_status" field enum values. It is called by the builders before save.
func AcquireBookNftEventsStatusValidator(abnes AcquireBookNftEventsStatus) error {
	switch abnes {
	case AcquireBookNftEventsStatusEnqueueing, AcquireBookNftEventsStatusEnqueued, AcquireBookNftEventsStatusEnqueueFailed, AcquireBookNftEventsStatusProcessing, AcquireBookNftEventsStatusCompleted, AcquireBookNftEventsStatusFailed:
		return nil
	default:
		return fmt.Errorf("nftclass: invalid enum value for acquire_book_nft_events_status field: %q", abnes)
	}
}

// OrderOption defines the ordering options for the NFTClass queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAcquireBookNftEventsWeight orders the results by the acquire_book_nft_events_weight field.
func ByAcquireBookNftEventsWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsWeight, opts...).ToFunc()
}

// ByAcquireBookNftEventsLastProcessedTime orders the results by the acquire_book_nft_events_last_processed_time field.
func ByAcquireBookNftEventsLastProcessedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsLastProcessedTime, opts...).ToFunc()
}

// ByAcquireBookNftEventsEta orders the results by the acquire_book_nft_events_eta field.
func ByAcquireBookNftEventsEta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsEta, opts...).ToFunc()
}

// ByAcquireBookNftEventsStatus orders the results by the acquire_book_nft_events_status field.
func ByAcquireBookNftEventsStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsStatus, opts...).ToFunc()
}

// ByAcquireBookNftEventsFailedReason orders the results by the acquire_book_nft_events_failed_reason field.
func ByAcquireBookNftEventsFailedReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsFailedReason, opts...).ToFunc()
}

// ByAcquireBookNftEventsFailedCount orders the results by the acquire_book_nft_events_failed_count field.
func ByAcquireBookNftEventsFailedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireBookNftEventsFailedCount, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByOwnerAddress orders the results by the owner_address field.
func ByOwnerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddress, opts...).ToFunc()
}

// ByTotalSupply orders the results by the total_supply field.
func ByTotalSupply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSupply, opts...).ToFunc()
}

// ByMaxSupply orders the results by the max_supply field.
func ByMaxSupply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxSupply, opts...).ToFunc()
}

// ByBannerImage orders the results by the banner_image field.
func ByBannerImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBannerImage, opts...).ToFunc()
}

// ByFeaturedImage orders the results by the featured_image field.
func ByFeaturedImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeaturedImage, opts...).ToFunc()
}

// ByDeployerAddress orders the results by the deployer_address field.
func ByDeployerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployerAddress, opts...).ToFunc()
}

// ByDeployedBlockNumber orders the results by the deployed_block_number field.
func ByDeployedBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployedBlockNumber, opts...).ToFunc()
}

// ByLatestEventBlockNumber orders the results by the latest_event_block_number field.
func ByLatestEventBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatestEventBlockNumber, opts...).ToFunc()
}

// ByDisabledForIndexing orders the results by the disabled_for_indexing field.
func ByDisabledForIndexing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabledForIndexing, opts...).ToFunc()
}

// ByDisabledForIndexingReason orders the results by the disabled_for_indexing_reason field.
func ByDisabledForIndexingReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabledForIndexingReason, opts...).ToFunc()
}

// ByMintedAt orders the results by the minted_at field.
func ByMintedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMintedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNftsCount orders the results by nfts count.
func ByNftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNftsStep(), opts...)
	}
}

// ByNfts orders the results by nfts terms.
func ByNfts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newNftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NftsTable, NftsColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
