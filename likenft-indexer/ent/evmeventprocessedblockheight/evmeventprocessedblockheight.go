// Code generated by ent, DO NOT EDIT.

package evmeventprocessedblockheight

import (
	"fmt"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the evmeventprocessedblockheight type in the database.
	Label = "evm_event_processed_block_height"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContractType holds the string denoting the contract_type field in the database.
	FieldContractType = "contract_type"
	// FieldContractAddress holds the string denoting the contract_address field in the database.
	FieldContractAddress = "contract_address"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldBlockHeight holds the string denoting the block_height field in the database.
	FieldBlockHeight = "block_height"
	// Table holds the table name of the evmeventprocessedblockheight in the database.
	Table = "evm_event_processed_block_heights"
)

// Columns holds all SQL columns for evmeventprocessedblockheight fields.
var Columns = []string{
	FieldID,
	FieldContractType,
	FieldContractAddress,
	FieldEvent,
	FieldBlockHeight,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ContractAddressValidator is a validator for the "contract_address" field. It is called by the builders before save.
	ContractAddressValidator func(string) error
	// ValueScanner of all EVMEventProcessedBlockHeight fields.
	ValueScanner struct {
		BlockHeight field.TypeValueScanner[typeutil.Uint64]
	}
)

// ContractType defines the type for the "contract_type" enum field.
type ContractType string

// ContractType values.
const (
	ContractTypeBookNft      ContractType = "book_nft"
	ContractTypeLikeProtocol ContractType = "like_protocol"
)

func (ct ContractType) String() string {
	return string(ct)
}

// ContractTypeValidator is a validator for the "contract_type" field enum values. It is called by the builders before save.
func ContractTypeValidator(ct ContractType) error {
	switch ct {
	case ContractTypeBookNft, ContractTypeLikeProtocol:
		return nil
	default:
		return fmt.Errorf("evmeventprocessedblockheight: invalid enum value for contract_type field: %q", ct)
	}
}

// Event defines the type for the "event" enum field.
type Event string

// Event values.
const (
	EventContractURIUpdated   Event = "ContractURIUpdated"
	EventNewBookNFT           Event = "NewBookNFT"
	EventOwnershipTransferred Event = "OwnershipTransferred"
	EventTransferWithMemo     Event = "TransferWithMemo"
)

func (e Event) String() string {
	return string(e)
}

// EventValidator is a validator for the "event" field enum values. It is called by the builders before save.
func EventValidator(e Event) error {
	switch e {
	case EventContractURIUpdated, EventNewBookNFT, EventOwnershipTransferred, EventTransferWithMemo:
		return nil
	default:
		return fmt.Errorf("evmeventprocessedblockheight: invalid enum value for event field: %q", e)
	}
}

// OrderOption defines the ordering options for the EVMEventProcessedBlockHeight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContractType orders the results by the contract_type field.
func ByContractType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractType, opts...).ToFunc()
}

// ByContractAddress orders the results by the contract_address field.
func ByContractAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractAddress, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByBlockHeight orders the results by the block_height field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}
