// Code generated by ent, DO NOT EDIT.

package evmeventprocessedblockheight

import (
	"likenft-indexer/ent/predicate"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldLTE(FieldID, id))
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldContractAddress, v))
}

// BlockHeight applies equality check predicate on the "block_height" field. It's identical to BlockHeightEQ.
func BlockHeight(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldEQ(FieldBlockHeight, vc), err)
}

// ContractTypeEQ applies the EQ predicate on the "contract_type" field.
func ContractTypeEQ(v ContractType) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldContractType, v))
}

// ContractTypeNEQ applies the NEQ predicate on the "contract_type" field.
func ContractTypeNEQ(v ContractType) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNEQ(FieldContractType, v))
}

// ContractTypeIn applies the In predicate on the "contract_type" field.
func ContractTypeIn(vs ...ContractType) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldIn(FieldContractType, vs...))
}

// ContractTypeNotIn applies the NotIn predicate on the "contract_type" field.
func ContractTypeNotIn(vs ...ContractType) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNotIn(FieldContractType, vs...))
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldContractAddress, v))
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNEQ(FieldContractAddress, v))
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldIn(FieldContractAddress, vs...))
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNotIn(FieldContractAddress, vs...))
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldGT(FieldContractAddress, v))
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldGTE(FieldContractAddress, v))
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldLT(FieldContractAddress, v))
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldLTE(FieldContractAddress, v))
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldContains(FieldContractAddress, v))
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldHasPrefix(FieldContractAddress, v))
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldHasSuffix(FieldContractAddress, v))
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEqualFold(FieldContractAddress, v))
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldContainsFold(FieldContractAddress, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v Event) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v Event) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...Event) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...Event) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.FieldNotIn(FieldEvent, vs...))
}

// BlockHeightEQ applies the EQ predicate on the "block_height" field.
func BlockHeightEQ(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldEQ(FieldBlockHeight, vc), err)
}

// BlockHeightNEQ applies the NEQ predicate on the "block_height" field.
func BlockHeightNEQ(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldNEQ(FieldBlockHeight, vc), err)
}

// BlockHeightIn applies the In predicate on the "block_height" field.
func BlockHeightIn(vs ...typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockHeight.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldIn(FieldBlockHeight, v...), err)
}

// BlockHeightNotIn applies the NotIn predicate on the "block_height" field.
func BlockHeightNotIn(vs ...typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockHeight.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldNotIn(FieldBlockHeight, v...), err)
}

// BlockHeightGT applies the GT predicate on the "block_height" field.
func BlockHeightGT(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldGT(FieldBlockHeight, vc), err)
}

// BlockHeightGTE applies the GTE predicate on the "block_height" field.
func BlockHeightGTE(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldGTE(FieldBlockHeight, vc), err)
}

// BlockHeightLT applies the LT predicate on the "block_height" field.
func BlockHeightLT(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldLT(FieldBlockHeight, vc), err)
}

// BlockHeightLTE applies the LTE predicate on the "block_height" field.
func BlockHeightLTE(v typeutil.Uint64) predicate.EVMEventProcessedBlockHeight {
	vc, err := ValueScanner.BlockHeight.Value(v)
	return predicate.EVMEventProcessedBlockHeightOrErr(sql.FieldLTE(FieldBlockHeight, vc), err)
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EVMEventProcessedBlockHeight) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EVMEventProcessedBlockHeight) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EVMEventProcessedBlockHeight) predicate.EVMEventProcessedBlockHeight {
	return predicate.EVMEventProcessedBlockHeight(sql.NotPredicates(p))
}
