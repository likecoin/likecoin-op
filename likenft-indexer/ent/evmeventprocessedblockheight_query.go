// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"likenft-indexer/ent/evmeventprocessedblockheight"
	"likenft-indexer/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EVMEventProcessedBlockHeightQuery is the builder for querying EVMEventProcessedBlockHeight entities.
type EVMEventProcessedBlockHeightQuery struct {
	config
	ctx        *QueryContext
	order      []evmeventprocessedblockheight.OrderOption
	inters     []Interceptor
	predicates []predicate.EVMEventProcessedBlockHeight
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EVMEventProcessedBlockHeightQuery builder.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Where(ps ...predicate.EVMEventProcessedBlockHeight) *EVMEventProcessedBlockHeightQuery {
	eepbhq.predicates = append(eepbhq.predicates, ps...)
	return eepbhq
}

// Limit the number of records to be returned by this query.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Limit(limit int) *EVMEventProcessedBlockHeightQuery {
	eepbhq.ctx.Limit = &limit
	return eepbhq
}

// Offset to start from.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Offset(offset int) *EVMEventProcessedBlockHeightQuery {
	eepbhq.ctx.Offset = &offset
	return eepbhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Unique(unique bool) *EVMEventProcessedBlockHeightQuery {
	eepbhq.ctx.Unique = &unique
	return eepbhq
}

// Order specifies how the records should be ordered.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Order(o ...evmeventprocessedblockheight.OrderOption) *EVMEventProcessedBlockHeightQuery {
	eepbhq.order = append(eepbhq.order, o...)
	return eepbhq
}

// First returns the first EVMEventProcessedBlockHeight entity from the query.
// Returns a *NotFoundError when no EVMEventProcessedBlockHeight was found.
func (eepbhq *EVMEventProcessedBlockHeightQuery) First(ctx context.Context) (*EVMEventProcessedBlockHeight, error) {
	nodes, err := eepbhq.Limit(1).All(setContextOp(ctx, eepbhq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{evmeventprocessedblockheight.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) FirstX(ctx context.Context) *EVMEventProcessedBlockHeight {
	node, err := eepbhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EVMEventProcessedBlockHeight ID from the query.
// Returns a *NotFoundError when no EVMEventProcessedBlockHeight ID was found.
func (eepbhq *EVMEventProcessedBlockHeightQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eepbhq.Limit(1).IDs(setContextOp(ctx, eepbhq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{evmeventprocessedblockheight.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) FirstIDX(ctx context.Context) int {
	id, err := eepbhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EVMEventProcessedBlockHeight entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EVMEventProcessedBlockHeight entity is found.
// Returns a *NotFoundError when no EVMEventProcessedBlockHeight entities are found.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Only(ctx context.Context) (*EVMEventProcessedBlockHeight, error) {
	nodes, err := eepbhq.Limit(2).All(setContextOp(ctx, eepbhq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{evmeventprocessedblockheight.Label}
	default:
		return nil, &NotSingularError{evmeventprocessedblockheight.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) OnlyX(ctx context.Context) *EVMEventProcessedBlockHeight {
	node, err := eepbhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EVMEventProcessedBlockHeight ID in the query.
// Returns a *NotSingularError when more than one EVMEventProcessedBlockHeight ID is found.
// Returns a *NotFoundError when no entities are found.
func (eepbhq *EVMEventProcessedBlockHeightQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eepbhq.Limit(2).IDs(setContextOp(ctx, eepbhq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{evmeventprocessedblockheight.Label}
	default:
		err = &NotSingularError{evmeventprocessedblockheight.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) OnlyIDX(ctx context.Context) int {
	id, err := eepbhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EVMEventProcessedBlockHeights.
func (eepbhq *EVMEventProcessedBlockHeightQuery) All(ctx context.Context) ([]*EVMEventProcessedBlockHeight, error) {
	ctx = setContextOp(ctx, eepbhq.ctx, ent.OpQueryAll)
	if err := eepbhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EVMEventProcessedBlockHeight, *EVMEventProcessedBlockHeightQuery]()
	return withInterceptors[[]*EVMEventProcessedBlockHeight](ctx, eepbhq, qr, eepbhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) AllX(ctx context.Context) []*EVMEventProcessedBlockHeight {
	nodes, err := eepbhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EVMEventProcessedBlockHeight IDs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eepbhq.ctx.Unique == nil && eepbhq.path != nil {
		eepbhq.Unique(true)
	}
	ctx = setContextOp(ctx, eepbhq.ctx, ent.OpQueryIDs)
	if err = eepbhq.Select(evmeventprocessedblockheight.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) IDsX(ctx context.Context) []int {
	ids, err := eepbhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eepbhq.ctx, ent.OpQueryCount)
	if err := eepbhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eepbhq, querierCount[*EVMEventProcessedBlockHeightQuery](), eepbhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) CountX(ctx context.Context) int {
	count, err := eepbhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eepbhq.ctx, ent.OpQueryExist)
	switch _, err := eepbhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eepbhq *EVMEventProcessedBlockHeightQuery) ExistX(ctx context.Context) bool {
	exist, err := eepbhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EVMEventProcessedBlockHeightQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Clone() *EVMEventProcessedBlockHeightQuery {
	if eepbhq == nil {
		return nil
	}
	return &EVMEventProcessedBlockHeightQuery{
		config:     eepbhq.config,
		ctx:        eepbhq.ctx.Clone(),
		order:      append([]evmeventprocessedblockheight.OrderOption{}, eepbhq.order...),
		inters:     append([]Interceptor{}, eepbhq.inters...),
		predicates: append([]predicate.EVMEventProcessedBlockHeight{}, eepbhq.predicates...),
		// clone intermediate query.
		sql:  eepbhq.sql.Clone(),
		path: eepbhq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ContractType evmeventprocessedblockheight.ContractType `json:"contract_type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EVMEventProcessedBlockHeight.Query().
//		GroupBy(evmeventprocessedblockheight.FieldContractType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eepbhq *EVMEventProcessedBlockHeightQuery) GroupBy(field string, fields ...string) *EVMEventProcessedBlockHeightGroupBy {
	eepbhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EVMEventProcessedBlockHeightGroupBy{build: eepbhq}
	grbuild.flds = &eepbhq.ctx.Fields
	grbuild.label = evmeventprocessedblockheight.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ContractType evmeventprocessedblockheight.ContractType `json:"contract_type,omitempty"`
//	}
//
//	client.EVMEventProcessedBlockHeight.Query().
//		Select(evmeventprocessedblockheight.FieldContractType).
//		Scan(ctx, &v)
func (eepbhq *EVMEventProcessedBlockHeightQuery) Select(fields ...string) *EVMEventProcessedBlockHeightSelect {
	eepbhq.ctx.Fields = append(eepbhq.ctx.Fields, fields...)
	sbuild := &EVMEventProcessedBlockHeightSelect{EVMEventProcessedBlockHeightQuery: eepbhq}
	sbuild.label = evmeventprocessedblockheight.Label
	sbuild.flds, sbuild.scan = &eepbhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EVMEventProcessedBlockHeightSelect configured with the given aggregations.
func (eepbhq *EVMEventProcessedBlockHeightQuery) Aggregate(fns ...AggregateFunc) *EVMEventProcessedBlockHeightSelect {
	return eepbhq.Select().Aggregate(fns...)
}

func (eepbhq *EVMEventProcessedBlockHeightQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eepbhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eepbhq); err != nil {
				return err
			}
		}
	}
	for _, f := range eepbhq.ctx.Fields {
		if !evmeventprocessedblockheight.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eepbhq.path != nil {
		prev, err := eepbhq.path(ctx)
		if err != nil {
			return err
		}
		eepbhq.sql = prev
	}
	return nil
}

func (eepbhq *EVMEventProcessedBlockHeightQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EVMEventProcessedBlockHeight, error) {
	var (
		nodes = []*EVMEventProcessedBlockHeight{}
		_spec = eepbhq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EVMEventProcessedBlockHeight).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EVMEventProcessedBlockHeight{config: eepbhq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eepbhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (eepbhq *EVMEventProcessedBlockHeightQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eepbhq.querySpec()
	_spec.Node.Columns = eepbhq.ctx.Fields
	if len(eepbhq.ctx.Fields) > 0 {
		_spec.Unique = eepbhq.ctx.Unique != nil && *eepbhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eepbhq.driver, _spec)
}

func (eepbhq *EVMEventProcessedBlockHeightQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(evmeventprocessedblockheight.Table, evmeventprocessedblockheight.Columns, sqlgraph.NewFieldSpec(evmeventprocessedblockheight.FieldID, field.TypeInt))
	_spec.From = eepbhq.sql
	if unique := eepbhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eepbhq.path != nil {
		_spec.Unique = true
	}
	if fields := eepbhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evmeventprocessedblockheight.FieldID)
		for i := range fields {
			if fields[i] != evmeventprocessedblockheight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eepbhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eepbhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eepbhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eepbhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eepbhq *EVMEventProcessedBlockHeightQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eepbhq.driver.Dialect())
	t1 := builder.Table(evmeventprocessedblockheight.Table)
	columns := eepbhq.ctx.Fields
	if len(columns) == 0 {
		columns = evmeventprocessedblockheight.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eepbhq.sql != nil {
		selector = eepbhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eepbhq.ctx.Unique != nil && *eepbhq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eepbhq.predicates {
		p(selector)
	}
	for _, p := range eepbhq.order {
		p(selector)
	}
	if offset := eepbhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eepbhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EVMEventProcessedBlockHeightGroupBy is the group-by builder for EVMEventProcessedBlockHeight entities.
type EVMEventProcessedBlockHeightGroupBy struct {
	selector
	build *EVMEventProcessedBlockHeightQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eepbhgb *EVMEventProcessedBlockHeightGroupBy) Aggregate(fns ...AggregateFunc) *EVMEventProcessedBlockHeightGroupBy {
	eepbhgb.fns = append(eepbhgb.fns, fns...)
	return eepbhgb
}

// Scan applies the selector query and scans the result into the given value.
func (eepbhgb *EVMEventProcessedBlockHeightGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eepbhgb.build.ctx, ent.OpQueryGroupBy)
	if err := eepbhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EVMEventProcessedBlockHeightQuery, *EVMEventProcessedBlockHeightGroupBy](ctx, eepbhgb.build, eepbhgb, eepbhgb.build.inters, v)
}

func (eepbhgb *EVMEventProcessedBlockHeightGroupBy) sqlScan(ctx context.Context, root *EVMEventProcessedBlockHeightQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eepbhgb.fns))
	for _, fn := range eepbhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eepbhgb.flds)+len(eepbhgb.fns))
		for _, f := range *eepbhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eepbhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eepbhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EVMEventProcessedBlockHeightSelect is the builder for selecting fields of EVMEventProcessedBlockHeight entities.
type EVMEventProcessedBlockHeightSelect struct {
	*EVMEventProcessedBlockHeightQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eepbhs *EVMEventProcessedBlockHeightSelect) Aggregate(fns ...AggregateFunc) *EVMEventProcessedBlockHeightSelect {
	eepbhs.fns = append(eepbhs.fns, fns...)
	return eepbhs
}

// Scan applies the selector query and scans the result into the given value.
func (eepbhs *EVMEventProcessedBlockHeightSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eepbhs.ctx, ent.OpQuerySelect)
	if err := eepbhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EVMEventProcessedBlockHeightQuery, *EVMEventProcessedBlockHeightSelect](ctx, eepbhs.EVMEventProcessedBlockHeightQuery, eepbhs, eepbhs.inters, v)
}

func (eepbhs *EVMEventProcessedBlockHeightSelect) sqlScan(ctx context.Context, root *EVMEventProcessedBlockHeightQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eepbhs.fns))
	for _, fn := range eepbhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eepbhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eepbhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
