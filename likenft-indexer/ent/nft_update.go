// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/account"
	"likenft-indexer/ent/nft"
	"likenft-indexer/ent/nftclass"
	"likenft-indexer/ent/predicate"
	"likenft-indexer/ent/schema/typeutil"
	"likenft-indexer/internal/evm/model"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// NFTUpdate is the builder for updating NFT entities.
type NFTUpdate struct {
	config
	hooks    []Hook
	mutation *NFTMutation
}

// Where appends a list predicates to the NFTUpdate builder.
func (nu *NFTUpdate) Where(ps ...predicate.NFT) *NFTUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetContractAddress sets the "contract_address" field.
func (nu *NFTUpdate) SetContractAddress(s string) *NFTUpdate {
	nu.mutation.SetContractAddress(s)
	return nu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableContractAddress(s *string) *NFTUpdate {
	if s != nil {
		nu.SetContractAddress(*s)
	}
	return nu
}

// SetTokenID sets the "token_id" field.
func (nu *NFTUpdate) SetTokenID(t typeutil.Uint64) *NFTUpdate {
	nu.mutation.ResetTokenID()
	nu.mutation.SetTokenID(t)
	return nu
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableTokenID(t *typeutil.Uint64) *NFTUpdate {
	if t != nil {
		nu.SetTokenID(*t)
	}
	return nu
}

// AddTokenID adds t to the "token_id" field.
func (nu *NFTUpdate) AddTokenID(t typeutil.Uint64) *NFTUpdate {
	nu.mutation.AddTokenID(t)
	return nu
}

// SetTokenURI sets the "token_uri" field.
func (nu *NFTUpdate) SetTokenURI(s string) *NFTUpdate {
	nu.mutation.SetTokenURI(s)
	return nu
}

// SetNillableTokenURI sets the "token_uri" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableTokenURI(s *string) *NFTUpdate {
	if s != nil {
		nu.SetTokenURI(*s)
	}
	return nu
}

// ClearTokenURI clears the value of the "token_uri" field.
func (nu *NFTUpdate) ClearTokenURI() *NFTUpdate {
	nu.mutation.ClearTokenURI()
	return nu
}

// SetImage sets the "image" field.
func (nu *NFTUpdate) SetImage(s string) *NFTUpdate {
	nu.mutation.SetImage(s)
	return nu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableImage(s *string) *NFTUpdate {
	if s != nil {
		nu.SetImage(*s)
	}
	return nu
}

// ClearImage clears the value of the "image" field.
func (nu *NFTUpdate) ClearImage() *NFTUpdate {
	nu.mutation.ClearImage()
	return nu
}

// SetImageData sets the "image_data" field.
func (nu *NFTUpdate) SetImageData(s string) *NFTUpdate {
	nu.mutation.SetImageData(s)
	return nu
}

// SetNillableImageData sets the "image_data" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableImageData(s *string) *NFTUpdate {
	if s != nil {
		nu.SetImageData(*s)
	}
	return nu
}

// ClearImageData clears the value of the "image_data" field.
func (nu *NFTUpdate) ClearImageData() *NFTUpdate {
	nu.mutation.ClearImageData()
	return nu
}

// SetExternalURL sets the "external_url" field.
func (nu *NFTUpdate) SetExternalURL(s string) *NFTUpdate {
	nu.mutation.SetExternalURL(s)
	return nu
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableExternalURL(s *string) *NFTUpdate {
	if s != nil {
		nu.SetExternalURL(*s)
	}
	return nu
}

// ClearExternalURL clears the value of the "external_url" field.
func (nu *NFTUpdate) ClearExternalURL() *NFTUpdate {
	nu.mutation.ClearExternalURL()
	return nu
}

// SetDescription sets the "description" field.
func (nu *NFTUpdate) SetDescription(s string) *NFTUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableDescription(s *string) *NFTUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NFTUpdate) ClearDescription() *NFTUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetName sets the "name" field.
func (nu *NFTUpdate) SetName(s string) *NFTUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableName(s *string) *NFTUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// ClearName clears the value of the "name" field.
func (nu *NFTUpdate) ClearName() *NFTUpdate {
	nu.mutation.ClearName()
	return nu
}

// SetAttributes sets the "attributes" field.
func (nu *NFTUpdate) SetAttributes(ma []model.ERC721MetadataAttribute) *NFTUpdate {
	nu.mutation.SetAttributes(ma)
	return nu
}

// AppendAttributes appends ma to the "attributes" field.
func (nu *NFTUpdate) AppendAttributes(ma []model.ERC721MetadataAttribute) *NFTUpdate {
	nu.mutation.AppendAttributes(ma)
	return nu
}

// ClearAttributes clears the value of the "attributes" field.
func (nu *NFTUpdate) ClearAttributes() *NFTUpdate {
	nu.mutation.ClearAttributes()
	return nu
}

// SetBackgroundColor sets the "background_color" field.
func (nu *NFTUpdate) SetBackgroundColor(s string) *NFTUpdate {
	nu.mutation.SetBackgroundColor(s)
	return nu
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableBackgroundColor(s *string) *NFTUpdate {
	if s != nil {
		nu.SetBackgroundColor(*s)
	}
	return nu
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (nu *NFTUpdate) ClearBackgroundColor() *NFTUpdate {
	nu.mutation.ClearBackgroundColor()
	return nu
}

// SetAnimationURL sets the "animation_url" field.
func (nu *NFTUpdate) SetAnimationURL(s string) *NFTUpdate {
	nu.mutation.SetAnimationURL(s)
	return nu
}

// SetNillableAnimationURL sets the "animation_url" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableAnimationURL(s *string) *NFTUpdate {
	if s != nil {
		nu.SetAnimationURL(*s)
	}
	return nu
}

// ClearAnimationURL clears the value of the "animation_url" field.
func (nu *NFTUpdate) ClearAnimationURL() *NFTUpdate {
	nu.mutation.ClearAnimationURL()
	return nu
}

// SetYoutubeURL sets the "youtube_url" field.
func (nu *NFTUpdate) SetYoutubeURL(s string) *NFTUpdate {
	nu.mutation.SetYoutubeURL(s)
	return nu
}

// SetNillableYoutubeURL sets the "youtube_url" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableYoutubeURL(s *string) *NFTUpdate {
	if s != nil {
		nu.SetYoutubeURL(*s)
	}
	return nu
}

// ClearYoutubeURL clears the value of the "youtube_url" field.
func (nu *NFTUpdate) ClearYoutubeURL() *NFTUpdate {
	nu.mutation.ClearYoutubeURL()
	return nu
}

// SetOwnerAddress sets the "owner_address" field.
func (nu *NFTUpdate) SetOwnerAddress(s string) *NFTUpdate {
	nu.mutation.SetOwnerAddress(s)
	return nu
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableOwnerAddress(s *string) *NFTUpdate {
	if s != nil {
		nu.SetOwnerAddress(*s)
	}
	return nu
}

// SetMintedAt sets the "minted_at" field.
func (nu *NFTUpdate) SetMintedAt(t time.Time) *NFTUpdate {
	nu.mutation.SetMintedAt(t)
	return nu
}

// SetNillableMintedAt sets the "minted_at" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableMintedAt(t *time.Time) *NFTUpdate {
	if t != nil {
		nu.SetMintedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NFTUpdate) SetUpdatedAt(t time.Time) *NFTUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableUpdatedAt(t *time.Time) *NFTUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (nu *NFTUpdate) SetOwnerID(id int) *NFTUpdate {
	nu.mutation.SetOwnerID(id)
	return nu
}

// SetNillableOwnerID sets the "owner" edge to the Account entity by ID if the given value is not nil.
func (nu *NFTUpdate) SetNillableOwnerID(id *int) *NFTUpdate {
	if id != nil {
		nu = nu.SetOwnerID(*id)
	}
	return nu
}

// SetOwner sets the "owner" edge to the Account entity.
func (nu *NFTUpdate) SetOwner(a *Account) *NFTUpdate {
	return nu.SetOwnerID(a.ID)
}

// SetClassID sets the "class" edge to the NFTClass entity by ID.
func (nu *NFTUpdate) SetClassID(id int) *NFTUpdate {
	nu.mutation.SetClassID(id)
	return nu
}

// SetNillableClassID sets the "class" edge to the NFTClass entity by ID if the given value is not nil.
func (nu *NFTUpdate) SetNillableClassID(id *int) *NFTUpdate {
	if id != nil {
		nu = nu.SetClassID(*id)
	}
	return nu
}

// SetClass sets the "class" edge to the NFTClass entity.
func (nu *NFTUpdate) SetClass(n *NFTClass) *NFTUpdate {
	return nu.SetClassID(n.ID)
}

// Mutation returns the NFTMutation object of the builder.
func (nu *NFTUpdate) Mutation() *NFTMutation {
	return nu.mutation
}

// ClearOwner clears the "owner" edge to the Account entity.
func (nu *NFTUpdate) ClearOwner() *NFTUpdate {
	nu.mutation.ClearOwner()
	return nu
}

// ClearClass clears the "class" edge to the NFTClass entity.
func (nu *NFTUpdate) ClearClass() *NFTUpdate {
	nu.mutation.ClearClass()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NFTUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NFTUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NFTUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NFTUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NFTUpdate) check() error {
	if v, ok := nu.mutation.ContractAddress(); ok {
		if err := nft.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "NFT.contract_address": %w`, err)}
		}
	}
	if v, ok := nu.mutation.OwnerAddress(); ok {
		if err := nft.OwnerAddressValidator(v); err != nil {
			return &ValidationError{Name: "owner_address", err: fmt.Errorf(`ent: validator failed for field "NFT.owner_address": %w`, err)}
		}
	}
	return nil
}

func (nu *NFTUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nft.Table, nft.Columns, sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.ContractAddress(); ok {
		_spec.SetField(nft.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.TokenID(); ok {
		vv, err := nft.ValueScanner.TokenID.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(nft.FieldTokenID, field.TypeUint64, vv)
	}
	if value, ok := nu.mutation.AddedTokenID(); ok {
		vv, err := nft.ValueScanner.TokenID.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.AddField(nft.FieldTokenID, field.TypeUint64, vv)
	}
	if value, ok := nu.mutation.TokenURI(); ok {
		_spec.SetField(nft.FieldTokenURI, field.TypeString, value)
	}
	if nu.mutation.TokenURICleared() {
		_spec.ClearField(nft.FieldTokenURI, field.TypeString)
	}
	if value, ok := nu.mutation.Image(); ok {
		_spec.SetField(nft.FieldImage, field.TypeString, value)
	}
	if nu.mutation.ImageCleared() {
		_spec.ClearField(nft.FieldImage, field.TypeString)
	}
	if value, ok := nu.mutation.ImageData(); ok {
		_spec.SetField(nft.FieldImageData, field.TypeString, value)
	}
	if nu.mutation.ImageDataCleared() {
		_spec.ClearField(nft.FieldImageData, field.TypeString)
	}
	if value, ok := nu.mutation.ExternalURL(); ok {
		_spec.SetField(nft.FieldExternalURL, field.TypeString, value)
	}
	if nu.mutation.ExternalURLCleared() {
		_spec.ClearField(nft.FieldExternalURL, field.TypeString)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(nft.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(nft.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(nft.FieldName, field.TypeString, value)
	}
	if nu.mutation.NameCleared() {
		_spec.ClearField(nft.FieldName, field.TypeString)
	}
	if value, ok := nu.mutation.Attributes(); ok {
		_spec.SetField(nft.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedAttributes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nft.FieldAttributes, value)
		})
	}
	if nu.mutation.AttributesCleared() {
		_spec.ClearField(nft.FieldAttributes, field.TypeJSON)
	}
	if value, ok := nu.mutation.BackgroundColor(); ok {
		_spec.SetField(nft.FieldBackgroundColor, field.TypeString, value)
	}
	if nu.mutation.BackgroundColorCleared() {
		_spec.ClearField(nft.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := nu.mutation.AnimationURL(); ok {
		_spec.SetField(nft.FieldAnimationURL, field.TypeString, value)
	}
	if nu.mutation.AnimationURLCleared() {
		_spec.ClearField(nft.FieldAnimationURL, field.TypeString)
	}
	if value, ok := nu.mutation.YoutubeURL(); ok {
		_spec.SetField(nft.FieldYoutubeURL, field.TypeString, value)
	}
	if nu.mutation.YoutubeURLCleared() {
		_spec.ClearField(nft.FieldYoutubeURL, field.TypeString)
	}
	if value, ok := nu.mutation.OwnerAddress(); ok {
		_spec.SetField(nft.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.MintedAt(); ok {
		_spec.SetField(nft.FieldMintedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(nft.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.ClassTable,
			Columns: []string{nft.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.ClassTable,
			Columns: []string{nft.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NFTUpdateOne is the builder for updating a single NFT entity.
type NFTUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NFTMutation
}

// SetContractAddress sets the "contract_address" field.
func (nuo *NFTUpdateOne) SetContractAddress(s string) *NFTUpdateOne {
	nuo.mutation.SetContractAddress(s)
	return nuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableContractAddress(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetContractAddress(*s)
	}
	return nuo
}

// SetTokenID sets the "token_id" field.
func (nuo *NFTUpdateOne) SetTokenID(t typeutil.Uint64) *NFTUpdateOne {
	nuo.mutation.ResetTokenID()
	nuo.mutation.SetTokenID(t)
	return nuo
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableTokenID(t *typeutil.Uint64) *NFTUpdateOne {
	if t != nil {
		nuo.SetTokenID(*t)
	}
	return nuo
}

// AddTokenID adds t to the "token_id" field.
func (nuo *NFTUpdateOne) AddTokenID(t typeutil.Uint64) *NFTUpdateOne {
	nuo.mutation.AddTokenID(t)
	return nuo
}

// SetTokenURI sets the "token_uri" field.
func (nuo *NFTUpdateOne) SetTokenURI(s string) *NFTUpdateOne {
	nuo.mutation.SetTokenURI(s)
	return nuo
}

// SetNillableTokenURI sets the "token_uri" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableTokenURI(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetTokenURI(*s)
	}
	return nuo
}

// ClearTokenURI clears the value of the "token_uri" field.
func (nuo *NFTUpdateOne) ClearTokenURI() *NFTUpdateOne {
	nuo.mutation.ClearTokenURI()
	return nuo
}

// SetImage sets the "image" field.
func (nuo *NFTUpdateOne) SetImage(s string) *NFTUpdateOne {
	nuo.mutation.SetImage(s)
	return nuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableImage(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetImage(*s)
	}
	return nuo
}

// ClearImage clears the value of the "image" field.
func (nuo *NFTUpdateOne) ClearImage() *NFTUpdateOne {
	nuo.mutation.ClearImage()
	return nuo
}

// SetImageData sets the "image_data" field.
func (nuo *NFTUpdateOne) SetImageData(s string) *NFTUpdateOne {
	nuo.mutation.SetImageData(s)
	return nuo
}

// SetNillableImageData sets the "image_data" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableImageData(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetImageData(*s)
	}
	return nuo
}

// ClearImageData clears the value of the "image_data" field.
func (nuo *NFTUpdateOne) ClearImageData() *NFTUpdateOne {
	nuo.mutation.ClearImageData()
	return nuo
}

// SetExternalURL sets the "external_url" field.
func (nuo *NFTUpdateOne) SetExternalURL(s string) *NFTUpdateOne {
	nuo.mutation.SetExternalURL(s)
	return nuo
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableExternalURL(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetExternalURL(*s)
	}
	return nuo
}

// ClearExternalURL clears the value of the "external_url" field.
func (nuo *NFTUpdateOne) ClearExternalURL() *NFTUpdateOne {
	nuo.mutation.ClearExternalURL()
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NFTUpdateOne) SetDescription(s string) *NFTUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableDescription(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NFTUpdateOne) ClearDescription() *NFTUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetName sets the "name" field.
func (nuo *NFTUpdateOne) SetName(s string) *NFTUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableName(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// ClearName clears the value of the "name" field.
func (nuo *NFTUpdateOne) ClearName() *NFTUpdateOne {
	nuo.mutation.ClearName()
	return nuo
}

// SetAttributes sets the "attributes" field.
func (nuo *NFTUpdateOne) SetAttributes(ma []model.ERC721MetadataAttribute) *NFTUpdateOne {
	nuo.mutation.SetAttributes(ma)
	return nuo
}

// AppendAttributes appends ma to the "attributes" field.
func (nuo *NFTUpdateOne) AppendAttributes(ma []model.ERC721MetadataAttribute) *NFTUpdateOne {
	nuo.mutation.AppendAttributes(ma)
	return nuo
}

// ClearAttributes clears the value of the "attributes" field.
func (nuo *NFTUpdateOne) ClearAttributes() *NFTUpdateOne {
	nuo.mutation.ClearAttributes()
	return nuo
}

// SetBackgroundColor sets the "background_color" field.
func (nuo *NFTUpdateOne) SetBackgroundColor(s string) *NFTUpdateOne {
	nuo.mutation.SetBackgroundColor(s)
	return nuo
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableBackgroundColor(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetBackgroundColor(*s)
	}
	return nuo
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (nuo *NFTUpdateOne) ClearBackgroundColor() *NFTUpdateOne {
	nuo.mutation.ClearBackgroundColor()
	return nuo
}

// SetAnimationURL sets the "animation_url" field.
func (nuo *NFTUpdateOne) SetAnimationURL(s string) *NFTUpdateOne {
	nuo.mutation.SetAnimationURL(s)
	return nuo
}

// SetNillableAnimationURL sets the "animation_url" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableAnimationURL(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetAnimationURL(*s)
	}
	return nuo
}

// ClearAnimationURL clears the value of the "animation_url" field.
func (nuo *NFTUpdateOne) ClearAnimationURL() *NFTUpdateOne {
	nuo.mutation.ClearAnimationURL()
	return nuo
}

// SetYoutubeURL sets the "youtube_url" field.
func (nuo *NFTUpdateOne) SetYoutubeURL(s string) *NFTUpdateOne {
	nuo.mutation.SetYoutubeURL(s)
	return nuo
}

// SetNillableYoutubeURL sets the "youtube_url" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableYoutubeURL(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetYoutubeURL(*s)
	}
	return nuo
}

// ClearYoutubeURL clears the value of the "youtube_url" field.
func (nuo *NFTUpdateOne) ClearYoutubeURL() *NFTUpdateOne {
	nuo.mutation.ClearYoutubeURL()
	return nuo
}

// SetOwnerAddress sets the "owner_address" field.
func (nuo *NFTUpdateOne) SetOwnerAddress(s string) *NFTUpdateOne {
	nuo.mutation.SetOwnerAddress(s)
	return nuo
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableOwnerAddress(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetOwnerAddress(*s)
	}
	return nuo
}

// SetMintedAt sets the "minted_at" field.
func (nuo *NFTUpdateOne) SetMintedAt(t time.Time) *NFTUpdateOne {
	nuo.mutation.SetMintedAt(t)
	return nuo
}

// SetNillableMintedAt sets the "minted_at" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableMintedAt(t *time.Time) *NFTUpdateOne {
	if t != nil {
		nuo.SetMintedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NFTUpdateOne) SetUpdatedAt(t time.Time) *NFTUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableUpdatedAt(t *time.Time) *NFTUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (nuo *NFTUpdateOne) SetOwnerID(id int) *NFTUpdateOne {
	nuo.mutation.SetOwnerID(id)
	return nuo
}

// SetNillableOwnerID sets the "owner" edge to the Account entity by ID if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableOwnerID(id *int) *NFTUpdateOne {
	if id != nil {
		nuo = nuo.SetOwnerID(*id)
	}
	return nuo
}

// SetOwner sets the "owner" edge to the Account entity.
func (nuo *NFTUpdateOne) SetOwner(a *Account) *NFTUpdateOne {
	return nuo.SetOwnerID(a.ID)
}

// SetClassID sets the "class" edge to the NFTClass entity by ID.
func (nuo *NFTUpdateOne) SetClassID(id int) *NFTUpdateOne {
	nuo.mutation.SetClassID(id)
	return nuo
}

// SetNillableClassID sets the "class" edge to the NFTClass entity by ID if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableClassID(id *int) *NFTUpdateOne {
	if id != nil {
		nuo = nuo.SetClassID(*id)
	}
	return nuo
}

// SetClass sets the "class" edge to the NFTClass entity.
func (nuo *NFTUpdateOne) SetClass(n *NFTClass) *NFTUpdateOne {
	return nuo.SetClassID(n.ID)
}

// Mutation returns the NFTMutation object of the builder.
func (nuo *NFTUpdateOne) Mutation() *NFTMutation {
	return nuo.mutation
}

// ClearOwner clears the "owner" edge to the Account entity.
func (nuo *NFTUpdateOne) ClearOwner() *NFTUpdateOne {
	nuo.mutation.ClearOwner()
	return nuo
}

// ClearClass clears the "class" edge to the NFTClass entity.
func (nuo *NFTUpdateOne) ClearClass() *NFTUpdateOne {
	nuo.mutation.ClearClass()
	return nuo
}

// Where appends a list predicates to the NFTUpdate builder.
func (nuo *NFTUpdateOne) Where(ps ...predicate.NFT) *NFTUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NFTUpdateOne) Select(field string, fields ...string) *NFTUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated NFT entity.
func (nuo *NFTUpdateOne) Save(ctx context.Context) (*NFT, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NFTUpdateOne) SaveX(ctx context.Context) *NFT {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NFTUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NFTUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NFTUpdateOne) check() error {
	if v, ok := nuo.mutation.ContractAddress(); ok {
		if err := nft.ContractAddressValidator(v); err != nil {
			return &ValidationError{Name: "contract_address", err: fmt.Errorf(`ent: validator failed for field "NFT.contract_address": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.OwnerAddress(); ok {
		if err := nft.OwnerAddressValidator(v); err != nil {
			return &ValidationError{Name: "owner_address", err: fmt.Errorf(`ent: validator failed for field "NFT.owner_address": %w`, err)}
		}
	}
	return nil
}

func (nuo *NFTUpdateOne) sqlSave(ctx context.Context) (_node *NFT, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nft.Table, nft.Columns, sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NFT.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nft.FieldID)
		for _, f := range fields {
			if !nft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.ContractAddress(); ok {
		_spec.SetField(nft.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.TokenID(); ok {
		vv, err := nft.ValueScanner.TokenID.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(nft.FieldTokenID, field.TypeUint64, vv)
	}
	if value, ok := nuo.mutation.AddedTokenID(); ok {
		vv, err := nft.ValueScanner.TokenID.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.AddField(nft.FieldTokenID, field.TypeUint64, vv)
	}
	if value, ok := nuo.mutation.TokenURI(); ok {
		_spec.SetField(nft.FieldTokenURI, field.TypeString, value)
	}
	if nuo.mutation.TokenURICleared() {
		_spec.ClearField(nft.FieldTokenURI, field.TypeString)
	}
	if value, ok := nuo.mutation.Image(); ok {
		_spec.SetField(nft.FieldImage, field.TypeString, value)
	}
	if nuo.mutation.ImageCleared() {
		_spec.ClearField(nft.FieldImage, field.TypeString)
	}
	if value, ok := nuo.mutation.ImageData(); ok {
		_spec.SetField(nft.FieldImageData, field.TypeString, value)
	}
	if nuo.mutation.ImageDataCleared() {
		_spec.ClearField(nft.FieldImageData, field.TypeString)
	}
	if value, ok := nuo.mutation.ExternalURL(); ok {
		_spec.SetField(nft.FieldExternalURL, field.TypeString, value)
	}
	if nuo.mutation.ExternalURLCleared() {
		_spec.ClearField(nft.FieldExternalURL, field.TypeString)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(nft.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(nft.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(nft.FieldName, field.TypeString, value)
	}
	if nuo.mutation.NameCleared() {
		_spec.ClearField(nft.FieldName, field.TypeString)
	}
	if value, ok := nuo.mutation.Attributes(); ok {
		_spec.SetField(nft.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedAttributes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nft.FieldAttributes, value)
		})
	}
	if nuo.mutation.AttributesCleared() {
		_spec.ClearField(nft.FieldAttributes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.BackgroundColor(); ok {
		_spec.SetField(nft.FieldBackgroundColor, field.TypeString, value)
	}
	if nuo.mutation.BackgroundColorCleared() {
		_spec.ClearField(nft.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := nuo.mutation.AnimationURL(); ok {
		_spec.SetField(nft.FieldAnimationURL, field.TypeString, value)
	}
	if nuo.mutation.AnimationURLCleared() {
		_spec.ClearField(nft.FieldAnimationURL, field.TypeString)
	}
	if value, ok := nuo.mutation.YoutubeURL(); ok {
		_spec.SetField(nft.FieldYoutubeURL, field.TypeString, value)
	}
	if nuo.mutation.YoutubeURLCleared() {
		_spec.ClearField(nft.FieldYoutubeURL, field.TypeString)
	}
	if value, ok := nuo.mutation.OwnerAddress(); ok {
		_spec.SetField(nft.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.MintedAt(); ok {
		_spec.SetField(nft.FieldMintedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(nft.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.ClassTable,
			Columns: []string{nft.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.ClassTable,
			Columns: []string{nft.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NFT{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
