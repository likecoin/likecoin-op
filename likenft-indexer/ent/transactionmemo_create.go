// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/transactionmemo"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionMemoCreate is the builder for creating a TransactionMemo entity.
type TransactionMemoCreate struct {
	config
	mutation *TransactionMemoMutation
	hooks    []Hook
}

// SetTransactionHash sets the "transaction_hash" field.
func (tmc *TransactionMemoCreate) SetTransactionHash(s string) *TransactionMemoCreate {
	tmc.mutation.SetTransactionHash(s)
	return tmc
}

// SetBookNftID sets the "book_nft_id" field.
func (tmc *TransactionMemoCreate) SetBookNftID(s string) *TransactionMemoCreate {
	tmc.mutation.SetBookNftID(s)
	return tmc
}

// SetFrom sets the "from" field.
func (tmc *TransactionMemoCreate) SetFrom(s string) *TransactionMemoCreate {
	tmc.mutation.SetFrom(s)
	return tmc
}

// SetTo sets the "to" field.
func (tmc *TransactionMemoCreate) SetTo(s string) *TransactionMemoCreate {
	tmc.mutation.SetTo(s)
	return tmc
}

// SetTokenID sets the "token_id" field.
func (tmc *TransactionMemoCreate) SetTokenID(u uint64) *TransactionMemoCreate {
	tmc.mutation.SetTokenID(u)
	return tmc
}

// SetMemo sets the "memo" field.
func (tmc *TransactionMemoCreate) SetMemo(s string) *TransactionMemoCreate {
	tmc.mutation.SetMemo(s)
	return tmc
}

// SetBlockNumber sets the "block_number" field.
func (tmc *TransactionMemoCreate) SetBlockNumber(u uint64) *TransactionMemoCreate {
	tmc.mutation.SetBlockNumber(u)
	return tmc
}

// Mutation returns the TransactionMemoMutation object of the builder.
func (tmc *TransactionMemoCreate) Mutation() *TransactionMemoMutation {
	return tmc.mutation
}

// Save creates the TransactionMemo in the database.
func (tmc *TransactionMemoCreate) Save(ctx context.Context) (*TransactionMemo, error) {
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TransactionMemoCreate) SaveX(ctx context.Context) *TransactionMemo {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TransactionMemoCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TransactionMemoCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TransactionMemoCreate) check() error {
	if _, ok := tmc.mutation.TransactionHash(); !ok {
		return &ValidationError{Name: "transaction_hash", err: errors.New(`ent: missing required field "TransactionMemo.transaction_hash"`)}
	}
	if v, ok := tmc.mutation.TransactionHash(); ok {
		if err := transactionmemo.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "TransactionMemo.transaction_hash": %w`, err)}
		}
	}
	if _, ok := tmc.mutation.BookNftID(); !ok {
		return &ValidationError{Name: "book_nft_id", err: errors.New(`ent: missing required field "TransactionMemo.book_nft_id"`)}
	}
	if v, ok := tmc.mutation.BookNftID(); ok {
		if err := transactionmemo.BookNftIDValidator(v); err != nil {
			return &ValidationError{Name: "book_nft_id", err: fmt.Errorf(`ent: validator failed for field "TransactionMemo.book_nft_id": %w`, err)}
		}
	}
	if _, ok := tmc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "TransactionMemo.from"`)}
	}
	if v, ok := tmc.mutation.From(); ok {
		if err := transactionmemo.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "TransactionMemo.from": %w`, err)}
		}
	}
	if _, ok := tmc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "TransactionMemo.to"`)}
	}
	if v, ok := tmc.mutation.To(); ok {
		if err := transactionmemo.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "TransactionMemo.to": %w`, err)}
		}
	}
	if _, ok := tmc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "TransactionMemo.token_id"`)}
	}
	if _, ok := tmc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required field "TransactionMemo.memo"`)}
	}
	if _, ok := tmc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "TransactionMemo.block_number"`)}
	}
	return nil
}

func (tmc *TransactionMemoCreate) sqlSave(ctx context.Context) (*TransactionMemo, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TransactionMemoCreate) createSpec() (*TransactionMemo, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionMemo{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(transactionmemo.Table, sqlgraph.NewFieldSpec(transactionmemo.FieldID, field.TypeInt))
	)
	if value, ok := tmc.mutation.TransactionHash(); ok {
		_spec.SetField(transactionmemo.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := tmc.mutation.BookNftID(); ok {
		_spec.SetField(transactionmemo.FieldBookNftID, field.TypeString, value)
		_node.BookNftID = value
	}
	if value, ok := tmc.mutation.From(); ok {
		_spec.SetField(transactionmemo.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := tmc.mutation.To(); ok {
		_spec.SetField(transactionmemo.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := tmc.mutation.TokenID(); ok {
		_spec.SetField(transactionmemo.FieldTokenID, field.TypeUint64, value)
		_node.TokenID = value
	}
	if value, ok := tmc.mutation.Memo(); ok {
		_spec.SetField(transactionmemo.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := tmc.mutation.BlockNumber(); ok {
		_spec.SetField(transactionmemo.FieldBlockNumber, field.TypeUint64, value)
		_node.BlockNumber = value
	}
	return _node, _spec
}

// TransactionMemoCreateBulk is the builder for creating many TransactionMemo entities in bulk.
type TransactionMemoCreateBulk struct {
	config
	err      error
	builders []*TransactionMemoCreate
}

// Save creates the TransactionMemo entities in the database.
func (tmcb *TransactionMemoCreateBulk) Save(ctx context.Context) ([]*TransactionMemo, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TransactionMemo, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TransactionMemoCreateBulk) SaveX(ctx context.Context) []*TransactionMemo {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TransactionMemoCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TransactionMemoCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
