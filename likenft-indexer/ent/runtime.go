// Code generated by ent, DO NOT EDIT.

package ent

import (
	"likenft-indexer/ent/evmevent"
	"likenft-indexer/ent/evmeventprocessedblockheight"
	"likenft-indexer/ent/likeprotocol"
	"likenft-indexer/ent/nft"
	"likenft-indexer/ent/nftclass"
	"likenft-indexer/ent/schema"
	"likenft-indexer/ent/schema/typeutil"
	"likenft-indexer/ent/transactionmemo"
	"math/big"

	"entgo.io/ent/schema/field"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	evmeventFields := schema.EVMEvent{}.Fields()
	_ = evmeventFields
	// evmeventDescTransactionHash is the schema descriptor for transaction_hash field.
	evmeventDescTransactionHash := evmeventFields[0].Descriptor()
	// evmevent.TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	evmevent.TransactionHashValidator = evmeventDescTransactionHash.Validators[0].(func(string) error)
	// evmeventDescChainID is the schema descriptor for chain_id field.
	evmeventDescChainID := evmeventFields[2].Descriptor()
	evmevent.ValueScanner.ChainID = evmeventDescChainID.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// evmeventDescBlockHash is the schema descriptor for block_hash field.
	evmeventDescBlockHash := evmeventFields[3].Descriptor()
	// evmevent.BlockHashValidator is a validator for the "block_hash" field. It is called by the builders before save.
	evmevent.BlockHashValidator = evmeventDescBlockHash.Validators[0].(func(string) error)
	// evmeventDescBlockNumber is the schema descriptor for block_number field.
	evmeventDescBlockNumber := evmeventFields[4].Descriptor()
	evmevent.ValueScanner.BlockNumber = evmeventDescBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// evmeventDescAddress is the schema descriptor for address field.
	evmeventDescAddress := evmeventFields[6].Descriptor()
	// evmevent.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	evmevent.AddressValidator = evmeventDescAddress.Validators[0].(func(string) error)
	// evmeventDescTopic0 is the schema descriptor for topic0 field.
	evmeventDescTopic0 := evmeventFields[7].Descriptor()
	// evmevent.Topic0Validator is a validator for the "topic0" field. It is called by the builders before save.
	evmevent.Topic0Validator = evmeventDescTopic0.Validators[0].(func(string) error)
	// evmeventDescTopic0Hex is the schema descriptor for topic0_hex field.
	evmeventDescTopic0Hex := evmeventFields[8].Descriptor()
	// evmevent.Topic0HexValidator is a validator for the "topic0_hex" field. It is called by the builders before save.
	evmevent.Topic0HexValidator = evmeventDescTopic0Hex.Validators[0].(func(string) error)
	evmeventprocessedblockheightFields := schema.EVMEventProcessedBlockHeight{}.Fields()
	_ = evmeventprocessedblockheightFields
	// evmeventprocessedblockheightDescContractAddress is the schema descriptor for contract_address field.
	evmeventprocessedblockheightDescContractAddress := evmeventprocessedblockheightFields[1].Descriptor()
	// evmeventprocessedblockheight.ContractAddressValidator is a validator for the "contract_address" field. It is called by the builders before save.
	evmeventprocessedblockheight.ContractAddressValidator = evmeventprocessedblockheightDescContractAddress.Validators[0].(func(string) error)
	// evmeventprocessedblockheightDescBlockHeight is the schema descriptor for block_height field.
	evmeventprocessedblockheightDescBlockHeight := evmeventprocessedblockheightFields[3].Descriptor()
	evmeventprocessedblockheight.ValueScanner.BlockHeight = evmeventprocessedblockheightDescBlockHeight.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	likeprotocolFields := schema.LikeProtocol{}.Fields()
	_ = likeprotocolFields
	// likeprotocolDescLatestEventBlockNumber is the schema descriptor for latest_event_block_number field.
	likeprotocolDescLatestEventBlockNumber := likeprotocolFields[1].Descriptor()
	likeprotocol.ValueScanner.LatestEventBlockNumber = likeprotocolDescLatestEventBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	nftFields := schema.NFT{}.Fields()
	_ = nftFields
	// nftDescContractAddress is the schema descriptor for contract_address field.
	nftDescContractAddress := nftFields[0].Descriptor()
	// nft.ContractAddressValidator is a validator for the "contract_address" field. It is called by the builders before save.
	nft.ContractAddressValidator = func() func(string) error {
		validators := nftDescContractAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(contract_address string) error {
			for _, fn := range fns {
				if err := fn(contract_address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// nftDescTokenID is the schema descriptor for token_id field.
	nftDescTokenID := nftFields[1].Descriptor()
	nft.ValueScanner.TokenID = nftDescTokenID.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// nftDescOwnerAddress is the schema descriptor for owner_address field.
	nftDescOwnerAddress := nftFields[12].Descriptor()
	// nft.OwnerAddressValidator is a validator for the "owner_address" field. It is called by the builders before save.
	nft.OwnerAddressValidator = func() func(string) error {
		validators := nftDescOwnerAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(owner_address string) error {
			for _, fn := range fns {
				if err := fn(owner_address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	nftclassMixin := schema.NFTClass{}.Mixin()
	nftclassMixinFields0 := nftclassMixin[0].Fields()
	_ = nftclassMixinFields0
	nftclassFields := schema.NFTClass{}.Fields()
	_ = nftclassFields
	// nftclassDescAcquireBookNftEventsWeight is the schema descriptor for acquire_book_nft_events_weight field.
	nftclassDescAcquireBookNftEventsWeight := nftclassMixinFields0[0].Descriptor()
	// nftclass.DefaultAcquireBookNftEventsWeight holds the default value on creation for the acquire_book_nft_events_weight field.
	nftclass.DefaultAcquireBookNftEventsWeight = nftclassDescAcquireBookNftEventsWeight.Default.(float64)
	// nftclass.AcquireBookNftEventsWeightValidator is a validator for the "acquire_book_nft_events_weight" field. It is called by the builders before save.
	nftclass.AcquireBookNftEventsWeightValidator = nftclassDescAcquireBookNftEventsWeight.Validators[0].(func(float64) error)
	// nftclassDescAcquireBookNftEventsFailedCount is the schema descriptor for acquire_book_nft_events_failed_count field.
	nftclassDescAcquireBookNftEventsFailedCount := nftclassMixinFields0[5].Descriptor()
	// nftclass.DefaultAcquireBookNftEventsFailedCount holds the default value on creation for the acquire_book_nft_events_failed_count field.
	nftclass.DefaultAcquireBookNftEventsFailedCount = nftclassDescAcquireBookNftEventsFailedCount.Default.(int)
	// nftclassDescName is the schema descriptor for name field.
	nftclassDescName := nftclassFields[1].Descriptor()
	// nftclass.NameValidator is a validator for the "name" field. It is called by the builders before save.
	nftclass.NameValidator = nftclassDescName.Validators[0].(func(string) error)
	// nftclassDescSymbol is the schema descriptor for symbol field.
	nftclassDescSymbol := nftclassFields[2].Descriptor()
	// nftclass.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	nftclass.SymbolValidator = nftclassDescSymbol.Validators[0].(func(string) error)
	// nftclassDescTotalSupply is the schema descriptor for total_supply field.
	nftclassDescTotalSupply := nftclassFields[5].Descriptor()
	nftclass.ValueScanner.TotalSupply = nftclassDescTotalSupply.ValueScanner.(field.TypeValueScanner[*big.Int])
	// nftclassDescMaxSupply is the schema descriptor for max_supply field.
	nftclassDescMaxSupply := nftclassFields[6].Descriptor()
	nftclass.ValueScanner.MaxSupply = nftclassDescMaxSupply.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// nftclassDescDeployerAddress is the schema descriptor for deployer_address field.
	nftclassDescDeployerAddress := nftclassFields[10].Descriptor()
	// nftclass.DeployerAddressValidator is a validator for the "deployer_address" field. It is called by the builders before save.
	nftclass.DeployerAddressValidator = nftclassDescDeployerAddress.Validators[0].(func(string) error)
	// nftclassDescDeployedBlockNumber is the schema descriptor for deployed_block_number field.
	nftclassDescDeployedBlockNumber := nftclassFields[11].Descriptor()
	nftclass.ValueScanner.DeployedBlockNumber = nftclassDescDeployedBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// nftclassDescLatestEventBlockNumber is the schema descriptor for latest_event_block_number field.
	nftclassDescLatestEventBlockNumber := nftclassFields[12].Descriptor()
	nftclass.ValueScanner.LatestEventBlockNumber = nftclassDescLatestEventBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// nftclassDescDisabledForIndexing is the schema descriptor for disabled_for_indexing field.
	nftclassDescDisabledForIndexing := nftclassFields[13].Descriptor()
	// nftclass.DefaultDisabledForIndexing holds the default value on creation for the disabled_for_indexing field.
	nftclass.DefaultDisabledForIndexing = nftclassDescDisabledForIndexing.Default.(bool)
	transactionmemoFields := schema.TransactionMemo{}.Fields()
	_ = transactionmemoFields
	// transactionmemoDescTransactionHash is the schema descriptor for transaction_hash field.
	transactionmemoDescTransactionHash := transactionmemoFields[0].Descriptor()
	// transactionmemo.TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	transactionmemo.TransactionHashValidator = transactionmemoDescTransactionHash.Validators[0].(func(string) error)
	// transactionmemoDescBookNftID is the schema descriptor for book_nft_id field.
	transactionmemoDescBookNftID := transactionmemoFields[1].Descriptor()
	// transactionmemo.BookNftIDValidator is a validator for the "book_nft_id" field. It is called by the builders before save.
	transactionmemo.BookNftIDValidator = transactionmemoDescBookNftID.Validators[0].(func(string) error)
	// transactionmemoDescFrom is the schema descriptor for from field.
	transactionmemoDescFrom := transactionmemoFields[2].Descriptor()
	// transactionmemo.FromValidator is a validator for the "from" field. It is called by the builders before save.
	transactionmemo.FromValidator = transactionmemoDescFrom.Validators[0].(func(string) error)
	// transactionmemoDescTo is the schema descriptor for to field.
	transactionmemoDescTo := transactionmemoFields[3].Descriptor()
	// transactionmemo.ToValidator is a validator for the "to" field. It is called by the builders before save.
	transactionmemo.ToValidator = transactionmemoDescTo.Validators[0].(func(string) error)
	// transactionmemoDescTokenID is the schema descriptor for token_id field.
	transactionmemoDescTokenID := transactionmemoFields[4].Descriptor()
	transactionmemo.ValueScanner.TokenID = transactionmemoDescTokenID.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
	// transactionmemoDescBlockNumber is the schema descriptor for block_number field.
	transactionmemoDescBlockNumber := transactionmemoFields[6].Descriptor()
	transactionmemo.ValueScanner.BlockNumber = transactionmemoDescBlockNumber.ValueScanner.(field.TypeValueScanner[typeutil.Uint64])
}
