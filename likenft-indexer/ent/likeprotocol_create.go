// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"likenft-indexer/ent/likeprotocol"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikeProtocolCreate is the builder for creating a LikeProtocol entity.
type LikeProtocolCreate struct {
	config
	mutation *LikeProtocolMutation
	hooks    []Hook
}

// SetAddress sets the "address" field.
func (lpc *LikeProtocolCreate) SetAddress(s string) *LikeProtocolCreate {
	lpc.mutation.SetAddress(s)
	return lpc
}

// SetLatestEventBlockNumber sets the "latest_event_block_number" field.
func (lpc *LikeProtocolCreate) SetLatestEventBlockNumber(t typeutil.Uint64) *LikeProtocolCreate {
	lpc.mutation.SetLatestEventBlockNumber(t)
	return lpc
}

// Mutation returns the LikeProtocolMutation object of the builder.
func (lpc *LikeProtocolCreate) Mutation() *LikeProtocolMutation {
	return lpc.mutation
}

// Save creates the LikeProtocol in the database.
func (lpc *LikeProtocolCreate) Save(ctx context.Context) (*LikeProtocol, error) {
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LikeProtocolCreate) SaveX(ctx context.Context) *LikeProtocol {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LikeProtocolCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LikeProtocolCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LikeProtocolCreate) check() error {
	if _, ok := lpc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "LikeProtocol.address"`)}
	}
	if _, ok := lpc.mutation.LatestEventBlockNumber(); !ok {
		return &ValidationError{Name: "latest_event_block_number", err: errors.New(`ent: missing required field "LikeProtocol.latest_event_block_number"`)}
	}
	return nil
}

func (lpc *LikeProtocolCreate) sqlSave(ctx context.Context) (*LikeProtocol, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := lpc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LikeProtocolCreate) createSpec() (*LikeProtocol, *sqlgraph.CreateSpec, error) {
	var (
		_node = &LikeProtocol{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(likeprotocol.Table, sqlgraph.NewFieldSpec(likeprotocol.FieldID, field.TypeInt))
	)
	if value, ok := lpc.mutation.Address(); ok {
		_spec.SetField(likeprotocol.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := lpc.mutation.LatestEventBlockNumber(); ok {
		vv, err := likeprotocol.ValueScanner.LatestEventBlockNumber.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(likeprotocol.FieldLatestEventBlockNumber, field.TypeUint64, vv)
		_node.LatestEventBlockNumber = value
	}
	return _node, _spec, nil
}

// LikeProtocolCreateBulk is the builder for creating many LikeProtocol entities in bulk.
type LikeProtocolCreateBulk struct {
	config
	err      error
	builders []*LikeProtocolCreate
}

// Save creates the LikeProtocol entities in the database.
func (lpcb *LikeProtocolCreateBulk) Save(ctx context.Context) ([]*LikeProtocol, error) {
	if lpcb.err != nil {
		return nil, lpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LikeProtocol, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LikeProtocolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LikeProtocolCreateBulk) SaveX(ctx context.Context) []*LikeProtocol {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LikeProtocolCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LikeProtocolCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
