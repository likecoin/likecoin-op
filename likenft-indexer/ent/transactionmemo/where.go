// Code generated by ent, DO NOT EDIT.

package transactionmemo

import (
	"likenft-indexer/ent/predicate"
	"likenft-indexer/ent/schema/typeutil"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldID, id))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldTransactionHash, v))
}

// BookNftID applies equality check predicate on the "book_nft_id" field. It's identical to BookNftIDEQ.
func BookNftID(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldBookNftID, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldTo, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldEQ(FieldTokenID, vc), err)
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldMemo, v))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldEQ(FieldBlockNumber, vc), err)
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContainsFold(FieldTransactionHash, v))
}

// BookNftIDEQ applies the EQ predicate on the "book_nft_id" field.
func BookNftIDEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldBookNftID, v))
}

// BookNftIDNEQ applies the NEQ predicate on the "book_nft_id" field.
func BookNftIDNEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldBookNftID, v))
}

// BookNftIDIn applies the In predicate on the "book_nft_id" field.
func BookNftIDIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldBookNftID, vs...))
}

// BookNftIDNotIn applies the NotIn predicate on the "book_nft_id" field.
func BookNftIDNotIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldBookNftID, vs...))
}

// BookNftIDGT applies the GT predicate on the "book_nft_id" field.
func BookNftIDGT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldBookNftID, v))
}

// BookNftIDGTE applies the GTE predicate on the "book_nft_id" field.
func BookNftIDGTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldBookNftID, v))
}

// BookNftIDLT applies the LT predicate on the "book_nft_id" field.
func BookNftIDLT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldBookNftID, v))
}

// BookNftIDLTE applies the LTE predicate on the "book_nft_id" field.
func BookNftIDLTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldBookNftID, v))
}

// BookNftIDContains applies the Contains predicate on the "book_nft_id" field.
func BookNftIDContains(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContains(FieldBookNftID, v))
}

// BookNftIDHasPrefix applies the HasPrefix predicate on the "book_nft_id" field.
func BookNftIDHasPrefix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasPrefix(FieldBookNftID, v))
}

// BookNftIDHasSuffix applies the HasSuffix predicate on the "book_nft_id" field.
func BookNftIDHasSuffix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasSuffix(FieldBookNftID, v))
}

// BookNftIDEqualFold applies the EqualFold predicate on the "book_nft_id" field.
func BookNftIDEqualFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEqualFold(FieldBookNftID, v))
}

// BookNftIDContainsFold applies the ContainsFold predicate on the "book_nft_id" field.
func BookNftIDContainsFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContainsFold(FieldBookNftID, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContainsFold(FieldTo, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldEQ(FieldTokenID, vc), err)
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldNEQ(FieldTokenID, vc), err)
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...typeutil.Uint64) predicate.TransactionMemo {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionMemoOrErr(sql.FieldIn(FieldTokenID, v...), err)
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...typeutil.Uint64) predicate.TransactionMemo {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionMemoOrErr(sql.FieldNotIn(FieldTokenID, v...), err)
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldGT(FieldTokenID, vc), err)
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldGTE(FieldTokenID, vc), err)
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldLT(FieldTokenID, vc), err)
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldLTE(FieldTokenID, vc), err)
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.FieldContainsFold(FieldMemo, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldEQ(FieldBlockNumber, vc), err)
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldNEQ(FieldBlockNumber, vc), err)
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...typeutil.Uint64) predicate.TransactionMemo {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionMemoOrErr(sql.FieldIn(FieldBlockNumber, v...), err)
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...typeutil.Uint64) predicate.TransactionMemo {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.BlockNumber.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionMemoOrErr(sql.FieldNotIn(FieldBlockNumber, v...), err)
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldGT(FieldBlockNumber, vc), err)
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldGTE(FieldBlockNumber, vc), err)
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldLT(FieldBlockNumber, vc), err)
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v typeutil.Uint64) predicate.TransactionMemo {
	vc, err := ValueScanner.BlockNumber.Value(v)
	return predicate.TransactionMemoOrErr(sql.FieldLTE(FieldBlockNumber, vc), err)
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransactionMemo) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransactionMemo) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransactionMemo) predicate.TransactionMemo {
	return predicate.TransactionMemo(sql.NotPredicates(p))
}
