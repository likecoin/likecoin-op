// Code generated by ent, DO NOT EDIT.

package nft

import (
	"fmt"
	"likenft-indexer/ent/predicate"
	"math/big"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldID, id))
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldContractAddress, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldEQ(FieldTokenID, vc), err)
}

// TokenURI applies equality check predicate on the "token_uri" field. It's identical to TokenURIEQ.
func TokenURI(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldTokenURI, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldImage, v))
}

// ImageData applies equality check predicate on the "image_data" field. It's identical to ImageDataEQ.
func ImageData(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldImageData, v))
}

// ExternalURL applies equality check predicate on the "external_url" field. It's identical to ExternalURLEQ.
func ExternalURL(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldExternalURL, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldDescription, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldName, v))
}

// BackgroundColor applies equality check predicate on the "background_color" field. It's identical to BackgroundColorEQ.
func BackgroundColor(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldBackgroundColor, v))
}

// AnimationURL applies equality check predicate on the "animation_url" field. It's identical to AnimationURLEQ.
func AnimationURL(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldAnimationURL, v))
}

// YoutubeURL applies equality check predicate on the "youtube_url" field. It's identical to YoutubeURLEQ.
func YoutubeURL(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldYoutubeURL, v))
}

// OwnerAddress applies equality check predicate on the "owner_address" field. It's identical to OwnerAddressEQ.
func OwnerAddress(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldOwnerAddress, v))
}

// MintedAt applies equality check predicate on the "minted_at" field. It's identical to MintedAtEQ.
func MintedAt(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldMintedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldUpdatedAt, v))
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldContractAddress, v))
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldContractAddress, v))
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldContractAddress, vs...))
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldContractAddress, vs...))
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldContractAddress, v))
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldContractAddress, v))
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldContractAddress, v))
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldContractAddress, v))
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldContractAddress, v))
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldContractAddress, v))
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldContractAddress, v))
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldContractAddress, v))
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldContractAddress, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldEQ(FieldTokenID, vc), err)
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldNEQ(FieldTokenID, vc), err)
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...*big.Int) predicate.NFT {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.NFTOrErr(sql.FieldIn(FieldTokenID, v...), err)
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...*big.Int) predicate.NFT {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenID.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.NFTOrErr(sql.FieldNotIn(FieldTokenID, v...), err)
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldGT(FieldTokenID, vc), err)
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldGTE(FieldTokenID, vc), err)
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldLT(FieldTokenID, vc), err)
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	return predicate.NFTOrErr(sql.FieldLTE(FieldTokenID, vc), err)
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("token_id value is not a string: %T", vc)
	}
	return predicate.NFTOrErr(sql.FieldContains(FieldTokenID, vcs), err)
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("token_id value is not a string: %T", vc)
	}
	return predicate.NFTOrErr(sql.FieldHasPrefix(FieldTokenID, vcs), err)
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("token_id value is not a string: %T", vc)
	}
	return predicate.NFTOrErr(sql.FieldHasSuffix(FieldTokenID, vcs), err)
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("token_id value is not a string: %T", vc)
	}
	return predicate.NFTOrErr(sql.FieldEqualFold(FieldTokenID, vcs), err)
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v *big.Int) predicate.NFT {
	vc, err := ValueScanner.TokenID.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("token_id value is not a string: %T", vc)
	}
	return predicate.NFTOrErr(sql.FieldContainsFold(FieldTokenID, vcs), err)
}

// TokenURIEQ applies the EQ predicate on the "token_uri" field.
func TokenURIEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldTokenURI, v))
}

// TokenURINEQ applies the NEQ predicate on the "token_uri" field.
func TokenURINEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldTokenURI, v))
}

// TokenURIIn applies the In predicate on the "token_uri" field.
func TokenURIIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldTokenURI, vs...))
}

// TokenURINotIn applies the NotIn predicate on the "token_uri" field.
func TokenURINotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldTokenURI, vs...))
}

// TokenURIGT applies the GT predicate on the "token_uri" field.
func TokenURIGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldTokenURI, v))
}

// TokenURIGTE applies the GTE predicate on the "token_uri" field.
func TokenURIGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldTokenURI, v))
}

// TokenURILT applies the LT predicate on the "token_uri" field.
func TokenURILT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldTokenURI, v))
}

// TokenURILTE applies the LTE predicate on the "token_uri" field.
func TokenURILTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldTokenURI, v))
}

// TokenURIContains applies the Contains predicate on the "token_uri" field.
func TokenURIContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldTokenURI, v))
}

// TokenURIHasPrefix applies the HasPrefix predicate on the "token_uri" field.
func TokenURIHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldTokenURI, v))
}

// TokenURIHasSuffix applies the HasSuffix predicate on the "token_uri" field.
func TokenURIHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldTokenURI, v))
}

// TokenURIIsNil applies the IsNil predicate on the "token_uri" field.
func TokenURIIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldTokenURI))
}

// TokenURINotNil applies the NotNil predicate on the "token_uri" field.
func TokenURINotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldTokenURI))
}

// TokenURIEqualFold applies the EqualFold predicate on the "token_uri" field.
func TokenURIEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldTokenURI, v))
}

// TokenURIContainsFold applies the ContainsFold predicate on the "token_uri" field.
func TokenURIContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldTokenURI, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldImage, v))
}

// ImageDataEQ applies the EQ predicate on the "image_data" field.
func ImageDataEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldImageData, v))
}

// ImageDataNEQ applies the NEQ predicate on the "image_data" field.
func ImageDataNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldImageData, v))
}

// ImageDataIn applies the In predicate on the "image_data" field.
func ImageDataIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldImageData, vs...))
}

// ImageDataNotIn applies the NotIn predicate on the "image_data" field.
func ImageDataNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldImageData, vs...))
}

// ImageDataGT applies the GT predicate on the "image_data" field.
func ImageDataGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldImageData, v))
}

// ImageDataGTE applies the GTE predicate on the "image_data" field.
func ImageDataGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldImageData, v))
}

// ImageDataLT applies the LT predicate on the "image_data" field.
func ImageDataLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldImageData, v))
}

// ImageDataLTE applies the LTE predicate on the "image_data" field.
func ImageDataLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldImageData, v))
}

// ImageDataContains applies the Contains predicate on the "image_data" field.
func ImageDataContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldImageData, v))
}

// ImageDataHasPrefix applies the HasPrefix predicate on the "image_data" field.
func ImageDataHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldImageData, v))
}

// ImageDataHasSuffix applies the HasSuffix predicate on the "image_data" field.
func ImageDataHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldImageData, v))
}

// ImageDataIsNil applies the IsNil predicate on the "image_data" field.
func ImageDataIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldImageData))
}

// ImageDataNotNil applies the NotNil predicate on the "image_data" field.
func ImageDataNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldImageData))
}

// ImageDataEqualFold applies the EqualFold predicate on the "image_data" field.
func ImageDataEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldImageData, v))
}

// ImageDataContainsFold applies the ContainsFold predicate on the "image_data" field.
func ImageDataContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldImageData, v))
}

// ExternalURLEQ applies the EQ predicate on the "external_url" field.
func ExternalURLEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldExternalURL, v))
}

// ExternalURLNEQ applies the NEQ predicate on the "external_url" field.
func ExternalURLNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldExternalURL, v))
}

// ExternalURLIn applies the In predicate on the "external_url" field.
func ExternalURLIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldExternalURL, vs...))
}

// ExternalURLNotIn applies the NotIn predicate on the "external_url" field.
func ExternalURLNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldExternalURL, vs...))
}

// ExternalURLGT applies the GT predicate on the "external_url" field.
func ExternalURLGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldExternalURL, v))
}

// ExternalURLGTE applies the GTE predicate on the "external_url" field.
func ExternalURLGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldExternalURL, v))
}

// ExternalURLLT applies the LT predicate on the "external_url" field.
func ExternalURLLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldExternalURL, v))
}

// ExternalURLLTE applies the LTE predicate on the "external_url" field.
func ExternalURLLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldExternalURL, v))
}

// ExternalURLContains applies the Contains predicate on the "external_url" field.
func ExternalURLContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldExternalURL, v))
}

// ExternalURLHasPrefix applies the HasPrefix predicate on the "external_url" field.
func ExternalURLHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldExternalURL, v))
}

// ExternalURLHasSuffix applies the HasSuffix predicate on the "external_url" field.
func ExternalURLHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldExternalURL, v))
}

// ExternalURLIsNil applies the IsNil predicate on the "external_url" field.
func ExternalURLIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldExternalURL))
}

// ExternalURLNotNil applies the NotNil predicate on the "external_url" field.
func ExternalURLNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldExternalURL))
}

// ExternalURLEqualFold applies the EqualFold predicate on the "external_url" field.
func ExternalURLEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldExternalURL, v))
}

// ExternalURLContainsFold applies the ContainsFold predicate on the "external_url" field.
func ExternalURLContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldExternalURL, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldDescription, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldName, v))
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldAttributes))
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldAttributes))
}

// BackgroundColorEQ applies the EQ predicate on the "background_color" field.
func BackgroundColorEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldBackgroundColor, v))
}

// BackgroundColorNEQ applies the NEQ predicate on the "background_color" field.
func BackgroundColorNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldBackgroundColor, v))
}

// BackgroundColorIn applies the In predicate on the "background_color" field.
func BackgroundColorIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldBackgroundColor, vs...))
}

// BackgroundColorNotIn applies the NotIn predicate on the "background_color" field.
func BackgroundColorNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldBackgroundColor, vs...))
}

// BackgroundColorGT applies the GT predicate on the "background_color" field.
func BackgroundColorGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldBackgroundColor, v))
}

// BackgroundColorGTE applies the GTE predicate on the "background_color" field.
func BackgroundColorGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldBackgroundColor, v))
}

// BackgroundColorLT applies the LT predicate on the "background_color" field.
func BackgroundColorLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldBackgroundColor, v))
}

// BackgroundColorLTE applies the LTE predicate on the "background_color" field.
func BackgroundColorLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldBackgroundColor, v))
}

// BackgroundColorContains applies the Contains predicate on the "background_color" field.
func BackgroundColorContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldBackgroundColor, v))
}

// BackgroundColorHasPrefix applies the HasPrefix predicate on the "background_color" field.
func BackgroundColorHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldBackgroundColor, v))
}

// BackgroundColorHasSuffix applies the HasSuffix predicate on the "background_color" field.
func BackgroundColorHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldBackgroundColor, v))
}

// BackgroundColorIsNil applies the IsNil predicate on the "background_color" field.
func BackgroundColorIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldBackgroundColor))
}

// BackgroundColorNotNil applies the NotNil predicate on the "background_color" field.
func BackgroundColorNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldBackgroundColor))
}

// BackgroundColorEqualFold applies the EqualFold predicate on the "background_color" field.
func BackgroundColorEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldBackgroundColor, v))
}

// BackgroundColorContainsFold applies the ContainsFold predicate on the "background_color" field.
func BackgroundColorContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldBackgroundColor, v))
}

// AnimationURLEQ applies the EQ predicate on the "animation_url" field.
func AnimationURLEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldAnimationURL, v))
}

// AnimationURLNEQ applies the NEQ predicate on the "animation_url" field.
func AnimationURLNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldAnimationURL, v))
}

// AnimationURLIn applies the In predicate on the "animation_url" field.
func AnimationURLIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldAnimationURL, vs...))
}

// AnimationURLNotIn applies the NotIn predicate on the "animation_url" field.
func AnimationURLNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldAnimationURL, vs...))
}

// AnimationURLGT applies the GT predicate on the "animation_url" field.
func AnimationURLGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldAnimationURL, v))
}

// AnimationURLGTE applies the GTE predicate on the "animation_url" field.
func AnimationURLGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldAnimationURL, v))
}

// AnimationURLLT applies the LT predicate on the "animation_url" field.
func AnimationURLLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldAnimationURL, v))
}

// AnimationURLLTE applies the LTE predicate on the "animation_url" field.
func AnimationURLLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldAnimationURL, v))
}

// AnimationURLContains applies the Contains predicate on the "animation_url" field.
func AnimationURLContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldAnimationURL, v))
}

// AnimationURLHasPrefix applies the HasPrefix predicate on the "animation_url" field.
func AnimationURLHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldAnimationURL, v))
}

// AnimationURLHasSuffix applies the HasSuffix predicate on the "animation_url" field.
func AnimationURLHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldAnimationURL, v))
}

// AnimationURLIsNil applies the IsNil predicate on the "animation_url" field.
func AnimationURLIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldAnimationURL))
}

// AnimationURLNotNil applies the NotNil predicate on the "animation_url" field.
func AnimationURLNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldAnimationURL))
}

// AnimationURLEqualFold applies the EqualFold predicate on the "animation_url" field.
func AnimationURLEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldAnimationURL, v))
}

// AnimationURLContainsFold applies the ContainsFold predicate on the "animation_url" field.
func AnimationURLContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldAnimationURL, v))
}

// YoutubeURLEQ applies the EQ predicate on the "youtube_url" field.
func YoutubeURLEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldYoutubeURL, v))
}

// YoutubeURLNEQ applies the NEQ predicate on the "youtube_url" field.
func YoutubeURLNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldYoutubeURL, v))
}

// YoutubeURLIn applies the In predicate on the "youtube_url" field.
func YoutubeURLIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldYoutubeURL, vs...))
}

// YoutubeURLNotIn applies the NotIn predicate on the "youtube_url" field.
func YoutubeURLNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldYoutubeURL, vs...))
}

// YoutubeURLGT applies the GT predicate on the "youtube_url" field.
func YoutubeURLGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldYoutubeURL, v))
}

// YoutubeURLGTE applies the GTE predicate on the "youtube_url" field.
func YoutubeURLGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldYoutubeURL, v))
}

// YoutubeURLLT applies the LT predicate on the "youtube_url" field.
func YoutubeURLLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldYoutubeURL, v))
}

// YoutubeURLLTE applies the LTE predicate on the "youtube_url" field.
func YoutubeURLLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldYoutubeURL, v))
}

// YoutubeURLContains applies the Contains predicate on the "youtube_url" field.
func YoutubeURLContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldYoutubeURL, v))
}

// YoutubeURLHasPrefix applies the HasPrefix predicate on the "youtube_url" field.
func YoutubeURLHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldYoutubeURL, v))
}

// YoutubeURLHasSuffix applies the HasSuffix predicate on the "youtube_url" field.
func YoutubeURLHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldYoutubeURL, v))
}

// YoutubeURLIsNil applies the IsNil predicate on the "youtube_url" field.
func YoutubeURLIsNil() predicate.NFT {
	return predicate.NFT(sql.FieldIsNull(FieldYoutubeURL))
}

// YoutubeURLNotNil applies the NotNil predicate on the "youtube_url" field.
func YoutubeURLNotNil() predicate.NFT {
	return predicate.NFT(sql.FieldNotNull(FieldYoutubeURL))
}

// YoutubeURLEqualFold applies the EqualFold predicate on the "youtube_url" field.
func YoutubeURLEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldYoutubeURL, v))
}

// YoutubeURLContainsFold applies the ContainsFold predicate on the "youtube_url" field.
func YoutubeURLContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldYoutubeURL, v))
}

// OwnerAddressEQ applies the EQ predicate on the "owner_address" field.
func OwnerAddressEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressNEQ applies the NEQ predicate on the "owner_address" field.
func OwnerAddressNEQ(v string) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldOwnerAddress, v))
}

// OwnerAddressIn applies the In predicate on the "owner_address" field.
func OwnerAddressIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldOwnerAddress, vs...))
}

// OwnerAddressNotIn applies the NotIn predicate on the "owner_address" field.
func OwnerAddressNotIn(vs ...string) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldOwnerAddress, vs...))
}

// OwnerAddressGT applies the GT predicate on the "owner_address" field.
func OwnerAddressGT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldOwnerAddress, v))
}

// OwnerAddressGTE applies the GTE predicate on the "owner_address" field.
func OwnerAddressGTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldOwnerAddress, v))
}

// OwnerAddressLT applies the LT predicate on the "owner_address" field.
func OwnerAddressLT(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldOwnerAddress, v))
}

// OwnerAddressLTE applies the LTE predicate on the "owner_address" field.
func OwnerAddressLTE(v string) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldOwnerAddress, v))
}

// OwnerAddressContains applies the Contains predicate on the "owner_address" field.
func OwnerAddressContains(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContains(FieldOwnerAddress, v))
}

// OwnerAddressHasPrefix applies the HasPrefix predicate on the "owner_address" field.
func OwnerAddressHasPrefix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasPrefix(FieldOwnerAddress, v))
}

// OwnerAddressHasSuffix applies the HasSuffix predicate on the "owner_address" field.
func OwnerAddressHasSuffix(v string) predicate.NFT {
	return predicate.NFT(sql.FieldHasSuffix(FieldOwnerAddress, v))
}

// OwnerAddressEqualFold applies the EqualFold predicate on the "owner_address" field.
func OwnerAddressEqualFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldEqualFold(FieldOwnerAddress, v))
}

// OwnerAddressContainsFold applies the ContainsFold predicate on the "owner_address" field.
func OwnerAddressContainsFold(v string) predicate.NFT {
	return predicate.NFT(sql.FieldContainsFold(FieldOwnerAddress, v))
}

// MintedAtEQ applies the EQ predicate on the "minted_at" field.
func MintedAtEQ(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldMintedAt, v))
}

// MintedAtNEQ applies the NEQ predicate on the "minted_at" field.
func MintedAtNEQ(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldMintedAt, v))
}

// MintedAtIn applies the In predicate on the "minted_at" field.
func MintedAtIn(vs ...time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldMintedAt, vs...))
}

// MintedAtNotIn applies the NotIn predicate on the "minted_at" field.
func MintedAtNotIn(vs ...time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldMintedAt, vs...))
}

// MintedAtGT applies the GT predicate on the "minted_at" field.
func MintedAtGT(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldMintedAt, v))
}

// MintedAtGTE applies the GTE predicate on the "minted_at" field.
func MintedAtGTE(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldMintedAt, v))
}

// MintedAtLT applies the LT predicate on the "minted_at" field.
func MintedAtLT(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldMintedAt, v))
}

// MintedAtLTE applies the LTE predicate on the "minted_at" field.
func MintedAtLTE(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldMintedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NFT {
	return predicate.NFT(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Account) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.NFTClass) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NFT) predicate.NFT {
	return predicate.NFT(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NFT) predicate.NFT {
	return predicate.NFT(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NFT) predicate.NFT {
	return predicate.NFT(sql.NotPredicates(p))
}
