// Code generated by ent, DO NOT EDIT.

package nft

import (
	"math/big"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

const (
	// Label holds the string label denoting the nft type in the database.
	Label = "nft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContractAddress holds the string denoting the contract_address field in the database.
	FieldContractAddress = "contract_address"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldTokenURI holds the string denoting the token_uri field in the database.
	FieldTokenURI = "token_uri"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldImageData holds the string denoting the image_data field in the database.
	FieldImageData = "image_data"
	// FieldExternalURL holds the string denoting the external_url field in the database.
	FieldExternalURL = "external_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAttributes holds the string denoting the attributes field in the database.
	FieldAttributes = "attributes"
	// FieldBackgroundColor holds the string denoting the background_color field in the database.
	FieldBackgroundColor = "background_color"
	// FieldAnimationURL holds the string denoting the animation_url field in the database.
	FieldAnimationURL = "animation_url"
	// FieldYoutubeURL holds the string denoting the youtube_url field in the database.
	FieldYoutubeURL = "youtube_url"
	// FieldOwnerAddress holds the string denoting the owner_address field in the database.
	FieldOwnerAddress = "owner_address"
	// FieldMintedAt holds the string denoting the minted_at field in the database.
	FieldMintedAt = "minted_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// Table holds the table name of the nft in the database.
	Table = "nfts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "nfts"
	// OwnerInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	OwnerInverseTable = "accounts"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "account_nfts"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "nfts"
	// ClassInverseTable is the table name for the NFTClass entity.
	// It exists in this package in order to avoid circular dependency with the "nftclass" package.
	ClassInverseTable = "nft_classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "nft_class_nfts"
)

// Columns holds all SQL columns for nft fields.
var Columns = []string{
	FieldID,
	FieldContractAddress,
	FieldTokenID,
	FieldTokenURI,
	FieldImage,
	FieldImageData,
	FieldExternalURL,
	FieldDescription,
	FieldName,
	FieldAttributes,
	FieldBackgroundColor,
	FieldAnimationURL,
	FieldYoutubeURL,
	FieldOwnerAddress,
	FieldMintedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nfts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_nfts",
	"nft_class_nfts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ContractAddressValidator is a validator for the "contract_address" field. It is called by the builders before save.
	ContractAddressValidator func(string) error
	// TokenURIValidator is a validator for the "token_uri" field. It is called by the builders before save.
	TokenURIValidator func(string) error
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// OwnerAddressValidator is a validator for the "owner_address" field. It is called by the builders before save.
	OwnerAddressValidator func(string) error
	// ValueScanner of all NFT fields.
	ValueScanner struct {
		TokenID field.TypeValueScanner[*big.Int]
	}
)

// OrderOption defines the ordering options for the NFT queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContractAddress orders the results by the contract_address field.
func ByContractAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractAddress, opts...).ToFunc()
}

// ByTokenID orders the results by the token_id field.
func ByTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenID, opts...).ToFunc()
}

// ByTokenURI orders the results by the token_uri field.
func ByTokenURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenURI, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByImageData orders the results by the image_data field.
func ByImageData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageData, opts...).ToFunc()
}

// ByExternalURL orders the results by the external_url field.
func ByExternalURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBackgroundColor orders the results by the background_color field.
func ByBackgroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundColor, opts...).ToFunc()
}

// ByAnimationURL orders the results by the animation_url field.
func ByAnimationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnimationURL, opts...).ToFunc()
}

// ByYoutubeURL orders the results by the youtube_url field.
func ByYoutubeURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYoutubeURL, opts...).ToFunc()
}

// ByOwnerAddress orders the results by the owner_address field.
func ByOwnerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddress, opts...).ToFunc()
}

// ByMintedAt orders the results by the minted_at field.
func ByMintedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMintedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassField orders the results by class field.
func ByClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
	)
}
