// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package like_protocol

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ClassConfig is an auto generated low-level Go binding around an user-defined struct.
type ClassConfig struct {
	MaxSupply uint64
}

// ClassInput is an auto generated low-level Go binding around an user-defined struct.
type ClassInput struct {
	Name     string
	Symbol   string
	Metadata string
	Config   ClassConfig
}

// MsgMintNFT is an auto generated low-level Go binding around an user-defined struct.
type MsgMintNFT struct {
	ClassId common.Address
	To      common.Address
	Input   NFTData
}

// MsgMintNFTs is an auto generated low-level Go binding around an user-defined struct.
type MsgMintNFTs struct {
	ClassId common.Address
	To      common.Address
	Inputs  []NFTData
}

// MsgNewClass is an auto generated low-level Go binding around an user-defined struct.
type MsgNewClass struct {
	Creator  common.Address
	Updaters []common.Address
	Minters  []common.Address
	Input    ClassInput
}

// MsgUpdateClass is an auto generated low-level Go binding around an user-defined struct.
type MsgUpdateClass struct {
	ClassId common.Address
	Input   ClassInput
}

// NFTData is an auto generated low-level Go binding around an user-defined struct.
type NFTData struct {
	Metadata string
}

// LikeProtocolMetaData contains all meta data concerning the LikeProtocol contract.
var LikeProtocolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNftClassNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"updaters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structMsgNewClass\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"NewClass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"}],\"name\":\"isLikeNFTClass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"structNFTData\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgMintNFT\",\"name\":\"msgMintNFT\",\"type\":\"tuple\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"structNFTData[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"internalType\":\"structMsgMintNFTs\",\"name\":\"msgMintNFTs\",\"type\":\"tuple\"}],\"name\":\"mintNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"updaters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgNewClass\",\"name\":\"msgNewClass\",\"type\":\"tuple\"}],\"name\":\"newClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgUpdateClass\",\"name\":\"msgUpdateClass\",\"type\":\"tuple\"}],\"name\":\"updateClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156012575f5ffd5b50608051613edd6100395f395f8181610a3801528181610a610152610ba50152613edd5ff3fe6080604052600436106100e4575f3560e01c80638456cb5911610087578063c4d66de811610057578063c4d66de814610299578063f1773716146102b8578063f2fde38b146102d7578063f311c6cb146102f6575f5ffd5b80638456cb59146101e35780638da5cb5b146101f7578063a3a198841461023d578063ad3cb1cc1461025c575f5ffd5b80634f1ef286116100c25780634f1ef2861461017757806352d1902d1461018a5780635c975abb146101ac578063715018a6146101cf575f5ffd5b806301cd9666146100e857806311b8da52146101095780633f4ba83a14610163575b5f5ffd5b3480156100f3575f5ffd5b50610107610102366004611134565b610315565b005b348015610114575f5ffd5b5061014e6101233660046111cc565b6001600160a01b039081165f9081525f516020613e885f395f51905f52602052604090205416151590565b60405190151581526020015b60405180910390f35b34801561016e575f5ffd5b506101076103ca565b6101076101853660046111e5565b6103dc565b348015610195575f5ffd5b5061019e6103fb565b60405190815260200161015a565b3480156101b7575f5ffd5b505f516020613e685f395f51905f525460ff1661014e565b3480156101da575f5ffd5b50610107610416565b3480156101ee575f5ffd5b50610107610427565b348015610202575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b03909116815260200161015a565b348015610248575f5ffd5b50610107610257366004611258565b610437565b348015610267575f5ffd5b5061028c604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161015a91906112bf565b3480156102a4575f5ffd5b506101076102b33660046111cc565b6105a2565b3480156102c3575f5ffd5b506101076102d2366004611357565b6106be565b3480156102e2575f5ffd5b506101076102f13660046111cc565b610777565b348015610301575f5ffd5b50610107610310366004611258565b6107b9565b61031d610943565b80516001600160a01b039081165f9081525f516020613e885f395f51905f52602081905260409091205490911680610368576040516305c19d3560e51b815260040160405180910390fd5b602083015160405163765a15bb60e01b81526001600160a01b0383169163765a15bb91610398919060040161148e565b5f604051808303815f87803b1580156103af575f5ffd5b505af11580156103c1573d5f5f3e3d5ffd5b50505050505050565b6103d2610973565b6103da6109ce565b565b6103e4610a2d565b6103ed82610ad1565b6103f78282610ad9565b5050565b5f610404610b9a565b505f516020613e485f395f51905f5290565b61041e610973565b6103da5f610be3565b61042f610973565b6103da610c53565b61043f610943565b5f516020613e885f395f51905f525f818161045d60208601866111cc565b6001600160a01b03908116825260208201929092526040015f205416905080610499576040516305c19d3560e51b815260040160405180910390fd5b6040805160018082528183019092525f91816020015b60608152602001906001900390816104af5790505090506104d360408501856114a0565b6104dd90806114be565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525085518694509092501515905061052457610524611507565b6020026020010181905250816001600160a01b031663d90794cf85602001602081019061055191906111cc565b836040518363ffffffff1660e01b815260040161056f92919061151b565b5f604051808303815f87803b158015610586575f5ffd5b505af1158015610598573d5f5f3e3d5ffd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03165f811580156105e65750825b90505f826001600160401b031660011480156106015750303b155b90508115801561060f575080155b1561062d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561065757845460ff60401b1916600160401b1785555b61065f610c9b565b61066886610ca3565b610670610cb4565b83156106b657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6106c6610943565b5f5f516020613e885f395f51905f5290505f826040516106e590610f35565b6106ef9190611629565b604051809103905ff080158015610708573d5f5f3e3d5ffd5b506001600160a01b0381165f818152602085905260409081902080546001600160a01b0319169092179091555190915081907f2b6327e1e7e3916242db759523feaab8eb1bc65ed903a41a1ff88ee3c1ab939590610769908390879061163b565b60405180910390a150505050565b61077f610973565b6001600160a01b0381166107ad57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6107b681610be3565b50565b6107c1610943565b5f516020613e885f395f51905f525f81816107df60208601866111cc565b6001600160a01b03908116825260208201929092526040015f20541690508061081b576040516305c19d3560e51b815260040160405180910390fd5b5f610829604085018561165e565b90506001600160401b0381111561084257610842610f42565b60405190808252806020026020018201604052801561087557816020015b60608152602001906001900390816108605790505b5090505f5b610887604086018661165e565b90508110156109235761089d604086018661165e565b828181106108ad576108ad611507565b90506020028101906108bf91906114a0565b6108c990806114be565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508451859250849150811061091057610910611507565b602090810291909101015260010161087a565b506001600160a01b03821663d90794cf61055160408701602088016111cc565b5f516020613e685f395f51905f525460ff16156103da5760405163d93c066560e01b815260040160405180910390fd5b336109a57f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146103da5760405163118cdaa760e01b81523360048201526024016107a4565b6109d6610cc4565b5f516020613e685f395f51905f52805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ab357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aa75f516020613e485f395f51905f52546001600160a01b031690565b6001600160a01b031614155b156103da5760405163703e46dd60e11b815260040160405180910390fd5b6107b6610973565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b33575060408051601f3d908101601f19168201909252610b30918101906116a3565b60015b610b5b57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016107a4565b5f516020613e485f395f51905f528114610b8b57604051632a87526960e21b8152600481018290526024016107a4565b610b958383610cf3565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103da5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b610c5b610943565b5f516020613e685f395f51905f52805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610a0f565b6103da610d48565b610cab610d48565b6107b681610d91565b610cbc610d48565b6103da610d99565b5f516020613e685f395f51905f525460ff166103da57604051638dfc202b60e01b815260040160405180910390fd5b610cfc82610db9565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115610d4057610b958282610e1c565b6103f7610e8e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166103da57604051631afcd79f60e31b815260040160405180910390fd5b61077f610d48565b610da1610d48565b5f516020613e685f395f51905f52805460ff19169055565b806001600160a01b03163b5f03610dee57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016107a4565b5f516020613e485f395f51905f5280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b031684604051610e3891906116ba565b5f60405180830381855af49150503d805f8114610e70576040519150601f19603f3d011682016040523d82523d5f602084013e610e75565b606091505b5091509150610e85858383610ead565b95945050505050565b34156103da5760405163b398979f60e01b815260040160405180910390fd5b606082610ec257610ebd82610f0c565b610f05565b8151158015610ed957506001600160a01b0384163b155b15610f0257604051639996b31560e01b81526001600160a01b03851660048201526024016107a4565b50805b9392505050565b805115610f1c5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b612777806116d183390190565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715610f7857610f78610f42565b60405290565b604051602081016001600160401b0381118282101715610f7857610f78610f42565b604051601f8201601f191681016001600160401b0381118282101715610fc857610fc8610f42565b604052919050565b80356001600160a01b0381168114610fe6575f5ffd5b919050565b5f5f6001600160401b0384111561100457611004610f42565b50601f8301601f191660200161101981610fa0565b91505082815283838301111561102d575f5ffd5b828260208301375f602084830101529392505050565b5f82601f830112611052575f5ffd5b610f0583833560208501610feb565b5f8183036080811215611072575f5ffd5b61107a610f56565b915082356001600160401b03811115611091575f5ffd5b61109d85828601611043565b83525060208301356001600160401b038111156110b8575f5ffd5b6110c485828601611043565b60208401525060408301356001600160401b038111156110e2575f5ffd5b6110ee85828601611043565b6040840152506020605f1982011215611105575f5ffd5b5061110e610f7e565b60608301356001600160401b0381168114611127575f5ffd5b8152606082015292915050565b5f60208284031215611144575f5ffd5b81356001600160401b03811115611159575f5ffd5b82016040818503121561116a575f5ffd5b604080519081016001600160401b038111828210171561118c5761118c610f42565b60405261119882610fd0565b815260208201356001600160401b038111156111b2575f5ffd5b6111be86828501611061565b602083015250949350505050565b5f602082840312156111dc575f5ffd5b610f0582610fd0565b5f5f604083850312156111f6575f5ffd5b6111ff83610fd0565b915060208301356001600160401b03811115611219575f5ffd5b8301601f81018513611229575f5ffd5b61123885823560208401610feb565b9150509250929050565b5f60608284031215611252575f5ffd5b50919050565b5f60208284031215611268575f5ffd5b81356001600160401b0381111561127d575f5ffd5b61128984828501611242565b949350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610f056020830184611291565b5f82601f8301126112e0575f5ffd5b81356001600160401b038111156112f9576112f9610f42565b8060051b61130960208201610fa0565b91825260208185018101929081019086841115611324575f5ffd5b6020860192505b8383101561134d5761133c83610fd0565b82526020928301929091019061132b565b9695505050505050565b5f60208284031215611367575f5ffd5b81356001600160401b0381111561137c575f5ffd5b82016080818503121561138d575f5ffd5b611395610f56565b61139e82610fd0565b815260208201356001600160401b038111156113b8575f5ffd5b6113c4868285016112d1565b60208301525060408201356001600160401b038111156113e2575f5ffd5b6113ee868285016112d1565b60408301525060608201356001600160401b0381111561140c575f5ffd5b61141886828501611061565b606083015250949350505050565b5f81516080845261143a6080850182611291565b9050602083015184820360208601526114538282611291565b9150506040830151848203604086015261146d8282611291565b9150506001600160401b036060840151511660608501528091505092915050565b602081525f610f056020830184611426565b5f8235601e198336030181126114b4575f5ffd5b9190910192915050565b5f5f8335601e198436030181126114d3575f5ffd5b8301803591506001600160401b038211156114ec575f5ffd5b602001915036819003821315611500575f5ffd5b9250929050565b634e487b7160e01b5f52603260045260245ffd5b5f6040820160018060a01b03851683526040602084015280845180835260608501915060608160051b8601019250602086015f5b8281101561158057605f1987860301845261156b858351611291565b9450602093840193919091019060010161154f565b5092979650505050505050565b5f8151808452602084019350602083015f5b828110156115c65781516001600160a01b031686526020958601959091019060010161159f565b5093949350505050565b60018060a01b0381511682525f6020820151608060208501526115f6608085018261158d565b90506040830151848203604086015261160f828261158d565b91505060608301518482036060860152610e858282611426565b602081525f610f0560208301846115d0565b6001600160a01b03831681526040602082018190525f90611289908301846115d0565b5f5f8335601e19843603018112611673575f5ffd5b8301803591506001600160401b0382111561168c575f5ffd5b6020019150600581901b3603821315611500575f5ffd5b5f602082840312156116b3575f5ffd5b5051919050565b5f82518060208501845e5f92019182525091905056fe608060405234801561000f575f5ffd5b5060405161277738038061277783398101604081905261002e9161047d565b8051606082015180516020909101515f610048838261069b565b506001610055828261069b565b5050506001600160a01b03811661008557604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61008e816101e5565b506060810151517f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f2009081906100c3908261069b565b5060608201516020015160018201906100dc908261069b565b5060608201516040015160028201906100f5908261069b565b506060828101510151516003820180546001600160401b0319166001600160401b039092169190911790555f600c8190555b82604001515181101561018a576101817f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68460400151838151811061016e5761016e610755565b602002602001015161023660201b60201c565b50600101610127565b505f5b8260200151518110156101dd576101d47f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab8460200151838151811061016e5761016e610755565b5060010161018d565b505050610769565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f828152600b602090815260408083206001600160a01b038516845290915281205460ff166102da575f838152600b602090815260408083206001600160a01b03861684529091529020805460ff191660011790556102923390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102dd565b505f5b92915050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715610319576103196102e3565b60405290565b604051602081016001600160401b0381118282101715610319576103196102e3565b604051601f8201601f191681016001600160401b0381118282101715610369576103696102e3565b604052919050565b80516001600160a01b0381168114610387575f5ffd5b919050565b5f82601f83011261039b575f5ffd5b81516001600160401b038111156103b4576103b46102e3565b8060051b6103c460208201610341565b918252602081850181019290810190868411156103df575f5ffd5b6020860192505b83831015610408576103f783610371565b8252602092830192909101906103e6565b9695505050505050565b5f82601f830112610421575f5ffd5b81516001600160401b0381111561043a5761043a6102e3565b61044d601f8201601f1916602001610341565b818152846020838601011115610461575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f6020828403121561048d575f5ffd5b81516001600160401b038111156104a2575f5ffd5b8201608081850312156104b3575f5ffd5b6104bb6102f7565b6104c482610371565b815260208201516001600160401b038111156104de575f5ffd5b6104ea8682850161038c565b60208301525060408201516001600160401b03811115610508575f5ffd5b6105148682850161038c565b60408301525060608201516001600160401b03811115610532575f5ffd5b91909101908185036080811215610547575f5ffd5b61054f6102f7565b83516001600160401b03811115610564575f5ffd5b61057088828701610412565b82525060208401516001600160401b0381111561058b575f5ffd5b61059788828701610412565b60208301525060408401516001600160401b038111156105b5575f5ffd5b6105c188828701610412565b6040830152506020605f19830112156105d8575f5ffd5b6105e061031f565b606094909401519391506001600160401b03841684146105fe575f5ffd5b9281526060838101919091528101919091529392505050565b600181811c9082168061062b57607f821691505b60208210810361064957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561069657805f5260205f20601f840160051c810160208510156106745750805b601f840160051c820191505b81811015610693575f8155600101610680565b50505b505050565b81516001600160401b038111156106b4576106b46102e3565b6106c8816106c28454610617565b8461064f565b6020601f8211600181146106fa575f83156106e35750848201515b5f19600385901b1c1916600184901b178455610693565b5f84815260208120601f198516915b828110156107295787850151825560209485019460019092019101610709565b508482101561074657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b612001806107765f395ff3fe6080604052600436106101d0575f3560e01c8063715018a6116100fd578063c87b56dd11610092578063dcb49c7311610062578063dcb49c731461055c578063e8a3d4851461056f578063e985e9c514610583578063f2fde38b146105a2575f5ffd5b8063c87b56dd146104cc578063d5391393146104eb578063d547741f1461051e578063d90794cf1461053d575f5ffd5b806395d89b41116100cd57806395d89b4114610467578063a217fddf1461047b578063a22cb4651461048e578063b88d4fde146104ad575f5ffd5b8063715018a6146103f8578063765a15bb1461040c5780638da5cb5b1461042b57806391d1485414610448575f5ffd5b80632f2ff15d1161017357806347e633801161014357806347e63380146103685780634f6ccce71461039b5780636352211e146103ba57806370a08231146103d9575f5ffd5b80632f2ff15d146102ec5780632f745c591461030b57806336568abe1461032a57806342842e0e14610349575f5ffd5b8063095ea7b3116101ae578063095ea7b31461026057806318160ddd1461028157806323b872dd1461029f578063248a9ca3146102be575f5ffd5b806301ffc9a7146101d457806306fdde0314610208578063081812fc14610229575b5f5ffd5b3480156101df575f5ffd5b506101f36101ee3660046116c5565b6105c1565b60405190151581526020015b60405180910390f35b348015610213575f5ffd5b5061021c6105d1565b6040516101ff9190611715565b348015610234575f5ffd5b50610248610243366004611727565b610672565b6040516001600160a01b0390911681526020016101ff565b34801561026b575f5ffd5b5061027f61027a366004611759565b610699565b005b34801561028c575f5ffd5b506008545b6040519081526020016101ff565b3480156102aa575f5ffd5b5061027f6102b9366004611781565b6106a8565b3480156102c9575f5ffd5b506102916102d8366004611727565b5f908152600b602052604090206001015490565b3480156102f7575f5ffd5b5061027f6103063660046117bb565b610736565b348015610316575f5ffd5b50610291610325366004611759565b61075a565b348015610335575f5ffd5b5061027f6103443660046117bb565b6107bd565b348015610354575f5ffd5b5061027f610363366004611781565b6107f5565b348015610373575f5ffd5b506102917f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab81565b3480156103a6575f5ffd5b506102916103b5366004611727565b61080f565b3480156103c5575f5ffd5b506102486103d4366004611727565b610864565b3480156103e4575f5ffd5b506102916103f33660046117e5565b61086e565b348015610403575f5ffd5b5061027f6108b3565b348015610417575f5ffd5b5061027f6104263660046118ef565b6108c6565b348015610436575f5ffd5b50600a546001600160a01b0316610248565b348015610453575f5ffd5b506101f36104623660046117bb565b610981565b348015610472575f5ffd5b5061021c6109ab565b348015610486575f5ffd5b506102915f81565b348015610499575f5ffd5b5061027f6104a83660046119eb565b6109e9565b3480156104b8575f5ffd5b5061027f6104c7366004611a24565b6109f4565b3480156104d7575f5ffd5b5061021c6104e6366004611727565b610a0c565b3480156104f6575f5ffd5b506102917f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610529575f5ffd5b5061027f6105383660046117bb565b610a44565b348015610548575f5ffd5b5061027f610557366004611a9a565b610a68565b61027f61056a366004611b19565b610bae565b34801561057a575f5ffd5b5061021c610c0e565b34801561058e575f5ffd5b506101f361059d366004611bac565b610c56565b3480156105ad575f5ffd5b5061027f6105bc3660046117e5565b610c83565b5f6105cb82610cc0565b92915050565b5f516020611fac5f395f51905f5280546060919081906105f090611bd4565b80601f016020809104026020016040519081016040528092919081815260200182805461061c90611bd4565b80156106675780601f1061063e57610100808354040283529160200191610667565b820191905f5260205f20905b81548152906001019060200180831161064a57829003601f168201915b505050505091505090565b5f61067c82610ce4565b505f828152600460205260409020546001600160a01b03166105cb565b6106a4828233610d1c565b5050565b6001600160a01b0382166106d657604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6106e2838333610d29565b9050836001600160a01b0316816001600160a01b031614610730576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016106cd565b50505050565b5f828152600b602052604090206001015461075081610dfc565b6107308383610e06565b5f6107648361086e565b82106107955760405163295f44f760e21b81526001600160a01b0384166004820152602481018390526044016106cd565b506001600160a01b03919091165f908152600660209081526040808320938352929052205490565b6001600160a01b03811633146107e65760405163334bd91960e11b815260040160405180910390fd5b6107f08282610e97565b505050565b6107f083838360405180602001604052805f8152506109f4565b5f61081960085490565b82106108415760405163295f44f760e21b81525f6004820152602481018390526044016106cd565b6008828154811061085457610854611c0c565b905f5260205f2001549050919050565b5f6105cb82610ce4565b5f6001600160a01b038216610898576040516322718ad960e21b81525f60048201526024016106cd565b506001600160a01b03165f9081526003602052604090205490565b6108bb610f02565b6108c45f610f2f565b565b6108f07f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab32610981565b61090d57604051636609677b60e11b815260040160405180910390fd5b80515f516020611fac5f395f51905f5290819061092a9082611c64565b506020820151600182019061093f9082611c64565b50604082015160028201906109549082611c64565b506040517fa5d4097edda6d87cb9329af83fb3712ef77eeb13738ffe43cc35a4ce305ad962905f90a15050565b5f918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f20180546060915f516020611fac5f395f51905f52916105f090611bd4565b6106a4338383610f80565b6109ff8484846106a8565b610730338585858561101e565b5f818152600d60209081526040918290209151606092610a2e92909101611d1e565b6040516020818303038152906040529050919050565b5f828152600b6020526040902060010154610a5e81610dfc565b6107308383610e97565b610a927f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a632610981565b610aaf57604051636609677b60e11b815260040160405180910390fd5b7f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f203545f516020611fac5f395f51905f52906001600160401b0316828115801590610b145750816001600160401b031681610b0860085490565b610b129190611dd2565b115b15610b3257604051636a29267160e01b815260040160405180910390fd5b5f5b81811015610ba557858582818110610b4e57610b4e611c0c565b9050602002810190610b609190611de5565b600c545f908152600d6020526040902091610b7c919083611e2e565b50610b8987600c54611146565b600c8054905f610b9883611ee7565b9091555050600101610b34565b50505050505050565b610bb98585856106a8565b82846001600160a01b0316866001600160a01b03167fbd5c95affecf80a51b513bb4eddd42724421b80ef31b07cee1b5b25d8ce5a05b8585604051610bff929190611eff565b60405180910390a45050505050565b604051606090610c42907f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f20290602001611d1e565b604051602081830303815290604052905090565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b610c8b610f02565b6001600160a01b038116610cb457604051631e4fbdf760e01b81525f60048201526024016106cd565b610cbd81610f2f565b50565b5f6001600160e01b03198216637965db0b60e01b14806105cb57506105cb8261115f565b5f818152600260205260408120546001600160a01b0316806105cb57604051637e27328960e01b8152600481018490526024016106cd565b6107f08383836001611183565b5f5f610d36858585611287565b90506001600160a01b038116610d9257610d8d84600880545f838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b610db5565b846001600160a01b0316816001600160a01b031614610db557610db58185611379565b6001600160a01b038516610dd157610dcc846113f6565b610df4565b846001600160a01b0316816001600160a01b031614610df457610df4858561149d565b949350505050565b610cbd81336114eb565b5f610e118383610981565b610e90575f838152600b602090815260408083206001600160a01b03861684529091529020805460ff19166001179055610e483390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016105cb565b505f6105cb565b5f610ea28383610981565b15610e90575f838152600b602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016105cb565b600a546001600160a01b031633146108c45760405163118cdaa760e01b81523360048201526024016106cd565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038216610fb257604051630b61174360e31b81526001600160a01b03831660048201526024016106cd565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561113f57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611060908890889087908790600401611f2d565b6020604051808303815f875af192505050801561109a575060408051601f3d908101601f1916820190925261109791810190611f69565b60015b611101573d8080156110c7576040519150601f19603f3d011682016040523d82523d5f602084013e6110cc565b606091505b5080515f036110f957604051633250574960e11b81526001600160a01b03851660048201526024016106cd565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461113d57604051633250574960e11b81526001600160a01b03851660048201526024016106cd565b505b5050505050565b6106a4828260405180602001604052805f815250611524565b5f6001600160e01b0319821663780e9d6360e01b14806105cb57506105cb8261153b565b808061119757506001600160a01b03821615155b15611258575f6111a684610ce4565b90506001600160a01b038316158015906111d25750826001600160a01b0316816001600160a01b031614155b80156111e557506111e38184610c56565b155b1561120e5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016106cd565b81156112565783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f90815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b5f828152600260205260408120546001600160a01b03908116908316156112b3576112b381848661158a565b6001600160a01b038116156112ed576112ce5f855f5f611183565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b0385161561131b576001600160a01b0385165f908152600360205260409020805460010190555b5f8481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b5f6113838361086e565b5f838152600760209081526040808320546001600160a01b03881684526006909252909120919250908183146113d8575f83815260208281526040808320548584528184208190558352600790915290208290555b5f938452600760209081526040808620869055938552525081205550565b6008545f9061140790600190611f84565b5f838152600960205260408120546008805493945090928490811061142e5761142e611c0c565b905f5260205f2001549050806008838154811061144d5761144d611c0c565b5f91825260208083209091019290925582815260099091526040808220849055858252812055600880548061148457611484611f97565b600190038181905f5260205f20015f9055905550505050565b5f60016114a98461086e565b6114b39190611f84565b6001600160a01b039093165f908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6114f58282610981565b6106a45760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016106cd565b61152e83836115ee565b6107f0335f85858561101e565b5f6001600160e01b031982166380ac58cd60e01b148061156b57506001600160e01b03198216635b5e139f60e01b145b806105cb57506301ffc9a760e01b6001600160e01b03198316146105cb565b61159583838361164f565b6107f0576001600160a01b0383166115c357604051637e27328960e01b8152600481018290526024016106cd565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016106cd565b6001600160a01b03821661161757604051633250574960e11b81525f60048201526024016106cd565b5f61162383835f610d29565b90506001600160a01b038116156107f0576040516339e3563760e11b81525f60048201526024016106cd565b5f6001600160a01b03831615801590610df45750826001600160a01b0316846001600160a01b0316148061168857506116888484610c56565b80610df45750505f908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b031981168114610cbd575f5ffd5b5f602082840312156116d5575f5ffd5b81356116e0816116b0565b9392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6116e060208301846116e7565b5f60208284031215611737575f5ffd5b5035919050565b80356001600160a01b0381168114611754575f5ffd5b919050565b5f5f6040838503121561176a575f5ffd5b6117738361173e565b946020939093013593505050565b5f5f5f60608486031215611793575f5ffd5b61179c8461173e565b92506117aa6020850161173e565b929592945050506040919091013590565b5f5f604083850312156117cc575f5ffd5b823591506117dc6020840161173e565b90509250929050565b5f602082840312156117f5575f5ffd5b6116e08261173e565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715611834576118346117fe565b60405290565b604051602081016001600160401b0381118282101715611834576118346117fe565b5f5f6001600160401b03841115611875576118756117fe565b50604051601f19601f85018116603f011681018181106001600160401b03821117156118a3576118a36117fe565b6040528381529050808284018510156118ba575f5ffd5b838360208301375f60208583010152509392505050565b5f82601f8301126118e0575f5ffd5b6116e08383356020850161185c565b5f602082840312156118ff575f5ffd5b81356001600160401b03811115611914575f5ffd5b82018084036080811215611926575f5ffd5b61192e611812565b82356001600160401b03811115611943575f5ffd5b61194f878286016118d1565b82525060208301356001600160401b0381111561196a575f5ffd5b611976878286016118d1565b60208301525060408301356001600160401b03811115611994575f5ffd5b6119a0878286016118d1565b6040830152506020605f19830112156119b7575f5ffd5b6119bf61183a565b9150606083013592506001600160401b03831683146119dc575f5ffd5b91815260608201529392505050565b5f5f604083850312156119fc575f5ffd5b611a058361173e565b915060208301358015158114611a19575f5ffd5b809150509250929050565b5f5f5f5f60808587031215611a37575f5ffd5b611a408561173e565b9350611a4e6020860161173e565b92506040850135915060608501356001600160401b03811115611a6f575f5ffd5b8501601f81018713611a7f575f5ffd5b611a8e8782356020840161185c565b91505092959194509250565b5f5f5f60408486031215611aac575f5ffd5b611ab58461173e565b925060208401356001600160401b03811115611acf575f5ffd5b8401601f81018613611adf575f5ffd5b80356001600160401b03811115611af4575f5ffd5b8660208260051b8401011115611b08575f5ffd5b939660209190910195509293505050565b5f5f5f5f5f60808688031215611b2d575f5ffd5b611b368661173e565b9450611b446020870161173e565b93506040860135925060608601356001600160401b03811115611b65575f5ffd5b8601601f81018813611b75575f5ffd5b80356001600160401b03811115611b8a575f5ffd5b886020828401011115611b9b575f5ffd5b959894975092955050506020019190565b5f5f60408385031215611bbd575f5ffd5b611bc68361173e565b91506117dc6020840161173e565b600181811c90821680611be857607f821691505b602082108103611c0657634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b601f8211156107f057805f5260205f20601f840160051c81016020851015611c455750805b601f840160051c820191505b8181101561113f575f8155600101611c51565b81516001600160401b03811115611c7d57611c7d6117fe565b611c9181611c8b8454611bd4565b84611c20565b6020601f821160018114611cc3575f8315611cac5750848201515b5f19600385901b1c1916600184901b17845561113f565b5f84815260208120601f198516915b82811015611cf25787850151825560209485019460019092019101611cd2565b5084821015611d0f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b7f646174613a6170706c69636174696f6e2f6a736f6e3b757466382c000000000081525f5f8354611d4e81611bd4565b600182168015611d655760018114611d8057611db3565b60ff198316601b870152601b82151583028701019350611db3565b865f5260205f205f5b83811015611da8578154888201601b0152600190910190602001611d89565b5050601b8287010193505b509195945050505050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156105cb576105cb611dbe565b5f5f8335601e19843603018112611dfa575f5ffd5b8301803591506001600160401b03821115611e13575f5ffd5b602001915036819003821315611e27575f5ffd5b9250929050565b6001600160401b03831115611e4557611e456117fe565b611e5983611e538354611bd4565b83611c20565b5f601f841160018114611e8a575f8515611e735750838201355b5f19600387901b1c1916600186901b17835561113f565b5f83815260208120601f198716915b82811015611eb95786850135825560209485019460019092019101611e99565b5086821015611ed5575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b5f60018201611ef857611ef8611dbe565b5060010190565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90611f5f908301846116e7565b9695505050505050565b5f60208284031215611f79575f5ffd5b81516116e0816116b0565b818103818111156105cb576105cb611dbe565b634e487b7160e01b5f52603160045260245ffdfe99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f200a26469706673582212205e4d03c2a522aac54f3d4903f7b9f3bb11eb75fffa87af77f861b0ab9b66078664736f6c634300081c0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300f59cae2d8704429a88f4a038c4cff8d2643dc6b4647d519013fb42e0b4344200a26469706673582212208898ca55343d34118d66efebc2e5be48809e40649be99f7a44419609c9547c5464736f6c634300081c0033",
}

// LikeProtocolABI is the input ABI used to generate the binding from.
// Deprecated: Use LikeProtocolMetaData.ABI instead.
var LikeProtocolABI = LikeProtocolMetaData.ABI

// LikeProtocolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LikeProtocolMetaData.Bin instead.
var LikeProtocolBin = LikeProtocolMetaData.Bin

// DeployLikeProtocol deploys a new Ethereum contract, binding an instance of LikeProtocol to it.
func DeployLikeProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LikeProtocol, error) {
	parsed, err := LikeProtocolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LikeProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LikeProtocol{LikeProtocolCaller: LikeProtocolCaller{contract: contract}, LikeProtocolTransactor: LikeProtocolTransactor{contract: contract}, LikeProtocolFilterer: LikeProtocolFilterer{contract: contract}}, nil
}

// LikeProtocol is an auto generated Go binding around an Ethereum contract.
type LikeProtocol struct {
	LikeProtocolCaller     // Read-only binding to the contract
	LikeProtocolTransactor // Write-only binding to the contract
	LikeProtocolFilterer   // Log filterer for contract events
}

// LikeProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type LikeProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LikeProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LikeProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LikeProtocolSession struct {
	Contract     *LikeProtocol     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LikeProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LikeProtocolCallerSession struct {
	Contract *LikeProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// LikeProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LikeProtocolTransactorSession struct {
	Contract     *LikeProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// LikeProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type LikeProtocolRaw struct {
	Contract *LikeProtocol // Generic contract binding to access the raw methods on
}

// LikeProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LikeProtocolCallerRaw struct {
	Contract *LikeProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// LikeProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LikeProtocolTransactorRaw struct {
	Contract *LikeProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLikeProtocol creates a new instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocol(address common.Address, backend bind.ContractBackend) (*LikeProtocol, error) {
	contract, err := bindLikeProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LikeProtocol{LikeProtocolCaller: LikeProtocolCaller{contract: contract}, LikeProtocolTransactor: LikeProtocolTransactor{contract: contract}, LikeProtocolFilterer: LikeProtocolFilterer{contract: contract}}, nil
}

// NewLikeProtocolCaller creates a new read-only instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolCaller(address common.Address, caller bind.ContractCaller) (*LikeProtocolCaller, error) {
	contract, err := bindLikeProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolCaller{contract: contract}, nil
}

// NewLikeProtocolTransactor creates a new write-only instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*LikeProtocolTransactor, error) {
	contract, err := bindLikeProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolTransactor{contract: contract}, nil
}

// NewLikeProtocolFilterer creates a new log filterer instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*LikeProtocolFilterer, error) {
	contract, err := bindLikeProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolFilterer{contract: contract}, nil
}

// bindLikeProtocol binds a generic wrapper to an already deployed contract.
func bindLikeProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LikeProtocolMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LikeProtocol *LikeProtocolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LikeProtocol.Contract.LikeProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LikeProtocol *LikeProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.Contract.LikeProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LikeProtocol *LikeProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LikeProtocol.Contract.LikeProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LikeProtocol *LikeProtocolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LikeProtocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LikeProtocol *LikeProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LikeProtocol *LikeProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LikeProtocol.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _LikeProtocol.Contract.UPGRADEINTERFACEVERSION(&_LikeProtocol.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _LikeProtocol.Contract.UPGRADEINTERFACEVERSION(&_LikeProtocol.CallOpts)
}

// IsLikeNFTClass is a free data retrieval call binding the contract method 0x11b8da52.
//
// Solidity: function isLikeNFTClass(address classId) view returns(bool)
func (_LikeProtocol *LikeProtocolCaller) IsLikeNFTClass(opts *bind.CallOpts, classId common.Address) (bool, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "isLikeNFTClass", classId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsLikeNFTClass is a free data retrieval call binding the contract method 0x11b8da52.
//
// Solidity: function isLikeNFTClass(address classId) view returns(bool)
func (_LikeProtocol *LikeProtocolSession) IsLikeNFTClass(classId common.Address) (bool, error) {
	return _LikeProtocol.Contract.IsLikeNFTClass(&_LikeProtocol.CallOpts, classId)
}

// IsLikeNFTClass is a free data retrieval call binding the contract method 0x11b8da52.
//
// Solidity: function isLikeNFTClass(address classId) view returns(bool)
func (_LikeProtocol *LikeProtocolCallerSession) IsLikeNFTClass(classId common.Address) (bool, error) {
	return _LikeProtocol.Contract.IsLikeNFTClass(&_LikeProtocol.CallOpts, classId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolSession) Owner() (common.Address, error) {
	return _LikeProtocol.Contract.Owner(&_LikeProtocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolCallerSession) Owner() (common.Address, error) {
	return _LikeProtocol.Contract.Owner(&_LikeProtocol.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolSession) Paused() (bool, error) {
	return _LikeProtocol.Contract.Paused(&_LikeProtocol.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolCallerSession) Paused() (bool, error) {
	return _LikeProtocol.Contract.Paused(&_LikeProtocol.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolSession) ProxiableUUID() ([32]byte, error) {
	return _LikeProtocol.Contract.ProxiableUUID(&_LikeProtocol.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCallerSession) ProxiableUUID() ([32]byte, error) {
	return _LikeProtocol.Contract.ProxiableUUID(&_LikeProtocol.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "initialize", initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.Initialize(&_LikeProtocol.TransactOpts, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.Initialize(&_LikeProtocol.TransactOpts, initialOwner)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolTransactor) MintNFT(opts *bind.TransactOpts, msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "mintNFT", msgMintNFT)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolSession) MintNFT(msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFT(&_LikeProtocol.TransactOpts, msgMintNFT)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) MintNFT(msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFT(&_LikeProtocol.TransactOpts, msgMintNFT)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolTransactor) MintNFTs(opts *bind.TransactOpts, msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "mintNFTs", msgMintNFTs)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolSession) MintNFTs(msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFTs(&_LikeProtocol.TransactOpts, msgMintNFTs)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) MintNFTs(msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFTs(&_LikeProtocol.TransactOpts, msgMintNFTs)
}

// NewClass is a paid mutator transaction binding the contract method 0xf1773716.
//
// Solidity: function newClass((address,address[],address[],(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolTransactor) NewClass(opts *bind.TransactOpts, msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "newClass", msgNewClass)
}

// NewClass is a paid mutator transaction binding the contract method 0xf1773716.
//
// Solidity: function newClass((address,address[],address[],(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolSession) NewClass(msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.NewClass(&_LikeProtocol.TransactOpts, msgNewClass)
}

// NewClass is a paid mutator transaction binding the contract method 0xf1773716.
//
// Solidity: function newClass((address,address[],address[],(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) NewClass(msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.NewClass(&_LikeProtocol.TransactOpts, msgNewClass)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolSession) Pause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Pause(&_LikeProtocol.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Pause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Pause(&_LikeProtocol.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolSession) RenounceOwnership() (*types.Transaction, error) {
	return _LikeProtocol.Contract.RenounceOwnership(&_LikeProtocol.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LikeProtocol.Contract.RenounceOwnership(&_LikeProtocol.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.TransferOwnership(&_LikeProtocol.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.TransferOwnership(&_LikeProtocol.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolSession) Unpause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Unpause(&_LikeProtocol.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Unpause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Unpause(&_LikeProtocol.TransactOpts)
}

// UpdateClass is a paid mutator transaction binding the contract method 0x01cd9666.
//
// Solidity: function updateClass((address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolTransactor) UpdateClass(opts *bind.TransactOpts, msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "updateClass", msgUpdateClass)
}

// UpdateClass is a paid mutator transaction binding the contract method 0x01cd9666.
//
// Solidity: function updateClass((address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolSession) UpdateClass(msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpdateClass(&_LikeProtocol.TransactOpts, msgUpdateClass)
}

// UpdateClass is a paid mutator transaction binding the contract method 0x01cd9666.
//
// Solidity: function updateClass((address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) UpdateClass(msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpdateClass(&_LikeProtocol.TransactOpts, msgUpdateClass)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpgradeToAndCall(&_LikeProtocol.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpgradeToAndCall(&_LikeProtocol.TransactOpts, newImplementation, data)
}

// LikeProtocolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the LikeProtocol contract.
type LikeProtocolInitializedIterator struct {
	Event *LikeProtocolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolInitialized represents a Initialized event raised by the LikeProtocol contract.
type LikeProtocolInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) FilterInitialized(opts *bind.FilterOpts) (*LikeProtocolInitializedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolInitializedIterator{contract: _LikeProtocol.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *LikeProtocolInitialized) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolInitialized)
				if err := _LikeProtocol.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) ParseInitialized(log types.Log) (*LikeProtocolInitialized, error) {
	event := new(LikeProtocolInitialized)
	if err := _LikeProtocol.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolNewClassIterator is returned from FilterNewClass and is used to iterate over the raw logs and unpacked data for NewClass events raised by the LikeProtocol contract.
type LikeProtocolNewClassIterator struct {
	Event *LikeProtocolNewClass // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolNewClassIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolNewClass)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolNewClass)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolNewClassIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolNewClassIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolNewClass represents a NewClass event raised by the LikeProtocol contract.
type LikeProtocolNewClass struct {
	ClassId common.Address
	Params  MsgNewClass
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewClass is a free log retrieval operation binding the contract event 0x2b6327e1e7e3916242db759523feaab8eb1bc65ed903a41a1ff88ee3c1ab9395.
//
// Solidity: event NewClass(address classId, (address,address[],address[],(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) FilterNewClass(opts *bind.FilterOpts) (*LikeProtocolNewClassIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "NewClass")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolNewClassIterator{contract: _LikeProtocol.contract, event: "NewClass", logs: logs, sub: sub}, nil
}

// WatchNewClass is a free log subscription operation binding the contract event 0x2b6327e1e7e3916242db759523feaab8eb1bc65ed903a41a1ff88ee3c1ab9395.
//
// Solidity: event NewClass(address classId, (address,address[],address[],(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) WatchNewClass(opts *bind.WatchOpts, sink chan<- *LikeProtocolNewClass) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "NewClass")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolNewClass)
				if err := _LikeProtocol.contract.UnpackLog(event, "NewClass", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewClass is a log parse operation binding the contract event 0x2b6327e1e7e3916242db759523feaab8eb1bc65ed903a41a1ff88ee3c1ab9395.
//
// Solidity: event NewClass(address classId, (address,address[],address[],(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) ParseNewClass(log types.Log) (*LikeProtocolNewClass, error) {
	event := new(LikeProtocolNewClass)
	if err := _LikeProtocol.contract.UnpackLog(event, "NewClass", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LikeProtocol contract.
type LikeProtocolOwnershipTransferredIterator struct {
	Event *LikeProtocolOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolOwnershipTransferred represents a OwnershipTransferred event raised by the LikeProtocol contract.
type LikeProtocolOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LikeProtocolOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolOwnershipTransferredIterator{contract: _LikeProtocol.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LikeProtocolOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolOwnershipTransferred)
				if err := _LikeProtocol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) ParseOwnershipTransferred(log types.Log) (*LikeProtocolOwnershipTransferred, error) {
	event := new(LikeProtocolOwnershipTransferred)
	if err := _LikeProtocol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LikeProtocol contract.
type LikeProtocolPausedIterator struct {
	Event *LikeProtocolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolPaused represents a Paused event raised by the LikeProtocol contract.
type LikeProtocolPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) FilterPaused(opts *bind.FilterOpts) (*LikeProtocolPausedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolPausedIterator{contract: _LikeProtocol.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LikeProtocolPaused) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolPaused)
				if err := _LikeProtocol.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) ParsePaused(log types.Log) (*LikeProtocolPaused, error) {
	event := new(LikeProtocolPaused)
	if err := _LikeProtocol.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LikeProtocol contract.
type LikeProtocolUnpausedIterator struct {
	Event *LikeProtocolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolUnpaused represents a Unpaused event raised by the LikeProtocol contract.
type LikeProtocolUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LikeProtocolUnpausedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolUnpausedIterator{contract: _LikeProtocol.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LikeProtocolUnpaused) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolUnpaused)
				if err := _LikeProtocol.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) ParseUnpaused(log types.Log) (*LikeProtocolUnpaused, error) {
	event := new(LikeProtocolUnpaused)
	if err := _LikeProtocol.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the LikeProtocol contract.
type LikeProtocolUpgradedIterator struct {
	Event *LikeProtocolUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolUpgraded represents a Upgraded event raised by the LikeProtocol contract.
type LikeProtocolUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*LikeProtocolUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolUpgradedIterator{contract: _LikeProtocol.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *LikeProtocolUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolUpgraded)
				if err := _LikeProtocol.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) ParseUpgraded(log types.Log) (*LikeProtocolUpgraded, error) {
	event := new(LikeProtocolUpgraded)
	if err := _LikeProtocol.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
